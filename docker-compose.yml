services:

    # The database of the backend application.
    db:
        image: postgres:14-alpine
        container_name: manazeak_postgresql
        environment:
            POSTGRES_DB: music
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - ${DB_DATA}:/var/lib/postgresql/data
        # Ports used to access the database from the outside (can be removed for prod scenarios).
        ports:
            - "5432:5432"

    # The backend application contains all the hidden logic for the front.
    back:
        build:
            context: .
            target: ${BACK_TARGET}
            dockerfile: back/Dockerfile
        container_name: manazeak_app
        # Debug ports.
        ports:
            - "5005:5005"
            - "8080:8080"
            - "35729:35729"
        volumes:
            - ${RESOURCES_PATH}:/resources
            - ${LIBRARY_PATH}:/library
            - ${LOGS_PATH}:/log
            - ${ASSETS_PATH}:/assets
            # Adding the certificate generated by ES, adding it in read-only mode.
            # - ${ES_CERT_COPY_PATH}/ca.crt:/cert/es.crt:ro
        links:
            - db
        depends_on:
            db:
                condition: service_started

    # This container allows serving the static files and the JS.
    # Also is the reverse proxy for the backend application.
    nginx:
        image: nginx:latest
        container_name: manazeak_nginx
        ports:
            - "80:8080"
        volumes:
            - ${LIBRARY_PATH}:/library
            - ${RESOURCES_PATH}:/resources
            - ./docker/nginx/config:/etc/nginx/conf.d
            - ./static:/static
        depends_on:
            - back
        links:
            - back
            - moodbar

    # This container is used to generate the file containing the encoded moodbars.
    moodbar:
        image: manazeak/moodbar_docker
        container_name: manazeak_moodbar
        volumes:
            - ${LIBRARY_PATH}:/library
            # This folder contains the moodbar generated by the container.
            - ${RESOURCES_PATH}:/resources
        links:
            - back

    mzk-os-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
        image: opensearchproject/opensearch:2 # Specifying the latest available image - modify if you want a specific version
        container_name: opensearch-node1
        environment:
            - cluster.name=opensearch-cluster # Name the cluster
            - node.name=opensearch-node1 # Name the node that will run in this container
            - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
            - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
            - bootstrap.memory_lock=true # Disable JVM heap memory swapping
            - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx4g" # Set min and max JVM heap sizes to at least 50% of system RAM
            - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_ADMIN_PASSWORD}    # Sets the demo admin user password when using demo configuration, required for OpenSearch 2.12 and later
        ulimits:
            memlock:
                soft: -1 # Set memlock to unlimited (no soft or hard limit)
                hard: -1
            nofile:
                soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
                hard: 65536
        volumes:
            - ${OPEN_SEARCH_DATA}/node1:/usr/share/opensearch/data # Creates a volume called opensearch-data1 and mounts it to the container
        ports:
            - "9200:9200" # REST API
            - "9600:9600" # Performance Analyzer

    mzk-os-node2:
        image: opensearchproject/opensearch:2 # This should be the same image used for opensearch-node1 to avoid issues
        container_name: opensearch-node2
        environment:
            - cluster.name=opensearch-cluster
            - node.name=opensearch-node2
            - discovery.seed_hosts=opensearch-node1,opensearch-node2
            - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
            - bootstrap.memory_lock=true
            - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx4g"
            - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_ADMIN_PASSWORD}
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        volumes:
            - ${OPEN_SEARCH_DATA}/node2:/usr/share/opensearch/data

    opensearch-dashboards:
        image: opensearchproject/opensearch-dashboards:2 # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
        container_name: opensearch-dashboards
        ports:
            - "5601:5601" # Map host port 5601 to container port 5601
        expose:
            - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
        environment:
            OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
        links:
            - back
            - mzk-os-node1
            - mzk-os-node2

    syncthing:
        image: syncthing/syncthing:latest
        container_name: manazeak_syncthing
        # For local discovery use this :
        # network_mode: "host"
        volumes:
            - ${LIBRARY_PATH}:/ManaZeak
            - ${ASSETS_PATH}:/Pictures # Path leading to the ManaZeak Pictures (artists face, genre and producer logo)
        ports:
            - "127.0.0.1:8384:8384"
            - "22000:22000"
            - "21027:21027/udp"
