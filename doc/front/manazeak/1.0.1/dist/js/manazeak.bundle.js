/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./front/js/core/Controller.js":
/*!*************************************!*\
  !*** ./front/js/core/Controller.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/enum/ProgressControl.js */ "./front/js/utils/enum/ProgressControl.js");
/* harmony import */ var _utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/enum/VolumeControl.js */ "./front/js/utils/enum/VolumeControl.js");
/* harmony import */ var _utils_enum_PlayerRepeatMode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/enum/PlayerRepeatMode.js */ "./front/js/utils/enum/PlayerRepeatMode.js");
/* harmony import */ var _utils_enum_PlayerPlaybackMode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/enum/PlayerPlaybackMode.js */ "./front/js/utils/enum/PlayerPlaybackMode.js");
/* harmony import */ var _Player_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Player.js */ "./front/js/core/Player.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var Controller = /*#__PURE__*/function () {
  /**
   * @class
   * @constructor
   * @summary Abstract model controller for playback and player
   * @author Arthur Beaulieu
   * @since July 2023
   * @licence GPL-v3.0
   * @description
   * <blockquote>
   * The `Controller` holds the audio player, and encapsulates most of its methods to do additionnal
   * process. It also holds repeat and playback mode, queue and track history. Finally, it handle all
   * determination for either previous and next track depending on the current playback context.
   * </blockquote> **/
  function Controller() {
    _classCallCheck(this, Controller);
    /** @private
     * @member {object} - The audio player component */
    this._player = null;
    /** @private
     * @member {object} - The playObject gives context and all tracks arround the item currently playing */
    this._playObject = null;
    /** @private
     * @member {string} - The currently playing track ID */
    this._playingId = '-1';

    /** @private
     * @member {array} - Previously played tracks stored in history to be restored when user hit previous */
    this._trackHistory = [];
    /** @private
     * @member {array} - The user queue, must only contains IDs  */
    this._queue = []; // User manual queue
    /** @private
     * @member {array} - The shuffle queue is a virtual queue only enabled when playback mode is at shuffle (ie 1) */
    this._shuffleQueue = []; // Internal for shuffle mode only
    /** @private
     * @member {boolean} - Does the shuffle queue needs to be inited when `Controller` receives a new playObject? */
    this._waitForShuffleTracks = true; // Flag to know if shuffle queue needs to be inited when changeTrack called

    /** @private
     * @member {number} - The player repeat mode enabled. See PlayerRepeatModeEnum */
    this._repeatMode = _utils_enum_PlayerRepeatMode_js__WEBPACK_IMPORTED_MODULE_2__["default"].NO_REPEAT; // 0 = off | 1 = one | 2 = all
    /** @private
     * @member {number} - The player playback mode enabled. See PlayerPlaybackModeEnum */
    this._playbackMode = _utils_enum_PlayerPlaybackMode_js__WEBPACK_IMPORTED_MODULE_3__["default"].NORMAL; // 0 = normal | 1 = shuffle | 2 = random
    // Start the init sequence to make `Controller` ready
    this._init();
    this._events();
    this._shortcuts();
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  -----------------------------------------  Component initialization  -----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _init
   * @private
   * @memberof Controller
   * @author Arthur Beaulieu
   * @since July 2023
   * @description <blockquote>
   * Initialize the `Controller` by creating its associated audio player.
   * </blockquote> **/
  _createClass(Controller, [{
    key: "_init",
    value: function _init() {
      if (DEBUG) {
        console.log('Controller._init : called');
      }
      // Use case should never happen, as main controller is not meant to be instanciated several times
      if (this._player) {
        return;
      }
      this._player = new _Player_js__WEBPACK_IMPORTED_MODULE_4__["default"]();
    }

    /** @method
     * @name _events
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Make the `Controller` ready to react to events broadcasted through the global event channel.
     * </blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      if (DEBUG) {
        console.log('Controller._events : called');
      }
      Evts.subscribe('TrackEnded', this._playNext.bind(this));
    }

    /** @method
     * @name _shortcuts
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Register keyboard shortcuts to control the playback and player. Multi keys shortcuts must be declared before
     * simple ones, to respect the cascading trigger order.
     * </blockquote> **/
  }, {
    key: "_shortcuts",
    value: function _shortcuts() {
      if (DEBUG) {
        console.log('Controller._shortcuts : called');
      }
      // Volume control
      Shortcut.register('Ctrl+Shift+ArrowDown', function () {
        mzk.adjustVolume(-_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__["default"].HUGE);
      });
      Shortcut.register('Ctrl+Shift+ArrowUp', function () {
        mzk.adjustVolume(_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__["default"].HUGE);
      });
      Shortcut.register('Ctrl+ArrowDown', function () {
        mzk.adjustVolume(-_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__["default"].BIG);
      });
      Shortcut.register('Ctrl+ArrowUp', function () {
        mzk.adjustVolume(_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__["default"].BIG);
      });
      Shortcut.register('ArrowDown', function () {
        mzk.adjustVolume(-_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__["default"].SMALL);
      });
      Shortcut.register('ArrowUp', function () {
        mzk.adjustVolume(_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_1__["default"].SMALL);
      });
      // Progress control
      Shortcut.register('Ctrl+Shift+ArrowLeft', function () {
        mzk.adjustProgress(-_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].HUGE_JUMP);
      });
      Shortcut.register('Ctrl+Shift+ArrowRight', function () {
        mzk.adjustProgress(_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].HUGE_JUMP);
      });
      Shortcut.register('Ctrl+ArrowLeft', function () {
        mzk.adjustProgress(-_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].BIG_JUMP);
      });
      Shortcut.register('Ctrl+ArrowRight', function () {
        mzk.adjustProgress(_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].BIG_JUMP);
      });
      Shortcut.register('ArrowLeft', function () {
        mzk.adjustProgress(-_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].SMALL_JUMP);
      });
      Shortcut.register('ArrowRight', function () {
        mzk.adjustProgress(_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].SMALL_JUMP);
      });
      // Playback control
      Shortcut.register(' ', function () {
        mzk.togglePlay();
      });
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -------------------------------------  Playback and progress management  -------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name togglePlay
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Toggles the player's playback state between playing/paused.
     * </blockquote> **/
  }, {
    key: "togglePlay",
    value: function togglePlay() {
      if (DEBUG) {
        console.log('Controller.togglePlay : called');
      }
      this._player.togglePlay();
    }

    /** @method
     * @name stopPlayback
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Stops the player's playback and reset playing track internal information.
     * </blockquote> **/
  }, {
    key: "stopPlayback",
    value: function stopPlayback() {
      if (DEBUG) {
        console.log('Controller.stopPlayback : called');
      }
      this._player.stop();
      this._playingTrack = null;
      this._playingId = -1;
    }

    /** @method
     * @name adjustProgress
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Adjust the player's progress from a specific amount of time in seconds, whether positive or negative. 
     * </blockquote> 
     * @param {number} amount - The amount of second to adjust player's progress with in seconds **/
  }, {
    key: "adjustProgress",
    value: function adjustProgress(amount) {
      if (DEBUG) {
        console.log('Controller.adjustProgress : called', amount);
      }
      this._player.adjustProgress(amount);
    }

    /** @method
     * @name setProgress
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Set the player's current time with a percentage value in range [0,100].
     * </blockquote>
     * @param {number} progress - The percentage to set the player's progress with **/
  }, {
    key: "setProgress",
    value: function setProgress(progress) {
      if (DEBUG) {
        console.log('Controller.setProgress : called', progress);
      }
      this._player.progress = progress;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------------------  Player volume management  -----------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name mute
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Mute the player's volume.
     * </blockquote> **/
  }, {
    key: "mute",
    value: function mute() {
      if (DEBUG) {
        console.log('Controller.mute : called');
      }
      this._player.mute();
    }

    /** @method
     * @name unmute
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Restore the volume at its before-mute state.
     * </blockquote> **/
  }, {
    key: "unmute",
    value: function unmute() {
      if (DEBUG) {
        console.log('Controller.unmute : called');
      }
      this._player.unmute();
    }

    /** @method
     * @name toggleMute
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Toggles the player's volume state between mute/unmute.
     * </blockquote> **/
  }, {
    key: "toggleMute",
    value: function toggleMute() {
      if (DEBUG) {
        console.log('Controller.toggleMute : called');
      }
      this._player.toggleMute();
    }

    /** @method
     * @name adjustVolume
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Adjust the player's volume from a specific amount in range [-1, 1], whether positive or negative. 
     * </blockquote> 
     * @param {number} amount - The percentage to adjust player's volume with **/
  }, {
    key: "adjustVolume",
    value: function adjustVolume(amount) {
      if (DEBUG) {
        console.log('Controller.adjustVolume : called', amount);
      }
      this._player.adjustVolume(amount);
    }

    /** @method
     * @name setVolume
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Set the player's volume with a percentage value in range [0, 1].
     * </blockquote>
     * @param {number} volume - The percentage to set the player's volume with **/
  }, {
    key: "setVolume",
    value: function setVolume(volume) {
      if (DEBUG) {
        console.log('Controller.setVolume : called', volume);
      }
      this._player.volume = volume;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------  Track update and next track determination  ---------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name changeTrack
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Change the player current track. Updates `playObject`, eventually init shuffle, perform the track
     * update in `Player` then update track history before dispatching the `ChangeTrack` global event.
     * </blockquote>
     * @param {object} data - Options to take into account while changing track
     * @param {object} data.playObject - The current playObject used for playback
     * @param {string} data.playObject.type - The playObject type in `['queue', 'album', 'genre']`
     * @param {object} data.playObject.track - The playObject track currently selected (to use for 'queue' only)
     * @param {array} data.playObject.tracks - The playObject tracks (to use for 'album' and 'genre')
     * @param {number} data.playObject.playingIdx - The playing track index in tracks (to use for 'album' and 'genre')
     * @param {number} [data.startTimePercentage=null] - The progress percentage to start playback with 
     * @returns {promise} Resolved when track updated with playing track as argument, rejected otherwise **/
  }, {
    key: "changeTrack",
    value: function changeTrack(data) {
      var _this = this;
      if (DEBUG) {
        console.log('Controller.changeTrack : called', data);
      }
      return new Promise(function (resolve, reject) {
        var track = data.playObject.track;
        // Only replace playObject if track to change didn't came from queue
        if (data.playObject.type !== 'queue') {
          _this._playObject = data.playObject;
          track = _this._playObject.tracks[_this._playObject.playingIdx];
          // Update shuffle queue with new playObject, only if shuffle queue empty (otherwise shuffle in progress)
          if (_this._waitForShuffleTracks === true && _this._playbackMode === _utils_enum_PlayerPlaybackMode_js__WEBPACK_IMPORTED_MODULE_3__["default"].SHUFFLE) {
            _this._waitForShuffleTracks = false; // New playObject, not waiting for tracks to shuffle anymore
            _this._initShuffleQueue();
          }
        }
        // Request a track change on pPlayer with track information
        _this._player.changeTrack("/play/".concat(track.id, "/"), data.startTimePercentage).then(function () {
          _this._addTrackHistory(data.playObject, track); // Update track history for previous feature
          _this._playingId = track.id; // Store playing track ID
          // Dispatch global event for components to react
          Evts.publish('ChangeTrack', {
            id: track.id
          });
          // Resolve to caller with playing track
          resolve(track);
        })["catch"](reject);
      });
    }

    /** @method
     * @name next
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Request for next track. Seek for queue first, for playback mode, then for repeat mode and finally from `playObject`
     * in natural order.
     * </blockquote> **/
  }, {
    key: "next",
    value: function next() {
      if (DEBUG) {
        console.log('Controller.next : called');
      }
      this._playNext();
    }

    /** @method
     * @name _playNext
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Callback method for global event `TrackEnded` (published by `Player`) to smoothly select the following track
     * to play, depending on the user queue, playback mode, repeat mode and playObject in memory (presented here
     * in its priority order). 
     * </blockquote> **/
  }, {
    key: "_playNext",
    value: function _playNext() {
      if (DEBUG) {
        console.log('Controller._playNext : called');
      }
      // Priority order : Queue > Shuffle > Repeat > PlayObject

      // First, we check user queue that overrides everything
      if (this._queue.length > 0) {
        this.__playNextFromQueue();
        return;
      }
      // Now check last playObject in memory for tracks to play
      if (this._playObject.tracks.length > 0) {
        // Then checking shuffle and random modes
        if (this._playbackMode === _utils_enum_PlayerPlaybackMode_js__WEBPACK_IMPORTED_MODULE_3__["default"].SHUFFLE) {
          this.__playNextFromShuffle();
          return;
        } else if (this._playbackMode === _utils_enum_PlayerPlaybackMode_js__WEBPACK_IMPORTED_MODULE_3__["default"].RANDOM) {
          this.__playNextFromRandom();
          return;
        }
        // Followed by repeat mode inspection
        if (this._repeatMode === _utils_enum_PlayerRepeatMode_js__WEBPACK_IMPORTED_MODULE_2__["default"].REPEAT_ONE) {
          // Repet one
          this.__playNextFromRepeatOne();
          return;
        } else if (this._playObject.playingIdx === this._playObject.tracks.length - 1) {
          // Last track in playObj reached
          if (this._repeatMode === _utils_enum_PlayerRepeatMode_js__WEBPACK_IMPORTED_MODULE_2__["default"].REPEAT_ALL) {
            // Repeat all
            this.__playNextFromRepeatAll();
            return;
          }
          // No track remaining in playObj, nor repeat mode enabled, stop playback.
          mzk.stopPlayback();
          return;
        }
        // Otherwise, play next from current playObject
        this.__playNextFromPlayObject();
        return;
      }
      // No track in playObj, stop playback.
      mzk.stopPlayback();
    }

    /** @method
     * @name __playNextFromQueue
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Internal method for `_playNext()`, used to set next track to play from queue.
     * </blockquote> **/
  }, {
    key: "__playNextFromQueue",
    value: function __playNextFromQueue() {
      if (DEBUG) {
        console.log('Controller.__playNextFromQueue : called');
      }
      mzk.changeTrack({
        id: this._queue[0].id,
        playObject: {
          type: 'queue',
          track: this._queue[0]
        }
      });
      // Shifting queue to properly end transaction
      this._queue.shift();
    }

    /** @method
     * @name __playNextFromShuffle
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Internal method for `_playNext()`, used to set next track to play in `playObject` when
     * playback mode is`PlayerPlaybackModeEnum.SHUFFLE` (ie = 1).
     * </blockquote> **/
  }, {
    key: "__playNextFromShuffle",
    value: function __playNextFromShuffle() {
      if (DEBUG) {
        console.log('Controller.__playNextFromShuffle : called');
      }
      // reached the end of shuffle internal queue
      if (!this._shuffleQueue.length) {
        if (this._repeatMode === _utils_enum_PlayerRepeatMode_js__WEBPACK_IMPORTED_MODULE_2__["default"].REPEAT_ALL) {
          this._waitForShuffleTracks = false;
          this._initShuffleQueue();
          // Force repush, otherwise playingIdx would be missing from infinte shuffle
          this._shuffleQueue.push(this._playObject.playingIdx);
          this.__playNextFromShuffle();
          return;
        }
        this._waitForShuffleTracks = true;
        mzk.stopPlayback();
        return;
      }
      // Pick rand idx in shuffle queue, apply value to playObj and remove from shuffle queue
      var randIdx = Math.floor(Math.random() * this._shuffleQueue.length);
      this._playObject.playingIdx = this._shuffleQueue[randIdx];
      this._shuffleQueue.splice(randIdx, 1);
      mzk.changeTrack({
        id: this._playObject.tracks[this._playObject.playingIdx].id,
        playObject: this._playObject
      });
    }

    /** @method
     * @name __playNextFromRandom
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Internal method for `_playNext()`, used to set next track to play in `playObject` when
     * playback mode is`PlayerPlaybackModeEnum.RANDOM` (ie = 2). As it takes a random item in
     * the playObject, the playback is infinite as if user is in `PlayerRepeatModeEnum.REPEAT_ALL`.
     * </blockquote> **/
  }, {
    key: "__playNextFromRandom",
    value: function __playNextFromRandom() {
      if (DEBUG) {
        console.log('Controller.__playNextFromRandom : called');
      }
      // Only draw a rand number in 0-x range for current playObject
      this._playObject.playingIdx = Math.floor(Math.random() * this._playObject.tracks.length);
      mzk.changeTrack({
        id: this._playObject.tracks[this._playObject.playingIdx].id,
        playObject: this._playObject
      });
    }

    /** @method
     * @name __playNextFromRepeatOne
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Internal method for `_playNext()`, used to set next track to play in `playObject` when
     * repeat mode is `PlayerRepeatModeEnum.REPEAT_ONE` (ie = 1). Simply play again current track.
     * </blockquote> **/
  }, {
    key: "__playNextFromRepeatOne",
    value: function __playNextFromRepeatOne() {
      if (DEBUG) {
        console.log('Controller.__playNextFromRepeatOne : called');
      }
      mzk.changeTrack({
        id: this._playObject.tracks[this._playObject.playingIdx].id,
        playObject: this._playObject
      });
    }

    /** @method
     * @name __playNextFromRepeatAll
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Internal method for `_playNext()`, used to set next track to play in `playObject` when
     * repeat mode is `PlayerRepeatModeEnum.REPEAT_ALL` (ie = 2). Start playback a tracks index 0.
     * </blockquote> **/
  }, {
    key: "__playNextFromRepeatAll",
    value: function __playNextFromRepeatAll() {
      if (DEBUG) {
        console.log('Controller.__playNextFromRepeatAll : called');
      }
      // Simply restart index to 0 in playObj
      this._playObject.playingIdx = 0;
      mzk.changeTrack({
        id: this._playObject.tracks[this._playObject.playingIdx].id,
        playObject: this._playObject
      });
    }

    /** @method
     * @name __playNextFromPlayObject
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Internal method for `_playNext()`, used to set next track to play in `playObject`.
     * </blockquote> **/
  }, {
    key: "__playNextFromPlayObject",
    value: function __playNextFromPlayObject() {
      if (DEBUG) {
        console.log('Controller.__playNextFromPlayObject : called');
      }
      // Getting next track in playObj
      this._playObject.playingIdx = (this._playObject.playingIdx + 1) % this._playObject.tracks.length;
      mzk.changeTrack({
        id: this._playObject.tracks[this._playObject.playingIdx].id,
        playObject: this._playObject
      });
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  Track history and previous feature  ------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name previous
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Request for previous track. Seek for history first, for `playObject` then and stop playback otherwise.
     * </blockquote> **/
  }, {
    key: "previous",
    value: function previous() {
      if (DEBUG) {
        console.log('Controller.previous : called');
      }
      // No history, check playObject to get previous in view. Stop playback otherwise
      if (this._trackHistory.length <= 1) {
        var _this$_playObject;
        // Ensure history is cleaned
        if (this._trackHistory.length === 1) {
          this._trackHistory.pop();
        }
        // Seek for previous track to play in playObject 
        if (((_this$_playObject = this._playObject) === null || _this$_playObject === void 0 ? void 0 : _this$_playObject.playingIdx) > 0) {
          this._playObject.playingIdx -= 1;
          mzk.changeTrack({
            id: this._playObject.tracks[this._playObject.playingIdx].id,
            playObject: this._playObject
          });
          return;
        }
        // Kill playback otherwise
        mzk.stopPlayback();
        return;
      }
      // Getting playObject from history
      var playObject = this._trackHistory.pop();
      if (playObject.tracks[playObject.playingIdx].id === this.playingId) {
        playObject = this._trackHistory.pop();
      }
      // Extract track from history entry
      var track = playObject.track; // Assuming default playObject type is from queue
      // Handle other playable view ('album' or 'genre')
      if (playObject.type !== 'queue') {
        track = playObject.tracks[playObject.playingIdx];
      }
      // Now apply new track to play
      mzk.changeTrack({
        id: track.id,
        playObject: playObject
      });
    }

    /** @method
     * @name _addTrackHistory
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Save a track into the track history so it can be used with the previous feature.
     * </blockquote>
     * @param {object} playObject - The track associated playObject
     * @param {string} playObject.type - The playObject type in `['queue', 'album', 'genre']`
     * @param {object} playObject.track - The playObject track currently selected (to use for 'queue' only)
     * @param {array} playObject.tracks - The playObject tracks (to use for 'album' and 'genre')
     * @param {number} playObject.playingIdx - The playing track index in tracks (to use for 'album' and 'genre')
     * @param {object} track - The track to save in history
     * @param {string} track.id - The track unique ID
     * @param {string} track.title - The track title
     * @param {string} track.artist - The track artist
     * @param {string} track.duration - The track duration in HH:MM:SS or MM:SS
     * @param {string} track.cover - The track cover path
     * @param {string} track.mood - The track moodbar image filename **/
  }, {
    key: "_addTrackHistory",
    value: function _addTrackHistory(playObject, track) {
      if (DEBUG) {
        console.log('Controller._addTrackHistory : called', playObject, track);
      }
      // Don't add track if latest track in history is current one
      if (this._trackHistory.length && track.id === this._trackHistory[this._trackHistory.length - 1].id) {
        return;
      }
      // Sanitize and push playObject into history
      this._trackHistory.push(JSON.parse(JSON.stringify(playObject)));
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------  Repeat/Playback, queue and shuffle methods  --------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name toggleRepeatMode
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Updates the repeat mode to it's following state in [0, 1, 2]. Please see PlayerRepeatModeEnum.
     * </blockquote> **/
  }, {
    key: "toggleRepeatMode",
    value: function toggleRepeatMode() {
      if (DEBUG) {
        console.log('Controller.toggleRepeatMode : called');
      }
      this._repeatMode = ++this._repeatMode % 3;
    }

    /** @method
     * @name togglePlaybackMode
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Updates the playback mode to it's following state in [0, 1, 2]. Please see PlayerPlaybackModeEnum. If user
     * is switching to shuffle mode (which value is 1), it will init the shuffle queue with the current playObject
     * tracks if any.
     * </blockquote> **/
  }, {
    key: "togglePlaybackMode",
    value: function togglePlaybackMode() {
      var _this$_playObject2, _this$_playObject2$tr;
      if (DEBUG) {
        console.log('Controller.togglePlaybackMode : called');
      }
      this._playbackMode = ++this._playbackMode % 3;
      // When toggling on shuffle, reset shuffle queue
      if (this._playbackMode === _utils_enum_PlayerPlaybackMode_js__WEBPACK_IMPORTED_MODULE_3__["default"].SHUFFLE && (_this$_playObject2 = this._playObject) !== null && _this$_playObject2 !== void 0 && (_this$_playObject2$tr = _this$_playObject2.tracks) !== null && _this$_playObject2$tr !== void 0 && _this$_playObject2$tr.length) {
        this._initShuffleQueue();
      } else {
        // Force shuffle queue reset
        this._shuffleQueue = [];
      }
    }

    /** @method
     * @name queue
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Append a new element in the user queue. Queue overrides current repeat/playback mode.
     * Individual track or trackset can be appended at once into the queue.
     * </blockquote>
     * @param {object} data - The object to queue (wether a track or a set of tracks)
     * @param {string} data.type - The object to add type, in `['track', 'tracklist']`
     * @param {string} data.id - Only relevant in `type === 'track`, the track ID to store in queue
     * @param {array} data.ids - Only relevant in `type === 'tracklist'`, the track IDs to stored in queue **/
  }, {
    key: "queue",
    value: function queue(data) {
      if (DEBUG) {
        console.log('Controller.queue : called', data);
      }
      if (data.type === 'track') {
        var track = mzk.ui.getTrackById(data.id);
        this._queue.push(track);
      } else if (data.type === 'tracklist') {
        for (var i = 0; i < data.ids.length; ++i) {
          var _track = mzk.ui.getTrackById(data.ids[i]);
          this._queue.push(_track);
        }
      }
    }

    /** @method
     * @name removeFromQueue
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Removes an individual track from the queue using its ID.
     * </blockquote>
     * @param {string} id - The track id to remove from queue **/
  }, {
    key: "removeFromQueue",
    value: function removeFromQueue(id) {
      if (DEBUG) {
        console.log('Controller.removeFromQueue : called', id);
      }
      for (var i = 0; i < this._queue.length; ++i) {
        if (this._queue[i].id === id) {
          this._queue.splice(i, 1);
          return;
        }
      }
    }

    /** @method
     * @name clearQueueTracks
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Clear the user queue and remove all its stored IDs.
     * </blockquote> **/
  }, {
    key: "clearQueueTracks",
    value: function clearQueueTracks() {
      if (DEBUG) {
        console.log('Controller.clearQueueTracks : called');
      }
      this._queue = [];
    }

    /** @method
     * @name _initShuffleQueue
     * @private
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Initialize shuffle queue by copying indexes from `playObject.tracks`. This copied array will serve
     * to know which tracks has already been shuffled and played. In case no `playObject` is already saved, an
     * internal flag `_waitForShuffleTracks` is set to `true`, so when `changeTrack` is called, bringing a new
     * `playObject` to analyse, the queue is initialized again.
     * </blockquote> **/
  }, {
    key: "_initShuffleQueue",
    value: function _initShuffleQueue() {
      if (DEBUG) {
        console.log('Controller._initShuffleQueue : called');
      }
      // Fill array with indexes values ([0/0, 1/1, ..., len/len])
      this._shuffleQueue = Array.from(Array(this._playObject.tracks.length).keys());
      // Must remove straight ahead track being played from shuffle if any
      if (this._playObject) {
        this._shuffleQueue.splice(this._playObject.playingIdx, 1);
      } else {
        this._waitForShuffleTracks = true; // Otherwise we need to wait for a call in changeTrack to get a playObject
      }
    }

    /** @method
     * @name download
     * @public
     * @memberof Controller
     * @author Arthur Beaulieu
     * @since July 2023
     * @description <blockquote>
     * Download a given audio file, using its ID. Creates a virtual href and serve the user a file to download.
     * </blockquote>
     * @param {object} data - The download data to properly fetch and create output file.
     * @param {string} data.name - The output filename
     * @param {string} data.id - The track ID to download **/
  }, {
    key: "download",
    value: function download(data) {
      if (DEBUG) {
        console.log('Controller.download : called');
      }
      var link = document.createElement('A');
      link.download = data.name;
      link.href = "/play/".concat(data.id, "/");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ----------------------------------------  Controller exposed getters  ----------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @public
     * @member {object} - The audio player component public accessor */
  }, {
    key: "player",
    get: function get() {
      return this._player;
    }

    /** @public
     * @member {object} - The queue content public accessor */
  }, {
    key: "queuedTracks",
    get: function get() {
      return this._queue;
    }

    /** @public
     * @member {object} - The current playObject public accessor */
  }, {
    key: "playObject",
    get: function get() {
      return this._playObject;
    }

    /** @public
     * @member {string} - The track playing ID public accessor */
  }, {
    key: "playingId",
    get: function get() {
      return this._playingId;
    }

    /** @public
     * @member {number} - The player's repeat mode public accessor */
  }, {
    key: "repeatMode",
    get: function get() {
      return this._repeatMode;
    }

    /** @public
     * @member {number} - The player's playback mode public accessor */
  }, {
    key: "playbackMode",
    get: function get() {
      return this._playbackMode;
    }
  }]);
  return Controller;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Controller);

/***/ }),

/***/ "./front/js/core/Data.js":
/*!*******************************!*\
  !*** ./front/js/core/Data.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Data = /*#__PURE__*/function () {
  function Data() {
    _classCallCheck(this, Data);
  } // Nothing to do here
  _createClass(Data, [{
    key: "getGenreInfo",
    value: function getGenreInfo(name) {
      return new Promise(function (resolve, reject) {
        console.log(name);
        resolve();
      });
    }
  }]);
  return Data;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Data);

/***/ }),

/***/ "./front/js/core/Kom.js":
/*!******************************!*\
  !*** ./front/js/core/Kom.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/enum/HttpStatusCode.js */ "./front/js/utils/enum/HttpStatusCode.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


/**
 * @class
 * @constructor
 * @public
 **/
var Kom = /*#__PURE__*/function () {
  /**
   * @summary Server communication abstraction
   * @author Arthur Beaulieu
   * @description
   * <blockquote>
   * This class is the main object to deal with when requesting something from the server.
   * It handle all urls calls (<code>GET</code>, <code>POST</code>), treat responses or handle errors using
   * <code>Promise</code>.<br>Because it uses <code>Promise</code>, success and errors are to be handled in the caller
   * function, using <code>.then()</code> and <code>.catch()</code>. To properly deal with <code>POST</code> request,
   * the session must contain a csrf token in cookies. Otherwise, those <code>POST</code> call may fail.
   * </blockquote>
   **/
  function Kom() {
    _classCallCheck(this, Kom);
    /** User session CSRF token to use in POST request
     * @private
     * @member {String}
     **/
    this._csrfToken = this._getCsrfCookie();
    /** Array of HTTP headers to be used in HTTP calls
     * @private
     * @member {Array[]}
     **/
    this._headers = this._createRequestHeaders();
    // Check that CSRF token exists and that headers are properly created
    this._checkValidity();
  }

  // ======================================================================== //
  // -------------------------- Class init utils ---------------------------- //
  // ======================================================================== //

  /**
   * @method
   * @name _getCsrfCookie
   * @private
   * @memberof Kom
   * @description
   * <blockquote>
   * Extract CSRF token value from client cookies and returns it as a string. Returns an empty
   * string by default. This method is required to be called on construction.
   * </blockquote>
   * @return {String} The CSRF token string
   **/
  _createClass(Kom, [{
    key: "_getCsrfCookie",
    value: function _getCsrfCookie() {
      if (document.cookie && document.cookie !== '') {
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; ++i) {
          var _cookie$;
          // Parse current cookie to extract its properties
          var cookie = cookies[i].split('=');
          if (cookie !== null && cookie !== void 0 && (_cookie$ = cookie[0]) !== null && _cookie$ !== void 0 && _cookie$.toLowerCase().includes('srf')) {
            // Found a matching cookie for csrftoken value, return as decoded string
            return decodeURIComponent(cookie[1]);
          }
        }
      }
      // Return empty string by default, POST calls may fail
      return '';
    }

    /**
     * @method
     * @name _createRequestHeaders
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * Fills Kom <code>_headers</code> private member array, to use in HTTP requests later on.
     * This method is required to be called on construction.
     * </blockquote>
     * @return {Array[]} The headers array, length 3, to be used in HTTP requests
     **/
  }, {
    key: "_createRequestHeaders",
    value: function _createRequestHeaders() {
      return [['Content-Type', 'application/json; charset=UTF-8'], ['Accept', 'application/json'], ['X-XSRF-TOKEN', this._csrfToken]];
    }

    /**
     * @method
     * @name _checkValidity
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * Check the Kom instance validity to ensure its properties validity.
     * </blockquote>
     **/
  }, {
    key: "_checkValidity",
    value: function _checkValidity() {
      if (this._csrfToken !== '') {
        if (this._headers.length !== 3) {
          console.error('F_KOM_HEADERS_ERROR');
        }
      } else {
        console.error('F_KOM_NO_CSRF_TOKEN');
      }
    }

    // ======================================================================== //
    // ----------------- Request resolution internal methods ------------------ //
    // ======================================================================== //

    /**
     * @method
     * @name _getErrorCodeFromHTTPStatus
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * This method is called whenever a server request didn't went well. In case a request
     * (from any type) fails, its HTTP status code have to be handle in the method, so it
     * returns an error code can be handled in the user interface (with notification, console or else).
     * </blockquote>
     * @param {Number} code - The HTTP status code to handle, in supported ones from HttpStatusCode enumeration
     * @return {String} The HTTP status as an error code
     **/
  }, {
    key: "_getErrorCodeFromHTTPStatus",
    value: function _getErrorCodeFromHTTPStatus(code) {
      if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__["default"].NOT_FOUND) {
        return 'B_KOM_NOT_FOUND';
      } else if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__["default"].FORBIDDEN) {
        return 'B_KOM_ACCESS_FORBIDDEN';
      } else if (code === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__["default"].INTERNAL_ERROR) {
        return 'B_KOM_INTERNAL_ERROR';
      } else {
        return "B_KOM_UNKNOWN_ERROR";
      }
    }

    /**
     * @method
     * @async
     * @name _resolveAs
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * Generic tool method used by private methods on fetch responses to format output in the provided
     * format. It must be either `json`, `text` or `raw`.
     * </blockquote>
     * @param {String} type - The type of resolution, can be `json`, `text` or `raw`
     * @param {Object} response - The <code>fetch</code> response object
     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject
     **/
  }, {
    key: "_resolveAs",
    value: function _resolveAs(type, response) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        if (response) {
          if (type === 'raw') {
            // Raw are made in XMLHttpRequest and need special handling
            if (response.status === _utils_enum_HttpStatusCode_js__WEBPACK_IMPORTED_MODULE_0__["default"].OK) {
              resolve(response.responseText);
            } else {
              reject(_this._getErrorCodeFromHTTPStatus(response.status));
            }
          } else if (type === 'json' || type === 'text') {
            // Call are made using fetch API
            if (response.status === 301) {
              window.location.href = '/login/';
            }
            if (response[type]) {
              resolve(response[type]());
            } else {
              // Fallback on standard error handling
              reject(_this._getErrorCodeFromHTTPStatus(response.status));
            }
          } else {
            // Resolution type doesn't exists
            reject('F_KOM_UNSUPPORTED_TYPE');
          }
        } else {
          reject('F_KOM_MISSING_ARGUMENT');
        }
      });
    }

    /**
     * @method
     * @async
     * @name _resolveAsJSON
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * Tool method used by public methods on fetch responses to format output data as JSON to be
     * read in JavaScript code as objects.
     * </blockquote>
     * @param {Object} response - The <code>fetch</code> response object
     * @returns {Promise} The request <code>Promise</code>, format response as an object on resolve, as error code string on reject
     **/
  }, {
    key: "_resolveAsJSON",
    value: function _resolveAsJSON(response) {
      return this._resolveAs('json', response);
    }

    /**
     * @method
     * @async
     * @name _resolveAsText
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * Tool method used by public methods on fetch responses to format output data as text to be
     * read in JavaScript code as string (mostly to parse HTML templates).
     * </blockquote>
     * @param {Object} response - The <code>fetch</code> response object
     * @returns {Promise} The request <code>Promise</code>, format response as a string on resolve, as error code string on reject
     **/
  }, {
    key: "_resolveAsText",
    value: function _resolveAsText(response) {
      return this._resolveAs('text', response);
    }

    /**
     * @method
     * @async
     * @name _resolveAsRaw
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * Tool method used by XmlHTTPRequests to format server response as raw binary data.
     * </blockquote>
     * @param {Object} response - The <code>XmlHTTPRequest</code> response status object
     * @returns {Promise} The request <code>Promise</code>, doesn't format response on resolve, send error code string on reject
     **/
  }, {
    key: "_resolveAsRaw",
    value: function _resolveAsRaw(response) {
      return this._resolveAs('raw', response);
    }

    // ======================================================================== //
    // ----------------------- HTTP GET calls methods ------------------------- //
    // ======================================================================== //

    /**
     * @method
     * @async
     * @name get
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>GET</code> HTTP request using the fetch API. <code>resolve</code> returns the
     * response as an <code>Object</code>. <code>reject</code> returns an error key as a <code>String</code>.
     * It is meant to perform API call to access database through the user interface.
     * </blockquote>
     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "get",
    value: function get(url) {
      var _this2 = this;
      var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._resolveAsJSON.bind(this);
      return new Promise(function (resolve, reject) {
        var options = {
          method: 'GET',
          headers: new Headers([_this2._headers[0]]) // Content type to JSON
        };

        fetch(url, options).then(resolution).then(resolve)["catch"](reject);
      });
    }

    /**
     * @method
     * @async
     * @name getText
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>GET</code> HTTP request using the fetch API. <code>resolve</code> returns the
     * response as a <code>String</code>. <code>reject</code> returns an error key as a <code>String</code>. It is
     * meant to perform API call to get HTML templates as string to be parsed as documents/documents fragments.
     * </blockquote>
     * @param {String} url - The <code>GET</code> url to fetch data from, in supported back URLs
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "getText",
    value: function getText(url) {
      return this.get(url, this._resolveAsText.bind(this));
    }

    /**
     * @method
     * @async
     * @name getRaw
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>GET</code> HTTP request using an <code>XMLHttpRequest</code>, with an override
     * mime type hack to pass bytes through unprocessed. <code>resolve</code> returns the response
     * as raw binary data. <code>reject</code> returns an error code as a <code>String</code>.
     * </blockquote>
     * @param {String} url - The url to fetch raw data from
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "getRaw",
    value: function getRaw(url) {
      var _this3 = this;
      return new Promise(function (resolve, reject) {
        _this3._xhrCall(url, 'GET', null).then(resolve)["catch"](reject);
      });
    }

    // ======================================================================== //
    // ----------------------- HTTP POST calls methods ------------------------ //
    // ======================================================================== //

    /**
     * @method
     * @async
     * @name post
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>POST</code> HTTP request using the fetch API. Beware that the given options
     * object match the url expectations. <code>resolve</code> returns the response as an
     * <code>Object</code>. <code>reject</code> returns an error key as a <code>String</code>.
     * </blockquote>
     * @param {String} url - The <code>POST</code> url to fetch data from
     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "post",
    value: function post(url, data) {
      var _this4 = this;
      var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._resolveAsJSON.bind(this);
      return new Promise(function (resolve, reject) {
        var options = {
          method: 'POST',
          headers: new Headers(_this4._headers),
          // POST needs all previously defined headers
          body: JSON.stringify(data)
        };
        fetch(url, options).then(resolution).then(resolve)["catch"](reject);
      });
    }

    /**
     * @method
     * @async
     * @name postText
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>POST</code> HTTP request using the fetch API. Beware that the given options
     * object match the url expectations. <code>resolve</code> returns the response as a
     * <code>String</code>. <code>reject</code> returns an error key as a <code>String</code>.
     * </blockquote>
     * @param {String} url - The <code>POST</code> url to fetch data from
     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "postText",
    value: function postText(url, data) {
      return this.post(url, data, this._resolveAsText.bind(this));
    }

    /**
     * @method
     * @async
     * @name postRaw
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>POST</code> HTTP request using the fetch API. Beware that the given options
     * object match the url expectations.<br><code>resolve</code>, with an override
     * mime type hack to pass bytes through unprocessed. <code>resolve</code> returns the
     * response as raw binary data. <code>reject</code> returns an error code as a <code>String</code>.
     * </blockquote>
     * @param {String} url - The url to fetch raw data from
     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "postRaw",
    value: function postRaw(url, data) {
      var _this5 = this;
      return new Promise(function (resolve, reject) {
        _this5._xhrCall(url, 'POST', JSON.stringify(data)).then(resolve)["catch"](reject);
      });
    }

    /**
     * @method
     * @async
     * @name postForm
     * @public
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>POST</code> HTTP request using <code>XMLHttpRequest</code> with form data.
     * <code>resolve</code> returns the response as raw binary data. <code>reject</code>
     * returns an error code as a <code>String</code>.
     * </blockquote>
     * @param {String} url - The url to fetch raw data from
     * @param {Object} data - The <code>JSON</code> object that contains <code>POST</code> parameters
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "postForm",
    value: function postForm(url, data) {
      var _this6 = this;
      return new Promise(function (resolve, reject) {
        // Create virtual form
        var form = document.createElement('FORM');
        form.method = 'POST';
        form.action = url;
        // Declare its virtual fields from sent data
        for (var key in data) {
          if (data.hasOwnProperty(key)) {
            var hiddenField = document.createElement('INPUT');
            hiddenField.type = 'hidden';
            hiddenField.name = key;
            hiddenField.value = data[key];
            form.appendChild(hiddenField);
          }
        }
        // Build XHR with xsrf token
        var xhr = new XMLHttpRequest();
        xhr.open('POST', url);
        xhr.setRequestHeader('X-XSRF-TOKEN', _this6._csrfToken);
        // Register the state change event
        xhr.onreadystatechange = function (response) {
          if (response.target.readyState === 4) {
            // Ready state changed has reach the response state
            // As specified with backend, response is JSON if success, HTML otherwise
            try {
              // If we can parse as a JSON, everything went fine server side
              var output = JSON.parse(response.target.response);
              resolve(output);
            } catch (_unused) {
              // Otherwise, the server returns the template with its errors
              reject(response.target.response);
            }
          }
        };
        // XHR error handling
        xhr.onerror = function () {
          reject('F_KOM_XHR_ERROR');
        };
        // Create form data and send it through the XHR
        var formData = new FormData(form);
        xhr.send(formData);
      });
    }

    // ======================================================================== //
    // ------------------ Generic HTTP server calls methods ------------------- //
    // ======================================================================== //

    /**
     * @method
     * @async
     * @name _xhrCall
     * @private
     * @memberof Kom
     * @description
     * <blockquote>
     * <code>POST</code> HTTP request using <code>XMLHttpRequest</code> with form data.
     * <code>resolve</code> returns the response as raw binary data. <code>reject</code>
     * returns an error code as a <code>String</code>.
     * </blockquote>
     * @param {String} url - The url to fetch raw data from
     * @param {String} verb - The HTTP verb to perform the request with
     * @param {Object} data - The <code>JSON</code> object that contains request parameters
     * @returns {Promise} The request <code>Promise</code>
     **/
  }, {
    key: "_xhrCall",
    value: function _xhrCall(url, verb, data) {
      var _this7 = this;
      return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open(verb, url, true);
        xhr.overrideMimeType('text/plain; charset=x-user-defined');
        xhr.onreadystatechange = function (response) {
          if (response.target.readyState === 4) {
            // Ready state changed has reach the response state
            _this7._resolveAsRaw(response.target).then(resolve)["catch"](reject);
          }
        };
        xhr.onerror = function () {
          reject('F_KOM_XHR_ERROR');
        };
        xhr.send(data);
      });
    }
  }]);
  return Kom;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Kom);

/***/ }),

/***/ "./front/js/core/Lang.js":
/*!*******************************!*\
  !*** ./front/js/core/Lang.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @class
 * @constructor
 * @public
 **/
var Lang = /*#__PURE__*/function () {
  /**
   * @summary Frontend language manager
   * @author Arthur Beaulieu
   * @description
   * <blockquote>
   * This class is meant to be used to translate strings in ManaZeak. It is not responsible to translate
   * HTML templates, so it only fill frontend errors (with notifications)
   * @param {String} lang - A two letter string indicating the langage to pick
   * </blockquote>
   **/
  function Lang(lang) {
    _classCallCheck(this, Lang);
    // Enforce sent argument is properly set
    if (!this._testInput(lang)) {
      return;
    }
    /** The class current lang used
     * @private
     * @member {String}
     **/
    this._lang = lang || 'en';
    /** The lang key/value pairs
     * @private
     * @member {Object}
     **/
    this._nls = {};
    // Must first fetch keys before being ready to use
    this._fetchKeys(this._lang);
  }
  _createClass(Lang, [{
    key: "_testInput",
    value: function _testInput(lang) {
      // Proper type and length
      if (!lang || typeof lang !== 'string' || lang.length !== 2) {
        return null;
      }
      return true;
    }

    /**
     * @method
     * @async
     * @name _fetchKeys
     * @private
     * @memberof Lang
     * @description
     * <blockquote>
     * This method will perform an async call to get the langage JSON file, and will
     * then update the global frontend Logger
     * </blockquote>
     * @param {String} lang - A two letter string indicating the langage to fetch
     **/
  }, {
    key: "_fetchKeys",
    value: function _fetchKeys(lang) {
      var _this = this;
      mzk.kom.get("static/nls/".concat(lang, ".json")).then(function (keys) {
        _this._nls = keys;
        Logger.errors = keys;
      })["catch"](this._fetchKeys.bind(this, 'en'));
    }

    /**
     * @method
     * @name get
     * @public
     * @memberof Lang
     * @description
     * <blockquote>
     * Use this getter to access the langage errors with the proper lang set.
     * </blockquote>
     * @param {String} key - The key to an error in the langage JSON file
     * @return {Object} The logging object with proper lang
     **/
  }, {
    key: "get",
    value: function get(key) {
      if (this._nls[key]) {
        return this._nls[key];
      }
      return {};
    }
  }]);
  return Lang;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Lang);

/***/ }),

/***/ "./front/js/core/Mzk.js":
/*!******************************!*\
  !*** ./front/js/core/Mzk.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Kom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Kom */ "./front/js/core/Kom.js");
/* harmony import */ var _Lang__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Lang */ "./front/js/core/Lang.js");
/* harmony import */ var _view_UserInterface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../view/UserInterface */ "./front/js/view/UserInterface.js");
/* harmony import */ var _Controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Controller.js */ "./front/js/core/Controller.js");
/* harmony import */ var _Data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Data.js */ "./front/js/core/Data.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var Mzk = /*#__PURE__*/function () {
  function Mzk() {
    _classCallCheck(this, Mzk);
    this.kom = null;
    this.nls = null;
    this.ui = null;
    this.ctrl = null;
    this.data = null;
  }
  _createClass(Mzk, [{
    key: "initSession",
    value: function initSession() {
      // HTML template is loaded with loading overlay
      // Initializing communication and UI controllers
      this.kom = new _Kom__WEBPACK_IMPORTED_MODULE_0__["default"]();
      this.nls = new _Lang__WEBPACK_IMPORTED_MODULE_1__["default"]('en');
      this.ui = new _view_UserInterface__WEBPACK_IMPORTED_MODULE_2__["default"]();
      this.ctrl = new _Controller_js__WEBPACK_IMPORTED_MODULE_3__["default"]();
      this.data = new _Data_js__WEBPACK_IMPORTED_MODULE_4__["default"]();
      // Init scene with main page
      this.setView({
        name: 'MainPage'
      });
    }
  }, {
    key: "setView",
    value: function setView(options) {
      this.ui.setSceneView(options)["catch"](function () {
        return Logger.raise('F_VIEW_SET_ERROR');
      });
    }
  }, {
    key: "setModal",
    value: function setModal(options) {
      this.ui.setModal(options)["catch"](function () {
        return Logger.raise('F_MODAL_SET_ERROR');
      });
    }
  }, {
    key: "changeTrack",
    value: function changeTrack(options) {
      var _this = this;
      this.ctrl.changeTrack(options).then(function (track) {
        return _this.ui.changeTrack(track);
      })["catch"](function (err) {
        return console.error(err);
      });
    }
  }, {
    key: "togglePlay",
    value: function togglePlay() {
      this.ctrl.togglePlay();
      this.ui.setPlay(this.ctrl.player.playing);
    }
  }, {
    key: "stopPlayback",
    value: function stopPlayback() {
      this.ctrl.stopPlayback();
      this.ui.stopPlayback();
    }
  }, {
    key: "toggleRepeatMode",
    value: function toggleRepeatMode() {
      this.ctrl.toggleRepeatMode();
      this.ui.setRepeatMode(this.ctrl.repeatMode);
    }
  }, {
    key: "togglePlaybackMode",
    value: function togglePlaybackMode() {
      this.ctrl.togglePlaybackMode();
      this.ui.setPlaybackMode(this.ctrl.playbackMode);
    }
  }, {
    key: "mute",
    value: function mute() {
      this.ctrl.mute();
    }
  }, {
    key: "unmute",
    value: function unmute() {
      this.ctrl.unmute();
    }
  }, {
    key: "toggleMute",
    value: function toggleMute() {
      this.ctrl.toggleMute();
      this.ui.setMute(this.ctrl.player);
    }
  }, {
    key: "adjustVolume",
    value: function adjustVolume(amount) {
      this.ctrl.adjustVolume(amount);
      this.ui.setVolume(this.ctrl.player);
    }
  }, {
    key: "setVolume",
    value: function setVolume(volume) {
      this.ctrl.setVolume(volume);
      this.ui.setVolume(this.ctrl.player);
    }
  }, {
    key: "adjustProgress",
    value: function adjustProgress(amount) {
      this.ctrl.adjustProgress(amount);
      this.ui.setProgress(this.ctrl.player.progress);
    }
  }, {
    key: "setProgress",
    value: function setProgress(progress) {
      this.ctrl.setProgress(progress);
      this.ui.setProgress(this.ctrl.player.progress);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(percentage) {
      var _this2 = this;
      this.ctrl.player.setPlaybackRate(percentage).then(function () {
        return _this2.ui.setPlaybackRate(percentage);
      })["catch"](function (err) {
        return console.error(err);
      });
    }
  }, {
    key: "previous",
    value: function previous() {
      this.ctrl.previous();
    }
  }, {
    key: "next",
    value: function next() {
      this.ctrl.next();
    }
  }, {
    key: "queue",
    value: function queue(data) {
      this.ctrl.queue(data);
      this.ui.queue(this.ctrl.queuedTracks);
    }
  }, {
    key: "clearQueueTracks",
    value: function clearQueueTracks() {
      this.ctrl.clearQueueTracks();
      this.ui.clearQueueTracks();
    }
  }, {
    key: "download",
    value: function download(options) {
      this.ctrl.download(options);
    }
  }]);
  return Mzk;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mzk);

/***/ }),

/***/ "./front/js/core/Player.js":
/*!*********************************!*\
  !*** ./front/js/core/Player.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Player = /*#__PURE__*/function () {
  /**
   * @summary <h1>Basic audio HTML music player</h1>
   * @author Arthur Beaulieu
   * @since July 2018
   * @description <blockquote>Provide a few features to control an audio playback. Should be handled in a controller.</blockquote>
   **/
  function Player() {
    _classCallCheck(this, Player);
    /** @private
     * @member {object} - The HTML audio player */
    this._player = {};
    /** @private
     * @member {number} - The player's volume in range float[0, 1] */
    this._volume = 0.0;
    /** @private
     * @member {boolean} - The player's mute flag */
    this._isMuted = false;
    /** @private
     * @member {boolean} - The player's is playing flag */
    this._isPlaying = false; // Playback flag
    /** @private
     * @member {number} - The player's playback rate float[0.25, 2] */
    this._playbackRate = 1; // Playback flag

    this._init(); // Init player object
    this._events(); // Listen to events
    this._attach(); // Attach HTML audio object to the DOM
  }

  //  ------------------------------------------------------------------------------------------------//
  //  -------------------------------------  CLASS INTERNALS  --------------------------------------  //
  //  ------------------------------------------------------------------------------------------------//

  /**
   * @method
   * @name _init
   * @private
   * @memberof Player
   * @author Arthur Beaulieu
   * @since July 2018
   * @description Build player object and set loop/volume values
   **/
  _createClass(Player, [{
    key: "_init",
    value: function _init() {
      this._player = document.createElement('AUDIO'); // Create HTML audio object
      this._player.id = 'mzk-audio-player'; // Assign player ID
      this.volume = 1; // Initialize volume to its maximum value, prefs
    }

    /**
     * @method
     * @name _event
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Listen to ended track event on audio player
     **/
  }, {
    key: "_events",
    value: function _events() {
      Evts.addEvent('ended', this._player, this._trackEnded, this); // Handle track end playback event
      Evts.addEvent('error', this._player, this._handleErrors, this);
    }

    /**
     * @method
     * @name _handleErrors
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since January 2019
     * @description Handle all the player's media errors
     **/
  }, {
    key: "_handleErrors",
    value: function _handleErrors(event) {
      var error = event.target.error;
      if (error.code === error.MEDIA_ERR_DECODE) {
        Logger.raise({
          code: 'MEDIA_DECODE_ERROR',
          frontend: true
        });
      } else if (error.code === error.MEDIA_ERR_ABORTED) {
        Logger.raise({
          code: 'MEDIA_ABORT_ERROR',
          frontend: true
        });
      } else if (error.code === error.MEDIA_ERR_NETWORK) {
        Logger.raise({
          code: 'MEDIA_NETWORK_ERROR',
          frontend: true
        });
      } else if (error.code === error.MEDIA_ERR_SRC_NOT_SUPPORTED) {
        Logger.raise({
          code: 'MEDIA_SRC_NOT_SUPPORTED_ERROR',
          frontend: true
        });
      } else {
        Logger.raise({
          code: 'MEDIA_UNKNOWN_ERROR',
          frontend: true
        });
      }
    }

    /**
     * @method
     * @name _attach
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Append audio player to the DOM using a fragment
     **/
  }, {
    key: "_attach",
    value: function _attach() {
      var fragment = document.createDocumentFragment(); // Fragment creation
      fragment.appendChild(this._player); // Append audio player to the fragment
      document.body.appendChild(fragment); // Append fragment to the document body
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -------------------------------------  PLAYBACK METHODS  -------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name play
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Swap playing state and start playback at currentTime
     **/
  }, {
    key: "play",
    value: function play(startTimePercentage) {
      if (this._player.src) {
        // Apply only if src is defined
        this._isPlaying = true; // Set playing state to true
        this._player.play(); // Start player efective playback
        if (startTimePercentage > 0) {
          this._setProgress(startTimePercentage);
        }
      }
    }

    /**
     * @method
     * @name pause
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Swap playing state and pause playback at currentTime
     **/
  }, {
    key: "pause",
    value: function pause() {
      if (this._player.src) {
        // Apply only if src is defined
        this._isPlaying = false; // Set playing state to false
        this._player.pause(); // Pause player playback
      }
    }

    /**
     * @method
     * @name stop
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Stop playback and remove source from player attributes
     **/
  }, {
    key: "stop",
    value: function stop() {
      if (this._player.src) {
        // Apply only if src is defined
        this._player.pause(); // Pause player playback
        this._isPlaying = false; // Set playing state to false
        this._player.removeAttribute('src'); // Remove src attribute from player (since this._player.src = null doesn't delete src)
      }
    }

    /**
     * @method
     * @name togglePlay
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Toggle the playback state of the player
     **/
  }, {
    key: "togglePlay",
    value: function togglePlay() {
      if (!this._isPlaying) {
        this.play();
      } else {
        this.pause();
      }
    }

    /**
     * @method
     * @name changeTrack
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Change the player source and start the playback once ready to play
     * @param {string} url - The path to the track (local or hosted)
     * @returns {Promise} A Promise that resolves when player is operating
     **/
  }, {
    key: "changeTrack",
    value: function changeTrack(url, startTimePercentage) {
      var _this = this;
      return new Promise(function (resolve) {
        // Invalid url type
        if (typeof url !== 'string') {
          Logger.raise({
            code: 'INVALID_TRACK_URL',
            frontend: true
          });
          return;
        }
        // Start playback callback used when player source has been loaded
        var startPlayback = function startPlayback() {
          if (!startTimePercentage) {
            startTimePercentage = -1;
          } // Ensuring false value for time to set
          _this.play(startTimePercentage); // Call player play method (not actually play after that line)
          resolve(); // Resolve promise
        };
        // Stop any previous playback before updating player
        if (_this._isPlaying) {
          _this.stop();
        }
        // Set new track url and set playback rate according to internal value
        _this._player.src = url;
        _this._player.playbackRate = _this._playbackRate;
        // Start loading in event      
        var loadingEventId = -1;
        var loadedListener = function loadedListener() {
          Evts.removeEvent(loadingEventId);
          Evts.publish('TrackLoaded');
          startPlayback();
        };
        loadingEventId = Evts.addEvent('loadedmetadata', _this._player, loadedListener, _this);
      });
    }

    /**
     * @method
     * @name repeatTrack
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description restart immediately the current track in the player
     **/
  }, {
    key: "repeatTrack",
    value: function repeatTrack() {
      if (this._player.src) {
        // Apply only if src is defined
        this._player.currentTime = 0; // Reset current time
        this.play(); // Start playback
      }
    }

    /**
     * @method
     * @name _trackEnded
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Action to take when the current track reaches its end
     **/
  }, {
    key: "_trackEnded",
    value: function _trackEnded() {
      this._isPlaying = false; // Update playling state
      Evts.publish('TrackEnded');
    }

    //  ------------------------------------------------------------------------------------------------//
    //  --------------------------------------  VOLUME METHODS  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name mute
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Set player effective volume to zero
     **/
  }, {
    key: "mute",
    value: function mute() {
      if (!this._isMuted) {
        // Avoid multi call
        this._isMuted = true; // Set mute state to true
        this._player.volume = 0; // Mute audio player
      }
    }

    /**
     * @method
     * @name unmute
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Restore player volume to previous its value
     **/
  }, {
    key: "unmute",
    value: function unmute() {
      if (this._isMuted) {
        // Avoid multi call
        var volume = 0.5; // Prevent old volume value was zero, we need to restore at half, to avoid unmuting to volume = 0

        if (this._volume !== 0) {
          // Old volume != 0
          volume = this._volume; // We restore the previous volume otherwise
        }

        this._isMuted = false; // Set mute state to false
        this.volume = volume; // Restore old volume value
      }
    }

    /**
     * @method
     * @name toggleMute
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Toggle the mute status of the player
     **/
  }, {
    key: "toggleMute",
    value: function toggleMute() {
      if (!this._isMuted) {
        this.mute();
      } else {
        this.unmute();
      }
    }

    /**
     * @method
     * @name adjustVolume
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Add/Substract the amount to the current volume
     * @param {number} amount - Volume to add/substract in range [0, 1]
     **/
  }, {
    key: "adjustVolume",
    value: function adjustVolume(amount) {
      this._setVolume(this._volume + amount); // Inner call
    }

    /**
     * @method
     * @name _setVolume
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Set the player volume according to the given value.
     * @param {number} value - The volume value to set in range [0, 1]
     **/
  }, {
    key: "_setVolume",
    value: function _setVolume(value) {
      if (typeof value !== 'number') {
        // Bad format for value
        Logger.raise({
          code: 'INVALID_VOLUME',
          frontend: true
        });
        return;
      }
      if (value <= 0) {
        // Bound lower value
        this.mute();
        this._volume = 0;
        return;
      }
      if (value > 1) {
        // Bound upper value
        value = 1;
      }
      if (this._isMuted) {
        // Restore mute state if needed
        this.unmute(); // Un mute playback
        this.volume = value; // Call again setVolume with previous value
        return;
      }
      this._player.volume = Utils.precisionRound(value, 2); // Assign new volume value (truncated with 2 decimals)
      this._volume = this._player.volume; // Store old volume value
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -------------------------------------  PROGRESS METHODS  -------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name adjustProgress
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Add/Substract the amount (percentage) to the current progress (percentage)
     * @param {number} amount - Percentage value to adjust progress in range [0, 100]
     **/
  }, {
    key: "adjustProgress",
    value: function adjustProgress(amount) {
      this._setProgress(this._getProgress() + amount); // Inner call with current progression
    }

    /**
     * @method
     * @name _getProgress
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Compute and returns the current track progression in the player
     * @returns {number} The track progression in completion percentage in range [0, 100]
     **/
  }, {
    key: "_getProgress",
    value: function _getProgress() {
      return Utils.precisionRound(this._player.currentTime * 100 / this._player.duration, 3) || 0; // Compute percentage from current time
    }

    /**
     * @method
     * @name _setProgress
     * @private
     * @memberof Player
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Set progression percentage on current track
     * @param {number} percentage - The progression percentage in range [0, 100]
     **/
  }, {
    key: "_setProgress",
    value: function _setProgress(percentage) {
      if (typeof percentage !== 'number') {
        // Bad format for value
        Logger.raise({
          code: 'INVALID_PROGRESS',
          frontend: true
        });
        return;
      }
      if (percentage <= 0) {
        // Bound lower value
        percentage = 0;
      }
      if (percentage > 100) {
        // Bound upper value
        this._trackEnded();
        return;
      }
      if (!isNaN(percentage * this._player.duration / 100)) {
        this._player.currentTime = percentage * this._player.duration / 100; // Apply percentage to total duration
      } else {
        this._player.currentTime = 0;
      }
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(percentage) {
      var _this2 = this;
      var _setPlaybackRate = function _setPlaybackRate(value) {
        _this2._playbackRate = value;
        _this2._player.playbackRate = value;
      };
      return new Promise(function (resolve) {
        percentage *= 100;
        if (percentage === 0) {
          _setPlaybackRate(0.5);
        } else if (percentage > 0 && percentage < 50) {
          /* Result := ((Input - InputLow) / (InputHigh - InputLow)) * (OutputHigh - OutputLow) + OutputLow */
          var formattedPercentage = percentage * 2; // Format [0, 50] to [0, 100]
          var value = formattedPercentage / 100 * (1 - 0.5) + 0.5;
          _setPlaybackRate(value);
        } else if (percentage === 50) {
          _setPlaybackRate(1);
        } else if (percentage > 50 && percentage < 100) {
          /* Result := ((Input - InputLow) / (InputHigh - InputLow)) * (OutputHigh - OutputLow) + OutputLow */
          var _formattedPercentage = percentage * 2 - 100; // Format [0, 50] to [0, 100]
          var _value = _formattedPercentage / 100 + 1;
          _setPlaybackRate(_value);
        } else if (percentage === 100) {
          _setPlaybackRate(2);
        }
        resolve(percentage / 100);
      });
    }

    //  ------------------------------------------------------------------------------------------------//
    //  --------------------------------------  SOURCE METHODS  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name getSource
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since October 2018
     * @description Returns the player current source url if existing, otherwise returns None
     * @returns {string} - The player current source url
     **/
  }, {
    key: "getSource",
    value: function getSource() {
      if (this._player.src !== null) {
        return this._player.src;
      } else {
        return 'None';
      }
    }

    /**
     * @method
     * @name hasSource
     * @public
     * @memberof Player
     * @author Arthur Beaulieu
     * @since October 2018
     * @description Check if player has a loaded track
     * @returns {boolean} - The presence of a source in player state
     **/
  }, {
    key: "hasSource",
    value: function hasSource() {
      return !!this._player.src;
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -------------------------------------  GETTER / SETTER  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /** @public
     * @member {number} - The HTMl audio player */
  }, {
    key: "player",
    get: function get() {
      return this._player;
    }

    /** @public
     * @member {boolean} - The player's playing state public accessor */
  }, {
    key: "playing",
    get: function get() {
      return this._isPlaying;
    }

    /** @public
     * @member {boolean} - The player's muted state public accessor */
  }, {
    key: "muted",
    get: function get() {
      return this._isMuted;
    }

    /** @public
     * @member {number} - The player's volume value in range float[0, 1] */
  }, {
    key: "volume",
    get: function get() {
      return this._volume;
    }

    /** @public
     * @member {number} - The player's progress percentage in range int[0, 100] */,
    set:
    /** @public
     * @member {number} - The player's volume value in range float[0, 1] */
    function set(value) {
      this._setVolume(value);
    }
  }, {
    key: "progress",
    get: function get() {
      return this._getProgress();
    }

    /** @public
     * @member {number} - The current loaded track's float duration */,
    set:
    /** @public
     * @member {number} - The player's progress percentage in range int[0, 100] */
    function set(percentage) {
      this._setProgress(percentage);
    }
  }, {
    key: "duration",
    get: function get() {
      return this._player.duration;
    }

    /** @public
     * @member {number} - The player's playback rate */
  }, {
    key: "playbackRate",
    get: function get() {
      return this._playbackRate;
    }
  }]);
  return Player;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Player);

/***/ }),

/***/ "./front/js/utils/CustomEvents.js":
/*!****************************************!*\
  !*** ./front/js/utils/CustomEvents.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var CustomEvents = /*#__PURE__*/function () {
  /** @summary <h1>JavaScript regular and custom events abstraction</h1>
   * @author Arthur Beaulieu
   * @since June 2020
   * @description <blockquote>The CustomEvents class provides an abstraction of JavaScript event listener, to allow
   * easy binding and removing those events. It also provides an interface to register custom events. This class is
   * meant to be used on all scopes you need ; module or global. Refer to each public method for detailed features.
   * For source code, please go to <a href="https://github.com/ArthurBeaulieu/CustomEvents.js" alt="custom-events-js">
   * https://github.com/ArthurBeaulieu/CustomEvents.js</a></blockquote>
   * @param {boolean} [debug=false] - Debug flag ; when true, logs will be output in JavaScript console at each event */
  function CustomEvents() {
    var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    _classCallCheck(this, CustomEvents);
    // Prevent wrong type for debug
    if (typeof debug !== 'boolean') {
      debug = false;
    }
    /** @private
     * @member {boolean} - Internal logging flag from constructor options, allow to output each event action */
    this._debug = debug;
    /** @private
     * @member {number} - Start the ID incrementer at pseudo random value, used for both regular and custom events */
    this._idIncrementor = Math.floor(Math.random() * Math.floor(256)) * 5678;
    /** @private
     * @member {any[]} - We store classical event listeners in array of objects containing all their information */
    this._regularEvents = [];
    /** @private
     * @member {object} - We store custom events by name as key, each key stores an Array of subscribed events */
    this._customEvents = {};
    /** @public
     * @member {string} - Component version */
    this.version = '1.1.0';
  }

  /** @method
   * @name destroy
   * @public
   * @memberof CustomEvents
   * @description <blockquote>CustomEvents destructor. Will remove all event listeners and keys in instance.</blockquote> */
  _createClass(CustomEvents, [{
    key: "destroy",
    value: function destroy() {
      var _this = this;
      // Debug logging
      this._raise('log', 'CustomEvents.destroy');
      // Remove all existing eventListener
      this.removeAllEvents();
      // Delete object attributes
      Object.keys(this).forEach(function (key) {
        delete _this[key];
      });
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------  CLASSIC JS EVENTS OVERRIDE  ------------------------------------------  */
    /*                                                                                                                  */
    /*  The following methods are made to abstract the event listeners from the JavaScript layer, so you can easily     */
    /*  remove them when done using, without bothering with binding usual business for them. 'addEvent/removeEvent'     */
    /*  method replace the initial ones. 'removeAllEvents' clears all instance event listeners ; nice for destroy       */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name addEvent
     * @public
     * @memberof CustomEvents
     * @description <blockquote><code>addEvent</code> method abstracts the <code>addEventListener</code> method to easily
     * remove it when needed, also to set a custom scope on callback.</blockquote>
     * @param {string} eventName - The event name to fire (mousemove, click, context etc.)
     * @param {object} element - The DOM element to attach the listener to
     * @param {function} callback - The callback function to execute when event is realised
     * @param {object} [scope=element] - The event scope to apply to the callback (optional, default to DOM element)
     * @param {object|boolean} [options=false] - The event options (useCapture and else)
     * @returns {number|boolean} - The event ID to use to manually remove an event, false if arguments are invalid */
  }, {
    key: "addEvent",
    value: function addEvent(eventName, element, callback) {
      var _this2 = this;
      var scope = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element;
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      // Debug logging
      this._raise('log', "CustomEvents.addEvent: ".concat(eventName), element, scope, options, callback);
      // Missing mandatory arguments
      if (eventName === null || eventName === undefined || element === null || element === undefined || callback === null || callback === undefined) {
        this._raise('error', 'CustomEvents.addEvent: Missing mandatory arguments');
        return false;
      }
      // Prevent wrong type for arguments (mandatory and optional)
      var err = function err() {
        _this2._raise('error', 'CustomEvents.addEvent: Wrong type for argument');
      };
      // Test argument validity for further process
      if (typeof eventName !== 'string' || _typeof(element) !== 'object' || typeof callback !== 'function') {
        err();
        return false;
      }
      if (scope !== null && scope !== undefined && _typeof(scope) !== 'object') {
        err();
        return false;
      }
      if (options !== null && options !== undefined && _typeof(options) !== 'object' && typeof options !== 'boolean') {
        err();
        return false;
      }
      // Save scope to callback function, default scope is DOM target object
      callback = callback.bind(scope);
      // Add event to internal array and keep all its data
      this._regularEvents.push({
        id: this._idIncrementor,
        element: element,
        eventName: eventName,
        scope: scope,
        callback: callback,
        options: options
      });
      // Add event listener with options
      element.addEventListener(eventName, callback, options);
      // Post increment to return the true event entry id, then update the incrementer
      return this._idIncrementor++;
    }

    /** @method
     * @name removeEvent
     * @public
     * @memberof CustomEvents
     * @description <blockquote><code>removeEvent</code> method abstracts the <code>removeEventListener</code> method to
     * really remove event listeners.</blockquote>
     * @param {number} eventId - The event ID to remove listener from. Returned when addEvent is called
     * @returns {boolean} - The method status ; true for success, false for non-existing event */
  }, {
    key: "removeEvent",
    value: function removeEvent(eventId) {
      // Debug logging
      this._raise('log', "Events.removeEvent: ".concat(eventId));
      // Missing mandatory arguments
      if (eventId === null || eventId === undefined) {
        this._raise('error', 'CustomEvents.removeEvent: Missing mandatory arguments');
        return false;
      }
      // Prevent wrong type for arguments (mandatory)
      if (typeof eventId !== 'number') {
        this._raise('error', 'CustomEvents.removeEvent: Wrong type for argument');
        return false;
      }
      // Returned value
      var statusCode = false; // Not found status code by default (false)
      // Iterate over saved listeners, reverse order for proper splicing
      for (var i = this._regularEvents.length - 1; i >= 0; --i) {
        // If an event ID match in saved ones, we remove it and update saved listeners
        if (this._regularEvents[i].id === eventId) {
          // Update status code
          statusCode = true; // Found and removed event listener status code (true)
          this._clearRegularEvent(i);
        }
      }
      // Return with status code
      return statusCode;
    }

    /** @method
     * @name removeAllEvents
     * @public
     * @memberof CustomEvents
     * @description <blockquote>Clear all event listener registered through this class object.</blockquote>
     * @returns {boolean} - The method status ; true for success, false for not removed any event */
  }, {
    key: "removeAllEvents",
    value: function removeAllEvents() {
      // Debug logging
      this._raise('log', 'CustomEvents.removeAllEvents');
      // Returned value
      var statusCode = false; // Didn't removed any status code by default (false)
      // Flag to know if there was any previously stored event listeners
      var hadEvents = this._regularEvents.length > 0;
      // Iterate over saved listeners, reverse order for proper splicing
      for (var i = this._regularEvents.length - 1; i >= 0; --i) {
        this._clearRegularEvent(i);
      }
      // If all events where removed, update statusCode to success
      if (this._regularEvents.length === 0 && hadEvents) {
        // Update status code
        statusCode = true; // Found and removed all events listener status code (true)
      }
      // Return with status code
      return statusCode;
    }

    /** @method
     * @name _clearRegularEvent
     * @private
     * @memberof CustomEvents
     * @description <blockquote><code>_clearRegularEvent</code> method remove the saved event listener for a
     * given index in regularEvents array range.</blockquote>
     * @param {number} index - The regular event index to remove from class attributes
     * @return {boolean} - The method status ; true for success, false for not cleared any event */
  }, {
    key: "_clearRegularEvent",
    value: function _clearRegularEvent(index) {
      // Debug logging
      this._raise('log', "CustomEvents._clearRegularEvent: ".concat(index));
      // Missing mandatory arguments
      if (index === null || index === undefined) {
        this._raise('error', 'CustomEvents._clearRegularEvent: Missing mandatory argument');
        return false;
      }
      // Prevent wrong type for arguments (mandatory)
      if (typeof index !== 'number') {
        this._raise('error', 'CustomEvents._clearRegularEvent: Wrong type for argument');
        return false;
      }
      // Check if index match an existing event in attributes
      if (this._regularEvents[index]) {
        // Remove its event listener and update regularEvents array
        var evt = this._regularEvents[index];
        evt.element.removeEventListener(evt.eventName, evt.callback, evt.options);
        this._regularEvents.splice(index, 1);
        return true;
      }
      return false;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -------------------------------------------  CUSTOM JS EVENTS  -----------------------------------------------  */
    /*                                                                                                                  */
    /*  The three following methods (subscribe, unsubscribe, publish) are designed to reference an event by its name    */
    /*  and handle as many subscriptions as you want. When subscribing, you get an ID you can use to unsubscribe your   */
    /*  event later. Just publish with the event name to callback all its registered subscriptions.                     */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name subscribe
     * @public
     * @memberof CustomEvents
     * @description <blockquote>Subscribe method allow you to listen to an event and react when it occurs.</blockquote>
     * @param {string} eventName - Event name (the one to use to publish)
     * @param {function} callback - The callback to execute when event is published
     * @param {boolean} [oneShot=false] - One shot : to remove subscription the first time callback is fired
     * @returns {number|boolean} - The event id, to be used when manually unsubscribing */
  }, {
    key: "subscribe",
    value: function subscribe(eventName, callback) {
      var _this3 = this;
      var oneShot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // Debug logging
      this._raise('log', "CustomEvents.subscribe: ".concat(eventName, " ").concat(callback, " ").concat(oneShot));
      // Missing mandatory arguments
      if (eventName === null || eventName === undefined || callback === null || callback === undefined) {
        this._raise('error', 'CustomEvents.subscribe', 'Missing mandatory arguments');
        return false;
      }
      // Prevent wrong type for arguments (mandatory and optional)
      var err = function err() {
        _this3._raise('error', 'CustomEvents.subscribe: Wrong type for argument');
      };
      if (typeof eventName !== 'string' || typeof callback !== 'function') {
        err();
        return false;
      }
      if (oneShot !== null && oneShot !== undefined && typeof oneShot !== 'boolean') {
        err();
        return false;
      }
      // Create event entry if not already existing in the registered events
      if (!this._customEvents[eventName]) {
        this._customEvents[eventName] = []; // Set empty array for new event subscriptions
      }
      // Push new subscription for event name
      this._customEvents[eventName].push({
        id: this._idIncrementor,
        name: eventName,
        os: oneShot,
        callback: callback
      });
      // Post increment to return the true event entry id, then update the incrementer
      return this._idIncrementor++;
    }

    /** @method
     * @name unsubscribe
     * @public
     * @memberof CustomEvents
     * @description <blockquote>Unsubscribe method allow you to revoke an event subscription from its string name.</blockquote>
     * @param {number} eventId - The subscription id returned when subscribing to an event name
     * @returns {boolean} - The method status ; true for success, false for non-existing subscription **/
  }, {
    key: "unsubscribe",
    value: function unsubscribe(eventId) {
      // Debug logging
      this._raise('log', "CustomEvents.unsubscribe: ".concat(eventId));
      // Missing mandatory arguments
      if (eventId === null || eventId === undefined) {
        this._raise('error', 'CustomEvents.unsubscribe: Missing mandatory arguments');
        return false;
      }
      // Prevent wrong type for arguments (mandatory)
      if (typeof eventId !== 'number') {
        this._raise('error', 'CustomEvents.unsubscribe: Wrong type for argument');
        return false;
      }
      // Returned value
      var statusCode = false; // Not found status code by default (false)
      // Save event keys to iterate properly on this._events Object
      var keys = Object.keys(this._customEvents);
      // Reverse events iteration to properly splice without messing with iteration order
      for (var i = keys.length - 1; i >= 0; --i) {
        // Get event subscriptions
        var subs = this._customEvents[keys[i]];
        // Iterate over events subscriptions to find the one with given id
        for (var j = 0; j < subs.length; ++j) {
          // In case we got a subscription for this events
          if (subs[j].id === eventId) {
            // Debug logging
            this._raise('log', "CustomEvents.unsubscribe: subscription found\n", subs[j], "\nSubscription n\xB0".concat(eventId, " for ").concat(subs.name, " has been removed"));
            // Update status code
            statusCode = true; // Found and unsubscribed status code (true)
            // Remove subscription from event Array
            subs.splice(j, 1);
            // Remove event name if no remaining subscriptions
            if (subs.length === 0) {
              delete this._customEvents[keys[i]];
            }
            // Break since id are unique and no other subscription can be found after
            break;
          }
        }
      }
      // Return with status code
      return statusCode;
    }

    /** @method
     * @name unsubscribeAllFor
     * @public
     * @memberof CustomEvents
     * @description <blockquote><code>unsubscribeAllFor</code> method clear all subscriptions registered for given event name.</blockquote>
     * @param {string} eventName - The event to clear subscription from
     * @returns {boolean} - The method status ; true for success, false for non-existing event **/
  }, {
    key: "unsubscribeAllFor",
    value: function unsubscribeAllFor(eventName) {
      // Debug logging
      this._raise('log', "CustomEvents.unsubscribeAllFor: ".concat(eventName));
      // Missing mandatory arguments
      if (eventName === null || eventName === undefined) {
        this._raise('error', 'CustomEvents.unsubscribeAllFor: Missing mandatory arguments');
        return false;
      }
      // Prevent wrong type for arguments (mandatory and optional)
      if (typeof eventName !== 'string') {
        this._raise('error', 'CustomEvents.unsubscribeAllFor: Wrong type for argument');
        return false;
      }
      // Returned value
      var statusCode = false; // Not found status code by default (false)
      // Save event keys to iterate properly on this._events Object
      var keys = Object.keys(this._customEvents);
      // Iterate through custom event keys to find matching event to remove
      for (var i = 0; i < keys.length; ++i) {
        if (keys[i] === eventName) {
          // Get event subscriptions
          var subs = this._customEvents[keys[i]];
          // Iterate over events subscriptions to find the one with given id, reverse iteration to properly splice without messing with iteration order
          for (var j = subs.length - 1; j >= 0; --j) {
            // Update status code
            statusCode = true; // Found and unsubscribed all status code (true)
            // Remove subscription from event Array
            subs.splice(j, 1);
            // Remove event name if no remaining subscriptions
            if (subs.length === 0) {
              delete this._customEvents[keys[i]];
            }
          }
        }
      }
      // Return with status code
      return statusCode;
    }

    /** @method
     * @name publish
     * @public
     * @memberof CustomEvents
     * @description <blockquote><code>Publish</code> method allow you to fire an event by name and trigger all its subscription by callbacks./blockquote>
     * @param {string} eventName - Event name (the one to use to publish)
     * @param {object} [data=undefined] - The data object to sent through the custom event
     * @returns {boolean} - The method status ; true for success, false for non-existing event **/
  }, {
    key: "publish",
    value: function publish(eventName) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      // Debug logging
      this._raise('log', "CustomEvents.publish: ".concat(eventName), data);
      // Missing mandatory arguments
      if (eventName === null || eventName === undefined) {
        this._raise('error', 'CustomEvents.publish: Missing mandatory arguments');
        return false;
      }
      // Prevent wrong type for arguments (mandatory and optional)
      if (typeof eventName !== 'string' || data !== undefined && _typeof(data) !== 'object') {
        this._raise('error', 'CustomEvents.publish: Wrong type for argument');
        return false;
      }
      // Returned value
      var statusCode = false; // Not found status code by default (false)
      // Save event keys to iterate properly on this._events Object
      var keys = Object.keys(this._customEvents);
      // Iterate over saved custom events
      for (var i = 0; i < keys.length; ++i) {
        // If published name match an existing events, we iterate its subscriptions. First subscribed, first served
        if (keys[i] === eventName) {
          // Update status code
          statusCode = true; // Found and published status code (true)
          // Get event subscriptions
          var subs = this._customEvents[keys[i]];
          // Iterate over events subscriptions to find the one with given id
          // Reverse subscriptions iteration to properly splice without messing with iteration order
          for (var j = subs.length - 1; j >= 0; --j) {
            // Debug logging
            this._raise('log', "CustomEvents.publish: fire callback for ".concat(eventName, ", subscription n\xB0").concat(subs[j].id), subs[j]);
            // Fire saved callback
            subs[j].callback(data);
            // Remove oneShot listener from event entry
            if (subs[j].os) {
              // Debug logging
              this._raise('log', 'CustomEvents.publish: remove subscription because one shot usage is done');
              subs.splice(j, 1);
              // Remove event name if no remaining subscriptions
              if (subs.length === 0) {
                delete this._customEvents[keys[i]];
              }
            }
          }
        }
      }
      // Return with status code
      return statusCode;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------------  COMPONENT UTILS  -----------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _raise
     * @private
     * @memberof CustomEvents
     * @description <blockquote>Internal method to abstract console wrapped in debug flag./blockquote>
     * @param {string} level - The console method to call
     * @param {string} errorValue - The error value to display in console method **/
  }, {
    key: "_raise",
    value: function _raise(level, errorValue) {
      if (this._debug) {
        console[level](errorValue);
      }
    }
  }]);
  return CustomEvents;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomEvents);

/***/ }),

/***/ "./front/js/utils/DragElement.js":
/*!***************************************!*\
  !*** ./front/js/utils/DragElement.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var DragElement = /*#__PURE__*/function () {
  /** @summary <h1>Make any DOM element draggable</h1>
   * @author Arthur Beaulieu
   * @since December 2020
   * @description <blockquote>This class will make any DOM element draggable, and attach specific data on it that can be
   * used on drop (see DropElement class). It handle both the desktop and the mobile behavior. It must be used with a
   * DropElement class for perfect compatibility!</blockquote>
   * @param {object} options - The element to drag options
   * @param {object} options.target - The element to make draggable
   * @param {string} options.data - The data to attach to the drag event, that will be retrieved on drop **/
  function DragElement(options) {
    _classCallCheck(this, DragElement);
    /** @private
     * @member {object} - The element to make draggable */
    this._target = options.target;
    /** @private
     * @member {object} - The data to attached */
    this._data = options.data;
    /** @private
     * @member {number[]} - The event IDs for all mobile and desktop dragging events */
    this._evtIds = [];
    /** @private
     * @member {boolean} - A flag to know if dragging is occurring in mobile */
    this._touchStarted = false;
    /** @private
     * @member {object} - The target DOM copy for a proper drag animation in mobile */
    this._touchPhantomDom = null;
    // Build DOM elements and subscribe to drag events
    this._buildElements();
    this._events();
  }

  /** @method
   * @name destroy
   * @public
   * @memberof DragElement
   * @author Arthur Beaulieu
   * @since December 2020
   * @description <blockquote>This method will unsubscribe all drag events and remove all properties.</blockquote> **/
  _createClass(DragElement, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ---------------------------------  DRAGELEMENT INSTANTIATION SEQUENCE  ---------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _buildElements
     * @private
     * @memberof DragElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will make the target element draggable adding the proper attribute. It will
     * also create a copy of the draggable DOM element and set its style with a fixed position and half its opacity to
     * emulate the desktop drag animation in mobile.</blockquote> **/
  }, {
    key: "_buildElements",
    value: function _buildElements() {
      this._touchPhantomDom = this._target.cloneNode(true);
      this._touchPhantomDom.style.position = 'fixed';
      this._touchPhantomDom.style.opacity = '.5';
      this._target.setAttribute('draggable', 'true');
    }

    /** @method
     * @name _events
     * @private
     * @memberof DragElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will subscribe to drag events, both for desktop and mobile.</blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('dragstart', this._target, this._dragStart, this));
      this._evtIds.push(Evts.addEvent('touchstart', this._target, this._dragStart, this));
      this._evtIds.push(Evts.addEvent('touchmove', this._target, this._dragTouchMove, this));
      this._evtIds.push(Evts.addEvent('touchend', this._target, this._dragTouchEnd, this));
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------  MOBILE AND DESKTOP DRAG EVENTS METHODS  --------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _dragStart
     * @private
     * @memberof DragElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the desktop drag start event by attaching the data into the event.
     * On mobile, it will compute the target current position to update the phantom DOM element position. It then attach
     * the initial touch position and finally attach the phantom DOM element next to the target element.</blockquote>
     * @param {object} event - The mouse or touch event **/
  }, {
    key: "_dragStart",
    value: function _dragStart(event) {
      if (event.dataTransfer) {
        // Desktop behavior
        event.dataTransfer.setData('text/plain', JSON.stringify(this._data));
      } else {
        // Mobile behavior
        this._touchStarted = true;
        // Define style for phantom DIV according to the dragged item style values
        var rect = this._target.getBoundingClientRect();
        var style = window.getComputedStyle(this._target); // Get margin, as they make the position calculus wrong
        var leftMargin = parseInt(style.marginLeft.replace('px', ''));
        var topMargin = parseInt(style.marginTop.replace('px', ''));
        this._touchPhantomDom.style.top = "".concat(rect.top - topMargin, "px");
        this._touchPhantomDom.style.left = "".concat(rect.left - leftMargin, "px");
        this._touchPhantomDom.style.height = "".concat(rect.height, "px");
        this._touchPhantomDom.style.width = "".concat(rect.width, "px");
        // We need to keep track of the initial touch position to properly make the div move under the finger
        this._touchPhantomDom.dataset.startX = event.targetTouches[0].pageX - rect.left + leftMargin;
        this._touchPhantomDom.dataset.startY = event.targetTouches[0].pageY - rect.top + topMargin;
        // Append to DOM parent to have the exact same style without manually copying all the applied rules
        this._target.parentNode.appendChild(this._touchPhantomDom);
      }
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------------------  MOBILE DRAG METHODS  ----------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _dragTouchMove
     * @private
     * @memberof DragElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>On mobile, the dragging must be fully re-implemented as it is not standard. If any drag
     * start event was previously published, the phantom DOM element is moved according to the initial touch position,
     * relative to the event touch position.</blockquote>
     * @param {object} event - The touch event **/
  }, {
    key: "_dragTouchMove",
    value: function _dragTouchMove(event) {
      if (this._touchStarted === true) {
        this._touchPhantomDom.style.top = "".concat(event.targetTouches[0].pageY - this._touchPhantomDom.dataset.startY, "px");
        this._touchPhantomDom.style.left = "".concat(event.targetTouches[0].pageX - this._touchPhantomDom.dataset.startX, "px");
        // Attach a touch dragging flag to the event, so the DropElement class can know that a dragging event is occurring
        event.touchDragging = true;
      }
    }

    /** @method
     * @name _dragTouchEnd
     * @private
     * @memberof DragElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>On mobile, the dragging must be fully re-implemented as it is not standard. When the user
     * release its finger, we need to remove the phantom DOM element from the tree. The drag event data is attached as a
     * string to the event so it can be retrieved in the DropElement class.</blockquote>
     * @param {object} event - The touch event **/
  }, {
    key: "_dragTouchEnd",
    value: function _dragTouchEnd(event) {
      var _this = this;
      this._touchStarted = false;
      this._target.parentNode.removeChild(this._touchPhantomDom);
      // Emulated dataTransfer into the event, we must attach at each touchmove so it can be retrieved in DropElement
      event.dataTransfer = {
        getData: function getData(type) {
          if (type === 'text/plain') {
            return JSON.stringify(_this._data);
          }
          return null;
        }
      };
    }
  }]);
  return DragElement;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DragElement);

/***/ }),

/***/ "./front/js/utils/DropElement.js":
/*!***************************************!*\
  !*** ./front/js/utils/DropElement.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var DropElement = /*#__PURE__*/function () {
  /** @summary <h1>Make any DOM element drop friendly</h1>
   * @author Arthur Beaulieu
   * @since December 2020
   * @description <blockquote>This class will make any DOM element able to receive drop event. It propose an overlay
   * when the target is hovered with a draggable element. It handle both the desktop and the mobile behavior. It must be
   * used with a DragElement class for perfect compatibility!</blockquote>
   * @param {object} options - The element to drop options
   * @param {object} options.target - The element to allow dropping in
   * @param {function} options.onDrop - The method to call for each drop event **/
  function DropElement(options) {
    _classCallCheck(this, DropElement);
    /** @private
     * @member {object} - The element to make allow dropping in */
    this._target = options.target; // Get given target from the DOM
    /** @private
     * @member {function} - The callback function to call on each drop event */
    this._onDropCB = options.onDrop;
    /** @private
     * @member {number[]} - The event IDs for all mobile and desktop dropping events */
    this._evtIds = [];
    /** @private
     * @member {number} - This counter helps to avoid enter/leave events to overlap when target has children */
    this._movementCounter = 0;
    /** @private
     * @member {string} - The transparent border that must be added to avoid weird target resize on hover */
    this._transparentBorder = '';
    // Build DOM elements and subscribe to drag events
    this._buildElements();
    this._events();
  }

  /** @method
   * @name destroy
   * @public
   * @memberof DropElement
   * @author Arthur Beaulieu
   * @since December 2020
   * @description <blockquote>This method will unsubscribe all drop events and remove all properties.</blockquote> **/
  _createClass(DropElement, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ---------------------------------  DROPELEMENT INSTANTIATION SEQUENCE  ---------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _buildElements
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will define the transparent border style and append this virtual border to the
     * target DOM element.</blockquote> **/
  }, {
    key: "_buildElements",
    value: function _buildElements() {
      this._transparentBorder = 'dashed 3px transparent';
      this._target.style.border = this._transparentBorder;
    }

    /** @method
     * @name _events
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will subscribe to drop events, both for desktop and mobile.</blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('dragenter', this._target, this._dragEnter, this));
      this._evtIds.push(Evts.addEvent('dragover', this._target, this._dragOver, this));
      this._evtIds.push(Evts.addEvent('dragleave', this._target, this._dragLeave, this));
      this._evtIds.push(Evts.addEvent('drop', this._target, this._drop, this));
      this._evtIds.push(Evts.addEvent('touchmove', document.body, this._dragTouchOver, this));
      this._evtIds.push(Evts.addEvent('touchend', document.body, this._dragTouchEnd, this));
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------------  DESKTOP DROP EVENTS METHODS  --------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _dragEnter
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the entering of a dragged div over the target DOM element. When
     * the target DOM element is hovered, a dashed border is made visible, replacing the transparent one to notify the
     * user that the dragged div can be dropped.</blockquote>
     * @param {object} event - The mouse event **/
  }, {
    key: "_dragEnter",
    value: function _dragEnter(event) {
      this._eventBehavior(event);
      ++this._movementCounter;
      this._target.style.border = 'dashed 3px rgb(255, 100, 100)';
    }

    /** @method
     * @name _dragOver
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the dragged div hovering the target DOM element.</blockquote>
     * @param {object} event - The mouse event **/
  }, {
    key: "_dragOver",
    value: function _dragOver(event) {
      this._eventBehavior(event);
      event.dataTransfer.dropEffect = 'copy';
    }

    /** @method
     * @name _dragLeave
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the event that is fired when the hovered div leaves the target
     * DOM element. It require the movement counter to be equal to zero to restore the transparent border of the target
     * DOM element.</blockquote>
     * @param {object} event - The mouse event **/
  }, {
    key: "_dragLeave",
    value: function _dragLeave(event) {
      this._eventBehavior(event);
      --this._movementCounter;
      if (this._movementCounter === 0) {
        this._target.style.border = this._transparentBorder;
      }
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MOBILE DROP EVENTS METHODS  --------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _dragTouchOver
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the hovering of a dragged div over the target DOM element. The
     * touch dragging flag is attached to the event in the DropElement class, so we can ensure to only trigger the
     * dragging over event logic when the event is coming after a drag touch has occurred in DropElement.</blockquote>
     * @param {object} event - The touch event **/
  }, {
    key: "_dragTouchOver",
    value: function _dragTouchOver(event) {
      if (event.touchDragging) {
        // This flag has been set in DragElement class to know if a touch drag is occurring
        if (this._isTouchEventInTarget(event.targetTouches[0])) {
          // Mobile equivalent to dragenter
          this._target.style.border = 'dashed 3px rgb(255, 100, 100)';
        } else {
          // Same for dragleave
          this._target.style.border = this._transparentBorder;
        }
      }
    }

    /** @method
     * @name _dragTouchEnd
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the pre-drop event for mobile devices. The dataTransfer is
     * attached to the event by DragElement class, to recognize a touch ended event that is linked with a dragging in
     * progress. The touch position is then tested to fired the drop method if the touch end occurred on the target DOM
     * element.</blockquote>
     * @param {object} event - The touch event **/
  }, {
    key: "_dragTouchEnd",
    value: function _dragTouchEnd(event) {
      // Touch event has an emulated dataTransfer element, see DragElement. touched position is held in changedTouches
      if (event.dataTransfer && this._isTouchEventInTarget(event.changedTouches[0])) {
        this._drop(event);
      }
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------  MOBILE AND DESKTOP DROP EVENTS METHODS  --------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _drop
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will handle the dropping of a DragElement, to properly read the data it holds
     * and send it to the drop callback provided in constructor.</blockquote>
     * @param {object} event - The mouse or touch event **/
  }, {
    key: "_drop",
    value: function _drop(event) {
      this._eventBehavior(event);
      this._target.style.border = this._transparentBorder;
      this._onDropCB(JSON.parse(event.dataTransfer.getData('text/plain')));
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -------------------------------------------  UTILS METHODS  --------------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _eventBehavior
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will prevent the default behavior of given event, and will stop its
     * propagation.</blockquote>
     * @param {object} event - The mouse or touch event **/
  }, {
    key: "_eventBehavior",
    value: function _eventBehavior(event) {
      event.preventDefault();
      event.stopPropagation();
    }

    /** @method
     * @name _isTouchEventInTarget
     * @private
     * @memberof DropElement
     * @author Arthur Beaulieu
     * @since December 2020
     * @description <blockquote>This method will compare a touch point to the target position and return true if the
     * touch point is inside the target DOM element.</blockquote>
     * @param {object} touchPosition - The touch event
     * @return {boolean} Do the touch point is included in the target DOM element **/
  }, {
    key: "_isTouchEventInTarget",
    value: function _isTouchEventInTarget(touchPosition) {
      var rect = this._target.getBoundingClientRect();
      var inAxisX = touchPosition.pageX >= rect.x && touchPosition.pageX <= rect.x + rect.width;
      var inAxisY = touchPosition.pageY >= rect.y && touchPosition.pageY <= rect.y + rect.height;
      return inAxisX && inAxisY;
    }
  }]);
  return DropElement;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DropElement);

/***/ }),

/***/ "./front/js/utils/Logger.js":
/*!**********************************!*\
  !*** ./front/js/utils/Logger.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Logger = /*#__PURE__*/function () {
  /** @summary <h1>JavaScript logger singleton to handle errors the same way</h1>
   * @author Arthur Beaulieu
   * @since June 2020
   * @description <blockquote>The Logger class provides a singleton object to allow brain dead logging for frontend
   * JavaScript code. Errors can be raised from JavaScript errors (<code>new Error()</code>), or using a custom error
   * format, with a severity, title and message. It is also possible to pass a notification manager object to handle
   * those error either in console and in UI. The recommended manager to use for notification can be found at
   * <a href="https://github.com/ArthurBeaulieu/Notification.js" alt="notification-js">Notification.js</a>. You can
   * otherwise implement you system, but it as to take a type (severity), a title and a message ; for further information,
   * refer to the <code>_logErrorToNotification</code> documentation. For source code, please go to
   * <a href="https://github.com/ArthurBeaulieu/Logger.js" alt="logger-js">Logger.js</a></blockquote>
   * @param {object} [options={}] - The Logger object, not mandatory but it is recommended to provide one for full features
   * @param {object} [options.errors={}] - The custom errors, JSON style, with key being the error name and value being
   * an object with a <code>severity</code>, a <code>title</code> and a <code>message</code> property (all strings)
   * @param {object} [options.notification=null] - The notification manager (to create new notifications when logging)
   * @param {boolean} [options.log=true] - Allow console logging (turn to false in prod environment)
   * @return {object} - The Logger singleton instance */
  function Logger() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Logger);
    // If an instance of Logger already exists, we just return it
    if (Logger.instance) {
      return Logger.instance;
    }
    // Set object instance
    Logger.instance = this;
    // Prevent wrong type for arguments, fallback according to attribute utility
    if (_typeof(options.errors) !== 'object') {
      options.errors = {}; // Needs to define to empty object to avoid errors when checking custom errors
    }

    if (_typeof(options.notification) !== 'object') {
      options.notification = null; // Null to ignore the notification step in error raising
    }

    if (typeof options.log !== 'boolean') {
      options.log = true; // No log means... useful component right?
    }
    /** @private
     * @member {object} - The error messages to use in Logger */
    this._errors = options.errors;
    /** @private
     * @member {object} - The custom notification handler, must be able to take type, title and message (at least) */
    this._notification = options.notification;
    /** @private
     * @member {boolean} - Internal logging flag from constructor options, allow to output each event action */
    this._log = options.log;
    /** @public
     * @member {string} - Component version */
    this.version = '1.1.0';
    return this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof Logger
   * @description <blockquote>Logger destructor. Will delete singleton instance and its properties.</blockquote> */
  _createClass(Logger, [{
    key: "destroy",
    value: function destroy() {
      var _this = this;
      // Delete object attributes
      Object.keys(this).forEach(function (key) {
        delete _this[key];
      });
      // Clear singleton instance
      Logger.instance = null;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ----------------------------------------  LOGGER JS INTERN METHODS  ------------------------------------------  */
    /*                                                                                                                  */
    /*  These internal methods will build a raised error depending on logging level sent when building this singleton.  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _buildErrorInfo
     * @private
     * @memberof Logger
     * @description <blockquote>This method will be the error properties according to its type. A custom error will
     * take values defined at construction of this singleton. JavaScrip error are parsed to extract title and
     * message properties from stack, with specific handling for Chrome and Firefox.</blockquote>
     * @param {object} error - The error to build info from. Can be a custom error or a standard JavaScript error
     * @return {object} - The error properties ; <code>severity</code>, <code>title</code> and <code>message</code> */
  }, {
    key: "_buildErrorInfo",
    value: function _buildErrorInfo(error) {
      var severity = '';
      var title = '';
      var message = '';
      if (_typeof(error) === 'object' || typeof error === 'string') {
        // this._errors doesn't contain the error key ; either a Js error or an unknown error
        if (this._errors[error] === undefined) {
          return this._buildJsError(error);
        } else {
          // Custom error that need to be filled with a severity, a title and a message
          severity = this._errors[error].severity || '';
          title = this._errors[error].title || '';
          message = this._errors[error].message || '';
        }
      }
      // Return error standard properties
      return {
        severity: severity,
        title: title,
        message: message
      };
    }

    /** @method
     * @name _buildJsError
     * @private
     * @memberof Logger
     * @description <blockquote>Auxiliary method for <code>_buildErrorInfo</code> to handle JavaScript errors</blockquote>
     * @param {object} error - The error to build info from. Must be a standard JavaScript error
     * @return {object} - The error properties ; <code>severity</code>, <code>title</code> and <code>message</code> */
  }, {
    key: "_buildJsError",
    value: function _buildJsError(error) {
      var severity = '';
      var title = '';
      var message = '';
      var filename = '';
      // JavaScript error created with new Error(), that need to contain fileName, message, line and column number
      if (error.fileName && error.message && error.lineNumber && error.columnNumber) {
        // Firefox specific
        filename = error.fileName.match(/\/([^\/]+)\/?$/)[1];
        severity = 'error';
        title = "JavaScript error";
        message = "".concat(error.message, " in file ").concat(filename, ":").concat(error.lineNumber, ":").concat(error.columnNumber);
      } else if (error.message && error.stack) {
        // Chrome specific
        filename = error.stack.split('\n')[error.stack.split('\n').length - 1].match(/\/([^\/]+)\/?$/)[1];
        severity = 'error';
        title = "JavaScript error";
        message = "".concat(error.message, " in file ").concat(filename);
      } else if (error.severity && error.title && error.message) {
        // User custom error
        severity = error.severity || '';
        title = error.title || '';
        message = error.message || '';
      } else {
        // Unknown error that do not require any arguments
        severity = 'error';
        title = "Unexpected error ".concat(error);
        message = 'The error object sent to Logger.raise() is neither a JavaScript error nor a custom error (with severity, title and message).';
      }
      return {
        severity: severity,
        title: title,
        message: message
      };
    }

    /** @method
     * @name _logErrorToNotification
     * @private
     * @memberof Logger
     * @description <blockquote>This method will call for a new notification if a component has been given to this singleton
     * constructor. The component must expose a <code>new()</code> methods that takes as arguments the Logger standard properties ;
     * <code>severity</code>, <code>title</code> and <code>message</code>. If no component has be provided, this method won't do anything.
     * One can find such component <a href="https://github.com/ArthurBeaulieu/Notification.js" alt="notification-js">here</a>.</blockquote>
     * @param {object} errorParameters - The error with Logger standard properties (<code>severity</code>, <code>title</code> and <code>message</code>) */
  }, {
    key: "_logErrorToNotification",
    value: function _logErrorToNotification(errorParameters) {
      if (this._notification && _typeof(errorParameters) === 'object') {
        this._notification["new"]({
          type: errorParameters.severity || 'error',
          title: errorParameters.title || 'Can\'t get error info',
          message: errorParameters.message || 'Call for new notification wasn\'t made with arguments'
        });
      }
    }

    /** @method
     * @name _logErrorToConsole
     * @private
     * @memberof Logger
     * @description <blockquote>This method will send error to console if logging has been allowed to this singleton constructor.
     * It takes a Logger standard error (<code>severity</code>, <code>title</code> and <code>message</code>) as argument.
     * It will build a unified output regardless the Chrome or Firefox browser. It enhance <code>console.log</code> and
     * <code>console.info</code> to also display the stack trace in a <code>console.group</code>.</blockquote>
     * @param {object} errorParameters - The error with Logger standard properties (<code>severity</code>, <code>title</code> and <code>message</code>) */
  }, {
    key: "_logErrorToConsole",
    value: function _logErrorToConsole(errorParameters) {
      if (this._log && _typeof(errorParameters) === 'object') {
        // Missing mandatory arguments
        if (!errorParameters.severity && !errorParameters.title && !errorParameters.message) {
          return;
        }
        /* Colors to use, extracted from Notification.js (https://github.com/ArthurBeaulieu/Notification.js) */
        var colors = {
          success: 'color: rgb(76, 175, 80);',
          info: 'color: rgb(3, 169, 244);',
          warning: 'color: rgb(255, 152, 0);',
          error: 'color: rgb(244, 67, 54);'
        };
        var browsers = {
          firefox: /firefox/i.test(navigator.userAgent),
          chrome: /chrome/i.test(navigator.userAgent) && window.chrome
        };
        // Compute log level from severity, and handle warn and log as warning and success
        var logLevel = errorParameters.severity;
        if (errorParameters.severity === 'warning') {
          logLevel = 'warn';
        } else if (errorParameters.severity === 'success') {
          logLevel = 'log';
        }
        // Create console group with associated style
        console.groupCollapsed("%c".concat(errorParameters.severity.toUpperCase(), ": ").concat(errorParameters.title), colors[errorParameters.severity]);
        // Apply type and severity to build console call
        var outputString = "%c".concat(errorParameters.message, "\n").concat(this._getCallerName(browsers));
        console[logLevel](outputString, colors[errorParameters.severity]);
        // Only append console trace if severity is not an error (as error already display trace)
        if (errorParameters.severity !== 'error' && errorParameters.severity !== 'warning') {
          console.trace();
        }
        // Close error group in console
        console.groupEnd();
      }
    }

    /** @method
     * @name _getCallerName
     * @private
     * @memberof Logger
     * @description <blockquote>This method will build the caller name as a string, formatted to be easy to
     * read and display in the log output.</blockquote>
     * @param {object} browsers - An object with booleans values for current browser used by session
     * @return {string} - The Logger standard caller name regardless the browser */
  }, {
    key: "_getCallerName",
    value: function _getCallerName(browsers) {
      // Original code from https://gist.github.com/irisli/716b6dacd3f151ce2b7e
      var caller = new Error().stack; // Create error and get its call stack
      // Get last called depending on browser
      if (_typeof(browsers) === 'object') {
        if (browsers.firefox) {
          caller = caller.split('\n')[3]; // Third item is error caller method
          caller = caller.replace(/@+/, ' '); // Change `@` to `(`
        } else if (browsers.chrome) {
          caller = caller.split('\n')[caller.split('\n').length - 2]; // Minus 2 to remove closing parenthesis as well
          // Remove Chrome specific strings to match Firefox look and feel (go ff)
          caller = caller.replace(/^Error\s+/, '');
          caller = caller.replace(/^\s+at./, '');
          caller = caller.replace(/[{()}]/g, '');
        } else {
          return 'Unsupported browser to get the caller name from';
        }
      } else {
        return 'Argument error, unable to get the caller name on this raise';
      }
      // Prepare function name, and replace with anonymous in proper case
      var functionName = caller;
      if (caller.startsWith(' ')) {
        // First char is normally the function name first char. Space means anonymous cross browsers (so far...)
        functionName = "<anonymous>".concat(caller);
      }
      // Unified returned value for anonymous/non anonymous methods
      return "Raised from function ".concat(functionName);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ----------------------------------------  LOGGER JS PUBLIC METHOD  -------------------------------------------  */
    /*                                                                                                                  */
    /*  These are the exposed method of Logger component. It allows to raise error that will be displayed in the        */
    /*  console if needed, and displayed in the interface using a notification component. Otherwise, it won't do        */
    /*  anything.                                                                                                       */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name raise
     * @public
     * @memberof Logger
     * @description <blockquote>The raise method will build, according to argument sent to this singleton constructor,
     * a console output and/or a notification for the given error. The input error can be a standard JavaScript error,
     * raised like <code>new Error()</code>, but can also be build using the custom format, using the key of the error
     * as input string. See constructor and example for demonstration.</blockquote>
     * @param {object} error - The error to handle. Can be a custom error or a standard JavaScript error */
  }, {
    key: "raise",
    value: function raise(error) {
      // Create error specific values depending on error origin (JavaScript, Custom or Unknown) */
      var errorParameters = this._buildErrorInfo(error);
      /* If any Notification manager exists, use it with error parameters */
      this._logErrorToNotification(errorParameters);
      /* In debug mode, fill the console with error parameters */
      this._logErrorToConsole(errorParameters);
    }
  }, {
    key: "errors",
    set: function set(errors) {
      this._errors = errors;
    }
  }]);
  return Logger;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Logger);

/***/ }),

/***/ "./front/js/utils/Notification.js":
/*!****************************************!*\
  !*** ./front/js/utils/Notification.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Notification = /*#__PURE__*/function () {
  /** @summary Create an instance of a notification handler
   * @author Arthur Beaulieu
   * @since June 2018
   * @description Build the notification singleton handler that will handle all incoming Notifications
   * @param {object} [options] - The notification handler global options
   * @param {string} [options.position=top-right] - <i>top-left; top-right; bottom-left; bottom-right;</i>
   * @param {string} [options.thickBorder=top] - <i>top; bottom; left; right; none;</i>
   * @param {number} [options.duration=3000] - Notification life cycle duration (in ms) in range N*
   * @param {number} [options.transition=100] - Notification fade animation transition timing (in ms) in range N*
   * @param {number} [options.maxActive=5] - Maximum of simultaneously opened notification in range N* */
  function Notification(options) {
    _classCallCheck(this, Notification);
    if (Notification.instance) {
      // GoF Singleton
      return Notification.instance;
    }
    Notification.instance = this;
    // Attributes declaration
    /** @private
     * @member {boolean} - Dismiss all operation in progress flag */
    this._dismissAllLock = false;
    /** @private
     * @member {object} - Notification handler container node */
    this._dom = {};
    /** @private
     * @member {object} - Active notifications object : retrieve a notification using its ID (this._active[ID]) */
    this._active = {};
    /** @private
     * @member {object} - Queue notifications when max active has been reached */
    this._queue = {};
    /** @private
     * @member {object} - Notification handler default values */
    this._default = {};
    /** @private
     * @member {string} - The handler position in viewport - <i>top-left; top-right; bottom-left; bottom-right;</i> */
    this._position = '';
    /** @private
     * @member {string} - The thick border position in the Notification - <i>top; bottom; left; right; none;</i> */
    this._thickBorder = '';
    /** @private
     * @member {number} - The Notification on screen duration in ms */
    this._duration = 0;
    /** @private
     * @member {number} - The fade transition time in ms */
    this._transition = 0;
    /** @private
     * @member {number} - The maximum amount of active Notification */
    this._maxActive = 0;
    /** @public
     * @member {number} - The component version */
    this.version = '1.1.0';
    // Build singleton and attach
    this._init(options);
    // Return singleton
    return this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof Notification
   * @author Arthur Beaulieu
   * @since March 2019
   * @description Destroy the singleton and detach it from the DOM */
  _createClass(Notification, [{
    key: "destroy",
    value: function destroy() {
      var _this = this;
      document.body.removeChild(this._dom);
      // Delete object attributes
      Object.keys(this).forEach(function (key) {
        delete _this[key];
      });
      // Clear singleton instance
      Notification.instance = null;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------  NOTIFICATION JS HANDLER CONSTRUCTION METHODS  --------------------------------  */
    /*                                                                                                                  */
    /*  The following methods only concerns the singleton creation. It handle all arguments and will fallback on        */
    /*  default values if any argument doesn't meet its expected value or type.                                         */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _init
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Create the handler DOM element, set default values, test given options and properly add CSS class to the handler
     * @param {object} [options] - The notification handler global options
     * @param {string} [options.position=top-right] - <i>top-left; top-right; bottom-left; bottom-right;</i>
     * @param {string} [options.thickBorder=top] - <i>top; bottom; left; right; none;</i>
     * @param {number} [options.duration=3000] - Notification life cycle duration (in ms) in range N*
     * @param {number} [options.transition=100]  - Notification fade animation transition timing (in ms) in range N*
     * @param {number} [options.maxActive=5] - Maximum of simultaneously opened notification in range N* */
  }, {
    key: "_init",
    value: function _init(options) {
      // Declare options as object if empty
      if (options === undefined) {
        options = {};
      }
      // Create notification main container
      this._dom = document.createElement('DIV'); // Notification handler DOM container
      this._dom.classList.add('notification-container'); // Set proper CSS class
      // Notification.js default values
      this._default = {
        handler: {
          position: 'top-right',
          thickBorder: 'top',
          duration: 4000,
          transition: 200,
          maxActive: 10
        },
        notification: {
          type: 'info',
          message: '',
          title: '',
          iconless: false,
          closable: true,
          sticky: false,
          renderTo: this._dom,
          CBtitle: '',
          callback: null,
          isDimmed: false
        },
        color: {
          success: 'rgb(76, 175, 80)',
          info: 'rgb(3, 169, 244)',
          warning: 'rgb(255, 152, 0)',
          error: 'rgb(244, 67, 54)'
        },
        svgPath: {
          success: 'M12.5 0C5.602 0 0 5.602 0 12.5S5.602 25 12.5 25 25 19.398 25 12.5 19.398 0 12.5 0zm-2.3 18.898l-5.5-5.5 1.8-1.796 3.7 3.699L18.5 7l1.8 1.8zm0 0',
          info: 'M12.504.035a12.468 12.468 0 100 24.937 12.468 12.468 0 000-24.937zM15.1 19.359c-.643.25-1.153.445-1.537.576-.384.134-.825.199-1.333.199-.775 0-1.381-.192-1.813-.57a1.832 1.832 0 01-.642-1.442c0-.227.015-.459.047-.693.03-.24.083-.504.154-.806l.802-2.835c.069-.272.132-.527.182-.77.048-.244.069-.467.069-.668 0-.36-.075-.615-.223-.756-.153-.144-.437-.213-.857-.213-.207 0-.422.036-.639.095a9.914 9.914 0 00-.56.184l.213-.874a19.777 19.777 0 011.51-.549 4.48 4.48 0 011.361-.23c.77 0 1.368.19 1.784.56a1.857 1.857 0 01.626 1.452c0 .122-.012.341-.04.652a4.44 4.44 0 01-.162.856l-.798 2.831a8.133 8.133 0 00-.176.775c-.05.288-.075.51-.075.66 0 .374.082.633.251.771.165.134.458.202.875.202.192 0 .412-.037.66-.1.243-.073.42-.127.531-.18zm-.144-11.483a1.901 1.901 0 01-1.343.518 1.93 1.93 0 01-1.352-.518 1.65 1.65 0 01-.562-1.258 1.688 1.688 0 01.562-1.266 1.914 1.914 0 011.35-.522c.524 0 .975.173 1.345.523a1.673 1.673 0 01.56 1.266 1.65 1.65 0 01-.56 1.257z',
          warning: 'M24.585 21.17L13.774 3.24a1.51 1.51 0 00-2.586 0L.376 21.17a1.51 1.51 0 001.293 2.29h21.623a1.51 1.51 0 001.292-2.29zM12.49 8.714c.621 0 1.146.35 1.146.97 0 1.895-.223 4.618-.223 6.513 0 .494-.541.7-.923.7-.51 0-.94-.208-.94-.701 0-1.894-.223-4.617-.223-6.511 0-.62.51-.971 1.163-.971zm.015 11.734a1.225 1.225 0 01-1.225-1.226c0-.669.525-1.227 1.225-1.227.652 0 1.21.558 1.21 1.227 0 .652-.557 1.225-1.21 1.225z',
          error: 'M12.469.027c-3.332 0-6.465 1.301-8.824 3.653-4.86 4.86-4.86 12.777 0 17.636a12.392 12.392 0 008.824 3.653c3.336 0 6.465-1.301 8.824-3.653 4.863-4.859 4.863-12.777 0-17.636A12.417 12.417 0 0012.469.027zm5.61 18.086a1.137 1.137 0 01-.802.332c-.285 0-.582-.113-.8-.332l-4.008-4.008-4.008 4.008a1.137 1.137 0 01-.8.332c-.286 0-.583-.113-.802-.332a1.132 1.132 0 010-1.605l4.008-4.004L6.86 8.496a1.132 1.132 0 010-1.605 1.127 1.127 0 011.602 0l4.008 4.007 4.008-4.007a1.127 1.127 0 011.601 0c.45.449.45 1.164 0 1.605l-4.004 4.008 4.004 4.004c.45.449.45 1.164 0 1.605zm0 0'
        }
      };
      // Build singleton from options and sanitize them
      this._setOptionsDefault(options);
      this._position = options.position;
      this._thickBorder = options.thickBorder;
      this._duration = options.duration;
      this._transition = options.transition;
      this._maxActive = options.maxActive;
      this._setAttributesDefault();
      // Add position CSS class only after this._position is sure to be a valid value
      this._dom.classList.add(this._position);
      this._attach();
    }

    /** @method
     * @name _setOptionsDefault
     * @private
     * @memberof Notification
     * @summary Set singleton options
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Build the notification singleton according to the user options
     * @param {object} options - The singleton options to set */
  }, {
    key: "_setOptionsDefault",
    value: function _setOptionsDefault(options) {
      if (options.position === undefined) {
        options.position = this._default.handler.position;
      }
      if (options.thickBorder === undefined) {
        options.thickBorder = this._default.handler.thickBorder;
      }
      if (options.duration === undefined) {
        options.duration = this._default.handler.duration;
      }
      if (options.transition === undefined) {
        options.transition = this._default.handler.transition;
      }
      if (options.maxActive === undefined) {
        options.maxActive = this._default.handler.maxActive;
      }
    }

    /** @method
     * @name _setAttributesDefault
     * @private
     * @memberof Notification
     * @summary Check the notification singleton options validity
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Fallback on default attributes value if the notification singleton options are invalid */
  }, {
    key: "_setAttributesDefault",
    value: function _setAttributesDefault() {
      if (this._position !== 'top-left' && /* Illegal value for position */
      this._position !== 'top-right' && this._position !== 'bottom-left' && this._position !== 'bottom-right') {
        this._position = this._default.handler.position; // Default value
      }

      if (this._thickBorder !== 'top' && /* Illegal value for thick border */
      this._thickBorder !== 'bottom' && this._thickBorder !== 'left' && this._thickBorder !== 'right' && this._thickBorder !== 'none') {
        this._thickBorder = this._default.handler.thickBorder; // Default value
      }

      if (typeof this._duration !== 'number' || this._duration <= 0) {
        // Illegal value for duration
        this._duration = this._default.handler.duration; // Default value
      }

      if (typeof this._transition !== 'number' || this._duration < this._transition * 2 || this._transition <= 0) {
        // Transition over (duration / 2)
        this._transition = this._default.handler.transition; // Default value for _maxActive
      }

      if (typeof this._maxActive !== 'number' || this._maxActive <= 0) {
        // Illegal value for maxActive
        this._maxActive = this._default.handler.maxActive; // Default value for _maxActive
      }
    }

    /** @method
     * @name _attach
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Attach the notification handler to the dom using a fragment */
  }, {
    key: "_attach",
    value: function _attach() {
      var fragment = document.createDocumentFragment();
      fragment.appendChild(this._dom);
      document.body.appendChild(fragment);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -------------------------------------  NOTIFICATION SPECIFIC METHODS  ----------------------------------------  */
    /*                                                                                                                  */
    /*  The following methods implements notification features. It handle its events, lifecycle depending on its        */
    /*  parameters, its DOM structure, and its animations. The Notification singleton will handle the notification      */
    /*  stacking the in user interface.                                                                                 */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _events
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Handle mouse events for the given notification
     * @param {{id: number}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {object} notification.dom - Notifiction DOM element
     * @param {number} notification.requestCount - Notification inner call counter
     * @param {number} notification.timeoutID - Notification own setTimeout ID
     * @param {boolean} notification.sticky - Notification sticky behvaior
     * @param {boolean} notification.closable - Make notification closable flag */
  }, {
    key: "_events",
    value: function _events(notification) {
      var _this2 = this;
      var closeFired = false; // Close fired flag

      // Inner callback functions
      var _unDim = function _unDim() {
        // Undim notification
        if (notification.isDimmed) {
          _this2._unDim(notification);
        }
      };
      var _close = function _close() {
        // Close notification
        if (_this2._active[notification.id] === undefined) {
          return;
        }

        // Update counter DOM element
        if (notification.requestCount > 1) {
          _this2._decrementRequestCounter(notification, true);
        }

        // Remove notification element from the DOM tree
        else if (!closeFired) {
          closeFired = true;
          window.clearTimeout(notification.timeoutID); // Clear life cycle timeout
          notification.dom.close.removeEventListener('click', _close); // Avoid error when spam clicking the close button
          _this2._close(notification);
        }
      };
      var _resetTimeout = function _resetTimeout() {
        // Reset life cycle timeout
        if (_this2._active[notification.id] === undefined) {
          return;
        }
        if (!closeFired && !notification.isDimmed) {
          // Only reset timeout if no close event has been fired
          _this2._resetTimeout(notification);
        }
      };

      // Mouse event listeners
      if (notification.sticky) {
        notification.dom.addEventListener('mouseenter', _unDim.bind(this));
        notification.dom.addEventListener('mouseout', _unDim.bind(this));
      }
      if (notification.closable) {
        notification.dom.addEventListener('click', _close.bind(this));
        notification.dom.close.addEventListener('click', _close.bind(this));
      }
      notification.dom.addEventListener('mouseover', _resetTimeout.bind(this));
    }

    /** @method
     * @name _buildUI
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Builds the DOM element that contains and that adapts to all given options
     * @param {object} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {string} notification.type - Error, Warning, Info, Success
     * @param {string} notification.title - Notification title
     * @param {string} notification.message - Notification message
     * @param {boolean} notification.iconless - No icon flag
     * @param {string} notification.thickBorder - Notification border side (override handler side value)
     * @param {boolean} notification.closable - Make notification closable flag
     * @param {boolean} notification.sticky - Make notification sticky flag
     * @param {string} notification.CBtitle - Notification callback title
     * @param {function} notification.callback - Notification callback button
     * @returns {object} Enhanced and ready notification object */
  }, {
    key: "_buildUI",
    value: function _buildUI(notification) {
      var _this3 = this;
      notification.requestCount = 1;
      notification.totalRequestCount = 1;
      this._buildUIDom(notification);
      this._buildNotificationType(notification);
      if (notification.iconless) {
        notification.dom.message.classList.add('iconless-width');
      }
      notification.dom.text.appendChild(notification.dom.maintitle);
      notification.dom.text.appendChild(notification.dom.message);
      // Add callback button and listener if needed
      if (notification.callback) {
        var callbackButton = document.createElement('BUTTON');
        callbackButton.innerHTML = notification.CBtitle;
        notification.dom.text.appendChild(callbackButton);
        callbackButton.addEventListener('click', function () {
          _this3._close(notification);
          notification.callback();
        });
      }
      // Fill notification DOM element
      if (!notification.iconless) {
        notification.dom.appendChild(notification.dom.icon);
      }
      notification.dom.appendChild(notification.dom.text);
      // Append close button if needed
      if (notification.closable) {
        notification.dom.appendChild(notification.dom.close);
      }
      // Return final notification
      return notification;
    }

    /** @method
     * @name _buildUIDom
     * @private
     * @memberof Notification
     * @summary Create the Notification DOM tree
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Build all the Notification internal structure
     * @param {object} notification - The notification to create */
  }, {
    key: "_buildUIDom",
    value: function _buildUIDom(notification) {
      // Create notification DOM elements
      notification.dom = document.createElement('DIV');
      notification.dom.icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      notification.dom.iconPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      notification.dom.text = document.createElement('DIV');
      notification.dom.close = document.createElement('DIV');
      notification.dom.maintitle = document.createElement('H6');
      notification.dom.message = document.createElement('P');
      // Class assignation
      notification.dom.classList.add('notification');
      notification.dom.icon.classList.add('vector-container');
      notification.dom.text.classList.add('text-container');
      notification.dom.close.classList.add('close');
      // Changing border side
      if (notification.thickBorder === 'top') {
        notification.dom.classList.add('top-border');
      } else if (notification.thickBorder === 'bottom') {
        notification.dom.classList.add('bottom-border');
      } else if (notification.thickBorder === 'left') {
        notification.dom.classList.add('left-border');
      } else if (notification.thickBorder === 'right') {
        notification.dom.classList.add('right-border');
      }
      // Text modification
      notification.dom.maintitle.innerHTML = notification.title || '';
      notification.dom.message.innerHTML = notification.message || '';
      notification.dom.close.innerHTML = '&#x2716;';
      // Image vector
      notification.dom.icon.setAttribute('viewBox', '0 0 25 25');
      notification.dom.icon.setAttribute('width', '25');
      notification.dom.icon.setAttribute('height', '25');
      notification.dom.icon.appendChild(notification.dom.iconPath);
    }

    /** @method
     * @name _buildNotificationType
     * @private
     * @memberof Notification
     * @summary Attach proper assets and css
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Fills the Notification icon and class according to its inner type
     * @param {object} notification - The notification to fill */
  }, {
    key: "_buildNotificationType",
    value: function _buildNotificationType(notification) {
      // Type specification (title, icon, color)
      if (['success', 'warning', 'error', 'info'].indexOf(notification.type) !== -1) {
        notification.dom.classList.add(notification.type);
        if (!notification.iconless) {
          notification.dom.iconPath.setAttribute('fill', this._default.color[notification.type]);
          notification.dom.iconPath.setAttribute('d', this._default.svgPath[notification.type]);
        }
      } else {
        notification.dom.classList.add('info');
        if (!notification.iconless) {
          notification.dom.iconPath.setAttribute('fill', this._default.color.info);
          notification.dom.iconPath.setAttribute('d', this._default.svgPath.info);
        }
      }
    }

    /** @method
     * @name _start
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Call this method to add the new notification to the DOM container, and launch its life cycle
     * @param {object} notification - The notification object
     * @param {number} notification.id - Notification own ID */
  }, {
    key: "_start",
    value: function _start(notification) {
      var _this4 = this;
      if (Object.keys(this._active).length >= this._maxActive) {
        this._queue[notification.id] = notification;
      } else {
        this._active[notification.id] = notification; // Append the new notification to the _active object

        this._events(notification); // Listen to mouse events on the newly created notification
        this._open(notification); // Open the new notification

        notification.timeoutID = window.setTimeout(function () {
          _this4._checkCounter(notification); // Check notification request count to act accordingly
        }, notification.duration); // Use Notification master duration
      }
    }

    /** @method
     * @name _open
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Open and add the notification to the container
     * @param {{id: number}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {object} notification.dom - Notifiction DOM element */
  }, {
    key: "_open",
    value: function _open(notification) {
      // Reverse insertion when notifications are on bottom
      if (this._position === 'bottom-right' || this._position === 'bottom-left') {
        notification.renderTo.insertBefore(notification.dom, notification.renderTo.firstChild);
      } else {
        notification.renderTo.appendChild(notification.dom);
      }
      notification.opened = Date.now();
      window.setTimeout(function () {
        notification.dom.style.opacity = 1;
      }, 10);
    }

    /** @method
     * @name _close
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Close and remove the notification from the container
     * @param {{id: number}|{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {boolean} notification.isClosing - Already closing flag
     * @param {object} notification.dom - Notifiction DOM element
     * @param {object} notification.renderTo - DOM object to render the notification in */
  }, {
    key: "_close",
    value: function _close(notification) {
      var _this5 = this;
      if (notification.isClosing) {
        // Avoid double close on a notification (in case dismiss/dismissAll is triggerred when notification is already closing)
        return;
      }
      notification.isClosing = true; // Lock notification to one fadeOut animation
      notification.closed = Date.now();
      notification.effectiveDuration = notification.closed - notification.opened;
      notification.dom.style.opacity = 0;
      window.setTimeout(function () {
        notification.renderTo.removeChild(notification.dom); // Remove this notification from the DOM tree
        delete _this5._active[notification.id];
        if (Object.keys(_this5._queue).length > 0) {
          // Notification queue is not empty
          _this5._start(_this5._queue[Object.keys(_this5._queue)[0]]); // Start first queued notification
          delete _this5._queue[Object.keys(_this5._queue)[0]]; // Shift queue object
        } else if (Object.keys(_this5._active).length === 0) {
          // Check this._active emptyness
          _this5._dismissAllLock = false; // Unlock dismissAllLock
        }
      }, 1000); // Transition value set in _notification.scss
    }

    /** @method
     * @name _incrementRequestCounter
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description This method is called when a notification is requested another time
     * @param {object} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {number} notification.requestCount - Notification inner call counter
     * @param {object} notification.dom - Notifiction DOM element
     * @param {boolean} notification.sticky - Notification sticky behvaior
     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */
  }, {
    key: "_incrementRequestCounter",
    value: function _incrementRequestCounter(notification) {
      ++notification.requestCount; // Increment notification.requestCount

      if (notification.totalRequestCount < notification.requestCount) {
        notification.totalRequestCount = notification.requestCount;
      }

      // Update counter DOM element
      if (notification.requestCount > 1) {
        var valueToDisplay = '∞';
        if (notification.requestCount < 100) {
          valueToDisplay = notification.requestCount;
        }
        if (notification.dom.counter) {
          // Update existing counter
          notification.dom.counter.innerHTML = valueToDisplay;
        } else {
          // Create counter DOM element
          notification.dom.counter = document.createElement('DIV');
          notification.dom.counter.classList.add('counter');
          notification.dom.counter.innerHTML = valueToDisplay;
          notification.dom.appendChild(notification.dom.counter);
        }
      }

      // Undim notification if it is a sticky/dimmed one
      if (notification.sticky && notification.isDimmed) {
        this._unDim(notification);
      }
    }

    /** @method
     * @name _decrementRequestCounter
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description This method is called each notification cycle end to update its inner counter
     * @param {{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {boolean} notification.sticky - Notification sticky behvaior
     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true)
     * @param {number} notification.requestCount - Notification inner call counter
     * @param {object} notification.dom - Notification DOM element
     * @param {boolean} force - To force the notification.requestCount decrementation */
  }, {
    key: "_decrementRequestCounter",
    value: function _decrementRequestCounter(notification, force) {
      if (notification.sticky && !force) {
        if (!notification.isDimmed) {
          this._dim(notification);
        }
        return;
      }
      this._resetTimeout(notification);
      --notification.requestCount; // Decrement notification.requestCount

      // Update counter DOM element
      if (notification.requestCount > 1) {
        var valueToDisplay = '∞';
        if (notification.requestCount < 100) {
          valueToDisplay = notification.requestCount;
        }
        notification.dom.counter.innerHTML = valueToDisplay;
      } else {
        // Remove counter element from the DOM tree
        notification.dom.removeChild(notification.dom.counter);
        delete notification.dom.counter;
      }
    }

    /** @method
     * @name _checkCounter
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description This method will reset the fadeout/dim timeout or close/dim the notification depending on its requestCount
     * @param {{id: number}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {number} notification.requestCount - Notification inner call counter
     * @param {object} notification.dom - Notifiction DOM element
     * @param {number} notification.timeoutID - Notification own setTimeout ID
     * @param {boolean} notification.sticky - Notification sticky behvaior */
  }, {
    key: "_checkCounter",
    value: function _checkCounter(notification) {
      // This notification as still more than one cycle to live
      if (notification.requestCount > 1) {
        this._decrementRequestCounter(notification);
      } else {
        // This notification reached the end of its life cycle
        if (notification.renderTo.contains(notification.dom)) {
          window.clearTimeout(notification.timeoutID);
          if (notification.sticky) {
            // FadeOut/Dim depending on sticky behavior
            this._dim(notification);
          } else {
            this._close(notification);
          }
        }
      }
    }

    /** @method
     * @name _clearRequestCount
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Method that clear every pending request
     * @param {object} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {object} notification.dom - Notifiction DOM element */
  }, {
    key: "_clearRequestCount",
    value: function _clearRequestCount(notification) {
      notification.requestCount = 1;
      notification.dom.removeChild(notification.dom.counter);
      delete notification.dom.counter;
    }

    /** @method
     * @name _resetTimeout
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Use this to reset a notification life cycle, and delay its close event
     * @param {{id: number}|{id: number, dom: Object, requestCount: number, timeoutID: number, sticky: boolean, closable: boolean}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {number} notification.timeoutID - Notification own setTimeout ID */
  }, {
    key: "_resetTimeout",
    value: function _resetTimeout(notification) {
      var _this6 = this;
      window.clearTimeout(notification.timeoutID); // Clear previous life cycle
      notification.timeoutID = window.setTimeout(function () {
        _this6._checkCounter(notification); // Check notification request count to act accordingly
      }, notification.duration); // Use Notification master duration
    }

    /** @method
     * @name _dim
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Only useful for sticky notification that dim instead of close at the end of its life cycle
     * @param {{id: number, requestCount: number, dom: Object, timeoutID: number, sticky: boolean}} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {object} notification.dom - Notifiction DOM element
     * @param {boolean} notification.sticky - Notification sticky behvaior
     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */
  }, {
    key: "_dim",
    value: function _dim(notification) {
      var that = this;
      var i = 100;
      (function halfFadeOut() {
        // Start animation immediatly
        if (i >= 0) {
          notification.dom.style.opacity = i / 100;
          --i;
          if (i === 50 && notification.sticky) {
            // Opacity has reached 0.51
            notification.dom.style.opacity = 0.5; // Set half transparency on notification
            notification.isDimmed = true; // Update notification dim status
            return; // End function
          }
        }

        window.setTimeout(halfFadeOut, that._transition / 100); // Split animation transition into 100 iterations (50 for real here)
      })();
    }

    /** @method
     * @name _unDim
     * @private
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Call this method when a notification is not inactive anymore
     * @param {object} notification - The notification object
     * @param {number} notification.id - Notification personnal ID
     * @param {object} notification.dom - Notifiction DOM element
     * @param {boolean} notification.isDimmed - Notification dimmed status (only useful if notification.sticky is true) */
  }, {
    key: "_unDim",
    value: function _unDim(notification) {
      var that = this;
      var i = 50;
      (function halfFadeIn() {
        if (i < 100) {
          notification.dom.style.opacity = i / 100;
          ++i;
        } else if (i === 100) {
          notification.dom.style.opacity = 1; // Set full visibility on notification
          notification.isDimmed = false; // Update notification dim status
          that._resetTimeout(notification); // Reset life cycle timeout
          return; // End function
        }

        window.setTimeout(halfFadeIn, that._transition / 100); // Split animation transition into 100 iterations (50 for real here)
      })();
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------  SINGLE NOTIFICATION CONSTRUCTION UTILS METHODS  -------------------------------  */
    /*                                                                                                                  */
    /*  The following methods only concerns a new notification request. It will test the options validity, default to   */
    /*  fallback value if necessary and give the notification a pseudo unique identifier.                               */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _checkNotificationOptionsValidity
     * @private
     * @memberof Notification
     * @summary Check the Notification options validity
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Check a Notification options object against the required parameters.
     * @param {object} options - The notification options to check validity */
  }, {
    key: "_checkNotificationOptionsValidity",
    value: function _checkNotificationOptionsValidity(options) {
      // Check for mandatory arguments existence
      if (options === undefined || options.type === undefined || options.message === undefined) {
        return false;
      }
      // Check existing message
      if (typeof options.message !== 'string' || options.message.length === 0) {
        return false;
      }
      // Check for unclosable at all notification
      if (options.sticky && options.closable === false) {
        return false;
      }
      // Test Notification inner variables validity
      if (options.type !== 'info' && options.type !== 'success' && options.type !== 'warning' && options.type !== 'error') {
        options.type = this._default.notification.type;
      }
      // Unlock dismissAllLock
      if (this._dismissAllLock) {
        this._dismissAllLock = false;
      }
      return true;
    }

    /** @method
     * @name _setOptionsFallback
     * @private
     * @memberof Notification
     * @summary Set Notification fallback options
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Check a Notification options object and fill it with default value in case they are empty.
     * @param {object} options - The notification options to fill with default value if empty */
  }, {
    key: "_setOptionsFallback",
    value: function _setOptionsFallback(options) {
      if (options.title === undefined) {
        options.title = this._default.notification.title;
      }
      if (options.duration === undefined) {
        options.duration = this._duration;
      }
      if (options.iconless === undefined) {
        options.iconless = this._default.notification.iconless;
      }
      if (options.thickBorder === undefined) {
        options.thickBorder = this._thickBorder;
      }
      if (options.closable === undefined) {
        options.closable = this._default.notification.closable;
      }
      if (options.sticky === undefined) {
        options.sticky = this._default.notification.sticky;
      }
      if (options.renderTo === undefined) {
        options.renderTo = this._default.notification.renderTo;
      }
      if (options.CBtitle === undefined) {
        options.CBtitle = this._default.notification.CBtitle;
      }
      if (options.callback === undefined) {
        options.callback = this._default.notification.callback;
      }
      if (options.isDimmed === undefined) {
        options.isDimmed = this._default.notification.isDimmed;
      }
    }

    /** @method
     * @name _idGenerator
     * @private
     * @memberof Notification
     * @summary Generate an ID
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Hash the seed to generate an ID
     * @param {string} seed - The seed string to hash
     * @param {number} length - The length of the returned ID */
  }, {
    key: "_idGenerator",
    value: function _idGenerator(seed, length) {
      /* Original code from:
       * http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
       * Tweaked to fit Notification class needs
       */
      var hash = 0;
      var character = '';
      if (seed.length === 0 || length > 12) {
        return undefined;
      }
      for (var i = 0; i < seed.length; ++i) {
        character = seed.charCodeAt(i);
        hash = (hash << 5) - hash + character;
        hash |= 0; // Convert to 32bit integer
      }

      return (Math.abs(hash).toString(36) + '' + Math.abs(hash / 2).toString(36).split('').reverse().join('')).substring(0, length).toUpperCase(); // Here is the twekead line
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------  NOTIFICATION PUBLIC METHODS  -----------------------------------------  */
    /*                                                                                                                  */
    /*  The following methods are the exposed API of the Notification component. It allow to raise standard or custom   */
    /*  notification without bothering their lifecycle, position or other JavaScript expensive implementation.          */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name new
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Build a notification according to the given options, then append it to notification container.
     * @param {object} options - The notification options object
     * @param {string} options.type - <i>Error; Warning; Info; Success;</i>
     * @param {string} [options.title=options.type] - Notification title
     * @param {string} options.message - Notification message
     * @param {number} [options.duration=handler] - Notification duration (override handler duration value)
     * @param {boolean} [options.iconless=false] - No icon flag
     * @param {string} [options.thickBorder=handler] - Notification border side (override handler side value)
     * @param {boolean} [options.closable=true] - Make notification closable flag
     * @param {boolean} [options.sticky=false] - Make notification sticky flag
     * @param {object} [options.renderTo=handler] - Dom object to render the notification in
     * @param {string} [options.CBtitle=Callback] - Notification callback title
     * @param {function} [options.callback=undefined] - Notification callback button
     * @returns {number} The newly created notification ID */
  }, {
    key: "new",
    value: function _new(options) {
      if (this._checkNotificationOptionsValidity(options) === false) {
        console.error('Notification.js : new() options argument object is invalid.');
        return -1;
      }
      this._setOptionsFallback(options);
      // Build notification DOM element according to the given options
      var notification = this._buildUI({
        id: this._idGenerator("".concat(options.type).concat(options.message), 5),
        // Generating an ID of 5 characters long from notification mandatory fields
        type: options.type,
        message: options.message,
        title: options.title,
        duration: options.duration,
        iconless: options.iconless,
        thickBorder: options.thickBorder,
        closable: options.closable,
        sticky: options.sticky,
        renderTo: options.renderTo,
        CBtitle: options.CBtitle,
        callback: options.callback,
        isDimmed: options.isDimmed // Only useful if sticky is set to true
      });
      // Create a new notification in the container: No notification with the same ID is already open
      if (!this._active[notification.id]) {
        this._start(notification);
      } else {
        // Use existing notification: increment request count and reset timeout
        this._resetTimeout(this._active[notification.id]);
        this._incrementRequestCounter(this._active[notification.id]);
        notification = this._active[notification.id]; // Clear local new notification since it already exists in this._active
      }

      return notification.id;
    }

    /** @method
     * @name info
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Build an info notification
     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())
     * @returns {number} The newly created notification ID */
  }, {
    key: "info",
    value: function info(options) {
      if (options) {
        options.type = 'info';
        return this["new"](options);
      } else {
        console.error('Notification.js : No arguments provided for info() method.');
        return null;
      }
    }

    /** @method
     * @name success
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Build a success notification
     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())
     * @returns {number} The newly created notification ID */
  }, {
    key: "success",
    value: function success(options) {
      if (options) {
        options.type = 'success';
        return this["new"](options);
      } else {
        console.error('Notification.js : No arguments provided for success() method.');
        return null;
      }
    }

    /** @method
     * @name warning
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Build a warning notification
     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())
     * @returns {number} The newly created notification ID */
  }, {
    key: "warning",
    value: function warning(options) {
      if (options) {
        options.type = 'warning';
        return this["new"](options);
      } else {
        console.error('Notification.js : No arguments provided for warning() method.');
        return null;
      }
    }

    /** @method
     * @name error
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Build an error notification
     * @param {object} options - The notification options object (see new() arguments since this is an abstraction of new())
     * @returns {number} The newly created notification ID */
  }, {
    key: "error",
    value: function error(options) {
      if (options) {
        options.type = 'error';
        return this["new"](options);
      } else {
        console.error('Notification.js : No arguments provided for error() method.');
        return null;
      }
    }

    /** @method
     * @name dismiss
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Dismiss a specific notification via its ID
     * @param {string} id - The notification ID to dismiss */
  }, {
    key: "dismiss",
    value: function dismiss(id) {
      window.clearTimeout(this._active[id].timeoutID); // Clear notification timeout

      if (this._active[id].requestCount > 1) {
        // Several request are pending
        this._clearRequestCount(this._active[id]); // Clear all pending request
      }

      this._close(this._active[id]); // Close notification
    }

    /** @method
     * @name dismissAll
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Clear the notification handler from all its active notifications */
  }, {
    key: "dismissAll",
    value: function dismissAll() {
      if (!this._dismissAllLock && Object.keys(this._active).length !== 0) {
        // Check that _dimissAllLock is disable and that there is still notification displayed
        this._dismissAllLock = true; // dismissAllLock will be unlocked at the last _close() method call
        this._queue = {}; // Clear queue object

        for (var id in this._active) {
          // Iterate over notifications
          this.dismiss(id);
        }
      }
    }

    /** @method
     * @name dismissType
     * @public
     * @memberof Notification
     * @author Arthur Beaulieu
     * @since June 2018
     * @description Dismiss all notifications from a given type
     * @param {string} type - <i>succes; info; warning; error;</i> */
  }, {
    key: "dismissType",
    value: function dismissType(type) {
      if (Object.keys(this._active).length !== 0) {
        // Check that _dismissAllLock is disable and that there is still notification displayed
        for (var id in this._active) {
          // Iterate over notifications
          if (this._active[id].type === type) {
            this.dismiss(id);
          }
        }
      }
    }
  }]);
  return Notification;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Notification);

/***/ }),

/***/ "./front/js/utils/Pager.js":
/*!*********************************!*\
  !*** ./front/js/utils/Pager.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _scss_tool_pager_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../scss/tool/_pager.scss */ "./front/scss/tool/_pager.scss");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var Pager = /*#__PURE__*/function () {
  function Pager(options) {
    _classCallCheck(this, Pager);
    this._target = options.target;
    this._size = parseInt(options.size);
    this._maxItems = parseInt(options.maxItems);
    this._active = parseInt(options.active);
    this._clickedCB = options.clicked;
    this._totalPages = Math.floor(this._size / this._maxItems);
    this._container = null;
    this._evtIds = [];
    this._init();
  }
  _createClass(Pager, [{
    key: "destroy",
    value: function destroy() {
      if (this._container) {
        this._target.removeChild(this._container);
      }
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_init",
    value: function _init() {
      if (this._totalPages === 0) {
        return;
      }
      this._target.classList.add('pager');
      this._container = document.createElement('DIV');
      if (this._totalPages < 7) {
        this._createSimple();
      } else {
        this._createLarge();
      }
    }
  }, {
    key: "_createSimple",
    value: function _createSimple() {
      for (var i = 0; i < this._totalPages; ++i) {
        var element = document.createElement('SPAN');
        element.dataset.page = i + 1;
        element.innerHTML = i + 1;
        if (i + 1 === this._active) {
          element.classList.add('selected');
        }
        this._container.appendChild(element);
      }
      this._target.appendChild(this._container);
    }
  }, {
    key: "_createLarge",
    value: function _createLarge() {
      if (this._active < 7) {
        // Left side extremum
        this._createOnLeft();
      } else if (this._totalPages - this._active < 6) {
        // Right side extremum
        this._createOnRight();
      } else {
        this._createCentered();
      }
      this._target.appendChild(this._container);
    }
  }, {
    key: "_createOnLeft",
    value: function _createOnLeft() {
      var _this = this;
      var _loop = function _loop() {
        var element = document.createElement('SPAN');
        element.dataset.page = i + 1;
        element.innerHTML = i + 1;
        if (i + 1 === _this._active) {
          element.classList.add('selected');
        }
        _this._evtIds.push(Evts.addEvent('click', element, function () {
          return _this._clickedCB(element.dataset.page);
        }));
        _this._container.appendChild(element);
      };
      for (var i = 0; i < 7; ++i) {
        _loop();
      }
      var more = document.createElement('SPAN');
      more.innerHTML = '···';
      more.classList.add('inactive');
      var last = document.createElement('SPAN');
      last.innerHTML = this._totalPages;
      this._container.appendChild(more);
      this._evtIds.push(Evts.addEvent('click', last, function () {
        return _this._clickedCB(_this._totalPages);
      }));
      this._container.appendChild(last);
    }
  }, {
    key: "_createOnRight",
    value: function _createOnRight() {
      var _this2 = this;
      var first = document.createElement('SPAN');
      first.innerHTML = '1';
      var more = document.createElement('SPAN');
      more.innerHTML = '···';
      more.classList.add('inactive');
      this._evtIds.push(Evts.addEvent('click', first, function () {
        return _this2._clickedCB(1);
      }));
      this._container.appendChild(first);
      this._container.appendChild(more);
      var _loop2 = function _loop2() {
        var element = document.createElement('SPAN');
        element.dataset.page = i + 1;
        element.innerHTML = i + 1;
        if (i + 1 === _this2._active) {
          element.classList.add('selected');
        }
        _this2._evtIds.push(Evts.addEvent('click', element, function () {
          return _this2._clickedCB(element.dataset.page);
        }));
        _this2._container.appendChild(element);
      };
      for (var i = this._totalPages - 7; i < this._totalPages; ++i) {
        _loop2();
      }
    }
  }, {
    key: "_createCentered",
    value: function _createCentered() {
      var _this3 = this;
      var first = document.createElement('SPAN');
      first.innerHTML = '1';
      var more1 = document.createElement('SPAN');
      more1.innerHTML = '···';
      more1.classList.add('inactive');
      this._evtIds.push(Evts.addEvent('click', first, function () {
        return _this3._clickedCB(1);
      }));
      this._container.appendChild(first);
      this._container.appendChild(more1);
      var _loop3 = function _loop3() {
        var element = document.createElement('SPAN');
        element.dataset.page = i + 1;
        element.innerHTML = i + 1;
        if (i + 1 === _this3._active) {
          element.classList.add('selected');
        }
        _this3._evtIds.push(Evts.addEvent('click', element, function () {
          return _this3._clickedCB(element.dataset.page);
        }));
        _this3._container.appendChild(element);
      };
      for (var i = this._active - 3; i < this._active + 2; ++i) {
        _loop3();
      }
      var more2 = document.createElement('SPAN');
      more2.innerHTML = '···';
      more2.classList.add('inactive');
      var last = document.createElement('SPAN');
      last.innerHTML = this._totalPages;
      this._container.appendChild(more2);
      this._evtIds.push(Evts.addEvent('click', last, function () {
        return _this3._clickedCB(_this3._totalPages);
      }));
      this._container.appendChild(last);
    }
  }]);
  return Pager;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pager);

/***/ }),

/***/ "./front/js/utils/Shortcut.js":
/*!************************************!*\
  !*** ./front/js/utils/Shortcut.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Shortcut = /*#__PURE__*/function () {
  /** @summary <h1>JavaScript keyboard shortcut singleton to handle key strokes</h1>
   * @author Arthur Beaulieu
   * @since September 2020
   * @description <blockquote>The Shortcut class provides a singleton object to set custom keyboard shortcuts for
   * web application. It allows to register key shortcuts using a string notation (ie. <code>Ctrl+A</code>). It also exposes
   * several methods to pause/resume the callback for a given event or for all of them. With the key string, you must provide
   * a callback function to react to this shortcut fire event. That's all folks! For source code, please go to
   * <a href="https://github.com/ArthurBeaulieu/Shortcut.js" alt="shortcut-js">Shortcut.js</a></blockquote>
   * @param {object} [options={}] - The Shortcut singleton options, not mandatory
   * @param {string} [options.keyEvent=keydown] - The key event to react from
   * @param {boolean} [options.autoRepeat=true] - For <code>keydown</code> and <code>keypress</code>, auto repeat event if key is held on pushed
   * @returns {object} - The Shortcut singleton instance */
  function Shortcut() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Shortcut);
    // If an instance of Shortcut already exists, we just return it
    if (Shortcut.instance) {
      return Shortcut.instance;
    }
    // Set object instance
    Shortcut.instance = this;
    // Prevent wrong type for arguments, fallback according to attribute utility
    if (typeof options.keyEvent !== 'string' || ['keydown', 'keyup', 'keypress'].indexOf(options.keyEvent) === -1) {
      options.keyEvent = 'keydown';
    }
    if (typeof options.autoRepeat !== 'boolean') {
      options.autoRepeat = true;
    }
    if (typeof options.noPrevention !== 'boolean') {
      options.noPrevention = false;
    }
    /** @private
     * @member {string} - Key event to use on keyboard event listener */
    this._keyEvent = options.keyEvent;
    /** @private
     * @member {boolean} - The auto repeat of an event when key is held on push */
    this._autoRepeat = options.autoRepeat;
    /** @private
     * @member {boolean} - Do not call prevent default on key event flag */
    this._noPrevention = options.noPrevention;
    /** @private
     * @member {object[]} - Single key saved shortcuts */
    this._singleKey = [];
    /** @private
     * @member {object[]} - Multi keys saved shortcuts */
    this._multiKey = [];
    /** @public
     * @member {string} - Component version */
    this.version = '1.0.3';
    // Save singleton scope for testShortcuts method to be able to properly remove event on demand
    this._testShortcuts = this._testShortcuts.bind(this);
    // Retun singleton to the caller
    return this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof Shortcut
   * @description <blockquote>Shortcut destructor. Will delete singleton instance, its events and its properties.</blockquote> */
  _createClass(Shortcut, [{
    key: "destroy",
    value: function destroy() {
      var _this = this;
      // Remove all existing eventListener
      this._removeEvents();
      // Delete object attributes
      Object.keys(this).forEach(function (key) {
        delete _this[key];
      });
      // Clear singleton instance
      Shortcut.instance = null;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------  SHORTCUT JS INTERN METHODS  ------------------------------------------  */
    /*                                                                                                                  */
    /*  The following methods are made to abstract the event listeners from the JavaScript layer, so you can easily     */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _addEvents
     * @private
     * @memberof Shortcut
     * @description <blockquote>Internal private method to subscribe to DOM key stroke event, depending on which
     * key event was set in constructor, or using the <code>updateKeyEvent()</code> method. The key event is then
     * calling back the <code>_testShortcuts()</code> method to check if any event has to be fired.</blockquote> */
  }, {
    key: "_addEvents",
    value: function _addEvents() {
      // Listen to keyboard's event
      document.addEventListener(this._keyEvent, this._testShortcuts);
    }

    /** @method
     * @name _removeEvents
     * @private
     * @memberof Shortcut
     * @description <blockquote>Internal private method to revoke DOM subscribtion to a key stroke event, depending on which
     * key event was set in constructor, or using the <code>updateKeyEvent()</code> method. The key event won't then
     * call back the <code>_testShortcuts()</code> method.</blockquote> */
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      // Revoke listener on keyboard's event
      document.removeEventListener(this._keyEvent, this._testShortcuts);
    }

    /** @method
     * @name _testShortcuts
     * @private
     * @memberof Shortcut
     * @description <blockquote>This method needs to be called when a key event has been detected. It takes as a parameters
     * the JavaScript event object, which contains several, required, information. It will then crawl the registered shortcuts to
     * check if one needs to be fired and call back the application. It handle both single key and multi key shortcuts. Finally,
     * it will not fire any event if the event <code>repeat</code> flag is at <code>true</code>, and the singleton is not in
     * auto repeat event.</blockquote>
     * @param {event} event - The keyboard event (<code>keydown</code>, <code>keypress</code> and <code>keyup</code>) */
  }, {
    key: "_testShortcuts",
    value: function _testShortcuts(event) {
      // Avoid auto repeat event if singleton is configured this way
      if (this._autoRepeat === false && event.repeat === true) {
        event.preventDefault();
        return;
      }
      // Analyze event to check proper shortcut array
      if (event.ctrlKey || event.altKey || event.shiftKey) {
        // Multi key shortcut
        this._multiKeyEvent(event);
      } else {
        // Single key shortcut
        this._singleKeyEvent(event);
      }
    }

    /** @method
     * @name _singleKeyEvent
     * @private
     * @memberof Shortcut
     * @description <blockquote>This method will parse all single key events registered in its internal attributes, and will
     * fire the call back if its registered key matches the event key. It also prevent defaults on the event only if a match
     * is found to keep browser behavior in case there is no regstered shortcut.</blockquote>
     * @param {event} event - The keyboard event (<code>keydown</code>, <code>keypress</code> and <code>keyup</code>) */
  }, {
    key: "_singleKeyEvent",
    value: function _singleKeyEvent(event) {
      // Iterate over registered single key shortcut to fire it if one matches
      for (var i = 0; i < this._singleKey.length; ++i) {
        // Check that event is active and flatten key string to compare
        if (!this._singleKey[i].pause && event.key.toLowerCase() === this._singleKey[i].keyString.toLowerCase()) {
          if (this._noPrevention === false) {
            event.preventDefault();
          }
          this._singleKey[i].fire(this);
        }
      }
    }

    /** @method
     * @name _multiKeyEvent
     * @private
     * @memberof Shortcut
     * @description <blockquote>This method will parse all multi keys events registered in its internal attributes, and will
     * fire the call back if its registered key matches the event key. Multi key events are made using ctrl, alt and shift modifiers.
     * It also prevent defaults on the event only if a match is found to keep browser behavior in case there is no regstered
     * shortcut.</blockquote>
     * @param {event} event - The keyboard event (<code>keydown</code>, <code>keypress</code> and <code>keyup</code>) */
  }, {
    key: "_multiKeyEvent",
    value: function _multiKeyEvent(event) {
      for (var i = 0; i < this._multiKey.length; ++i) {
        // Handy shortcut variable to work with
        var sh = this._multiKey[i];
        // Check that event is active and flatten key string to compare
        if (!sh.pause && event.key.toLowerCase() === sh.key) {
          switch (sh.modifierCount) {
            case 1:
              // 2 key strokes
              this.__multiKey2Keys(sh, event);
              break;
            case 2:
              // 3 key strokes
              this.__multiKey3Keys(sh, event);
              break;
            case 3:
              // 4 key strokes
              this.__multiKey4Keys(sh, event);
              break;
            default:
              break;
          }
        }
      }
    }
  }, {
    key: "__multiKey2Keys",
    value: function __multiKey2Keys(sh, event) {
      if (sh.modifiers.ctrlKey && event.ctrlKey || sh.modifiers.altKey && event.altKey || sh.modifiers.shiftKey && event.shiftKey) {
        if (this._noPrevention === false) {
          event.preventDefault();
        }
        sh.fire();
      }
    }
  }, {
    key: "__multiKey3Keys",
    value: function __multiKey3Keys(sh, event) {
      if (sh.modifiers.ctrlKey && event.ctrlKey && sh.modifiers.altKey && event.altKey || sh.modifiers.ctrlKey && event.ctrlKey && sh.modifiers.shiftKey && event.shiftKey || sh.modifiers.altKey && event.altKey && sh.modifiers.shiftKey && event.shiftKey) {
        if (this._noPrevention === false) {
          event.preventDefault();
        }
        sh.fire();
      }
    }
  }, {
    key: "__multiKey4Keys",
    value: function __multiKey4Keys(sh, event) {
      if (sh.modifiers.ctrlKey && event.ctrlKey && sh.modifiers.altKey && event.altKey && sh.modifiers.shiftKey && event.shiftKey) {
        if (this._noPrevention === false) {
          event.preventDefault();
        }
        sh.fire();
      }
    }

    /** @method
     * @name _getModifiersCount
     * @private
     * @memberof Shortcut
     * @description <blockquote>Shorthand method to count modifiers in a given shrotcut string. It uses regex that are
     * case insensitive to avoid multi testing (and because it's what this singleton do).</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event */
  }, {
    key: "_getModifiersCount",
    value: function _getModifiersCount(keyString) {
      // Build local modifiers count with regex
      var modifiers = {
        ctrlKey: /ctrl/i.test(keyString),
        altKey: /alt/i.test(keyString),
        shiftKey: /shift/i.test(keyString)
      };
      // Count modifiers that are set to true and update count with it
      return Object.values(modifiers).reduce(function (a, b) {
        return a + b;
      }, 0);
    }

    /** @method
     * @name _setAllPauseFlag
     * @private
     * @memberof Shortcut
     * @description <blockquote>Parse all registered event and make them listen or not to any key event.</blockquote>
     * @param {boolean} value - The state to set, to pause/resume all registered shortcuts */
  }, {
    key: "_setAllPauseFlag",
    value: function _setAllPauseFlag(value) {
      // Iterate over both arays to update pause flag on each registered shortcut
      for (var i = 0; i < this._singleKey.length; ++i) {
        this._setOnePauseFlag(this._singleKey[i].keyString, value);
      }
      for (var _i = 0; _i < this._multiKey.length; ++_i) {
        this._setOnePauseFlag(this._multiKey[_i].keyString, value);
      }
    }

    /** @method
     * @name _setOnePauseFlag
     * @private
     * @memberof Shortcut
     * @description <blockquote>Parse all registered event and make the one that matches the key string listen or not
     * to any key event.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event
     * @param {boolean} value - The state to set, to pause/resume all registered shortcuts */
  }, {
    key: "_setOnePauseFlag",
    value: function _setOnePauseFlag(keyString, value) {
      if (this._getModifiersCount(keyString) === 0) {
        for (var i = 0; i < this._singleKey.length; ++i) {
          if (this._singleKey[i].keyString === keyString) {
            this._singleKey[i].pause = value;
          }
        }
      } else {
        for (var _i2 = 0; _i2 < this._multiKey.length; ++_i2) {
          if (this._multiKey[_i2].keyString === keyString) {
            this._multiKey[_i2].pause = value;
          }
        }
      }
    }

    /** @method
     * @name _shortcutAlreadyExist
     * @private
     * @memberof Shortcut
     * @description <blockquote>Internal method to test if a given key string isn't already related to a registered
     * shortcut.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event
     * @returns {boolean} - The existence state of given key string */
  }, {
    key: "_shortcutAlreadyExist",
    value: function _shortcutAlreadyExist(keyString) {
      // Parse single or multi shortcuts depending on modifiers count to find maching one
      if (this._getModifiersCount(keyString) === 0) {
        for (var i = 0; i < this._singleKey.length; ++i) {
          if (this._singleKey[i].keyString === keyString) {
            return true;
          }
        }
      } else {
        for (var _i3 = 0; _i3 < this._multiKey.length; ++_i3) {
          if (this._multiKey[_i3].keyString === keyString) {
            return true;
          }
        }
      }
      // False by default to allow the shortcut creation
      return false;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------  SHORTCUT JS PUBLIC METHOD  -------------------------------------------  */
    /*                                                                                                                  */
    /*  The following methods are made to register shortcut, to remove them, or to pause/resume all shortcuts.          */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name register
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method is the entry point to register a shortcut. The caller must send the key
     * comibination as a string (ie. <code>F</code>, <code>Ctrl+shift+r</code>). The Shortcut singleton is case insensitive,
     * which means you can write it with the case you want. For modifiers, please use <code>ctrl</code>, <code>alt</code> and
     * <code>shift</code> strings. Then the given callback will be called each time the key stroke matches the shortcut key
     * string. For fine tuning on auto repeat, see constructor options.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event
     * @param {function} fire - The callback to attach to the shortcut */
  }, {
    key: "register",
    value: function register(keyString, fire) {
      if (typeof keyString !== 'string' || typeof fire !== 'function') {
        return;
      }
      if (!this._shortcutAlreadyExist(keyString)) {
        // First shortcut to be registered ; listen to keyboard key down event
        if (this._singleKey.length === 0 && this._multiKey.length === 0) {
          this._addEvents();
        }
        // New shortcut internals
        var shortcut = {
          keyString: keyString,
          modifiers: {
            // Regex insensitive to string case to search for modifiers
            ctrlKey: /ctrl/i.test(keyString),
            altKey: /alt/i.test(keyString),
            shiftKey: /shift/i.test(keyString)
          },
          modifierCount: this._getModifiersCount(keyString),
          key: keyString.toLowerCase().replace('ctrl', '').replace('alt', '').replace('shift', '').replaceAll(' ', '').replaceAll('+', ''),
          paused: false,
          fire: fire
        };
        // Save shortcut to its appropriated array
        if (this._getModifiersCount(keyString) === 0) {
          this._singleKey.push(shortcut);
        } else {
          this._multiKey.push(shortcut);
        }
      }
    }

    /** @method
     * @name remove
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will remove a registered shortcut using its key string.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event */
  }, {
    key: "remove",
    value: function remove(keyString) {
      if (typeof keyString !== 'string') {
        return;
      }
      // Reverse parsing to ensure proper slicing of shortcut arrays
      if (this._getModifiersCount(keyString) === 0) {
        for (var i = this._singleKey.length - 1; i >= 0; i--) {
          if (this._singleKey[i].keyString === keyString) {
            this._singleKey.splice(i, 1);
          }
        }
      } else {
        for (var _i4 = this._multiKey.length - 1; _i4 >= 0; _i4--) {
          if (this._multiKey[_i4].keyString === keyString) {
            this._multiKey.splice(_i4, 1);
          }
        }
      }
      // In case there are no remaining shortcut, we remove listener on keyboard's event
      if (this._singleKey.length === 0 && this._multiKey.length === 0) {
        this._removeEvents();
      }
    }

    /** @method
     * @name removeAll
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will remove all registered shortcut events.</blockquote> */
  }, {
    key: "removeAll",
    value: function removeAll() {
      // Clear all saved shortcut
      this._singleKey = [];
      this._multiKey = [];
      // Remove listener on keyboard's key down
      this._removeEvents();
    }

    /** @method
     * @name pause
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will pause a registered shortcut using its key string. The
     * shortcut won't then fire the callback when the shortcut is used.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event */
  }, {
    key: "pause",
    value: function pause(keyString) {
      if (typeof keyString !== 'string') {
        return;
      }
      this._setOnePauseFlag(keyString, true);
    }

    /** @method
     * @name resume
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will resume a registered shortcut using its key string. The
     * shortcut will then fire the callback when the shortcut is used.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event */
  }, {
    key: "resume",
    value: function resume(keyString) {
      if (typeof keyString !== 'string') {
        return;
      }
      this._setOnePauseFlag(keyString, false);
    }

    /** @method
     * @name pauseAll
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will pause all registered shortcuts.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event */
  }, {
    key: "pauseAll",
    value: function pauseAll() {
      this._setAllPauseFlag(true);
    }

    /** @method
     * @name resumeAll
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will resume all registered shortcuts.</blockquote>
     * @param {string} keyString - The raw shortcut string that is defined when registering an event */
  }, {
    key: "resumeAll",
    value: function resumeAll() {
      this._setAllPauseFlag(false);
    }

    /** @method
     * @name updateKeyEvent
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will update the singleton's listener for a given keyboard event.</blockquote>
     * @param {string} keyEvent - The key event to apply to the DOM listener in <code>keydown</code>, <code>keypress</code> and <code>keyup</code> */
  }, {
    key: "updateKeyEvent",
    value: function updateKeyEvent(keyEvent) {
      // Prevent wrong type or un-existing key event
      if (typeof keyEvent !== 'string' || ['keydown', 'keyup', 'keypress'].indexOf(keyEvent) === -1) {
        keyEvent = 'keydown';
      }
      // Key event actual update
      this._removeEvents(); // Remove previous key event value and shortcut listener
      this._keyEvent = keyEvent; // Update private attribute
      this._addEvents(); // Restore shortcut listening with knew key event
    }

    /** @method
     * @name updateAutoRepeat
     * @public
     * @memberof Shortcut
     * @description <blockquote>This method will update the auto repeat flag that makes an event continuously callback
     * when the key is hed pushed.</blockquote>
     * @param {boolean} autoRepeat - The auto repeat state to set */
  }, {
    key: "updateAutoRepeat",
    value: function updateAutoRepeat(autoRepeat) {
      // Prevent wrong type for input
      if (typeof autoRepeat !== 'boolean') {
        autoRepeat = true;
      }
      // Update private attribute
      this._autoRepeat = autoRepeat;
    }
  }]);
  return Shortcut;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Shortcut);

/***/ }),

/***/ "./front/js/utils/Utils.js":
/*!*********************************!*\
  !*** ./front/js/utils/Utils.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Utils = /*#__PURE__*/function () {
  function Utils() {
    _classCallCheck(this, Utils);
    // If an instance of Utils already exists, we just return it
    if (Utils.instance) {
      return Utils.instance;
    }
    // Set object instance
    Utils.instance = this;
    return this;
  }
  _createClass(Utils, [{
    key: "parseHTMLFragment",
    value: function parseHTMLFragment(htmlString) {
      var parser = new DOMParser();
      var dom = parser.parseFromString(htmlString, 'text/html');
      return dom.body.firstChild;
    }
  }, {
    key: "removeAllObjectKeys",
    value: function removeAllObjectKeys(object) {
      Object.keys(object).forEach(function (key) {
        delete object[key];
      });
    }
  }, {
    key: "clearAllEvents",
    value: function clearAllEvents(evtIds) {
      if (evtIds.length > 0 && Evts) {
        for (var i = 0; i < evtIds.length; ++i) {
          Evts.removeEvent(evtIds);
        }
      }
    }
  }, {
    key: "appendLinkInHead",
    value: function appendLinkInHead(path) {
      if (path) {
        /* Search for existing link with same path */
        var alreadyExists = false;
        for (var i = 0; i < document.head.children.length; ++i) {
          var meta = document.head.children[i];
          if (meta.nodeName === 'LINK' && meta.href === "".concat(window.location).concat(path)) {
            alreadyExists = true;
            break;
          }
        }
        /* Only append style if not already existing in document header */
        if (!alreadyExists) {
          var link = document.createElement('LINK');
          link.rel = 'stylesheet';
          link.href = path;
          document.head.appendChild(link);
        }
      }
    }

    /** @method
     * @name secondsToTimecode
     * @public
     * @memberof Utils
     * @author Arthur Beaulieu
     * @since September 2018
     * @description Convert a time in seconds into a time DD HH MM SS
     * @param {number} time - The time in seconds to convert
     * @return {string} - The output string according to time duration */
  }, {
    key: "secondsToTimecode",
    value: function secondsToTimecode(time) {
      var transformedTime = {
        d: 0,
        h: 0,
        m: 0,
        s: 0
      };

      // Cutting total seconds
      transformedTime.d = Math.floor(time / 86400);
      transformedTime.h = Math.floor((time - transformedTime.d * 86400) / 3600);
      transformedTime.m = Math.floor((time - transformedTime.d * 86400 - transformedTime.h * 3600) / 60);
      transformedTime.s = Math.floor(time - transformedTime.d * 86400 - transformedTime.h * 3600 - transformedTime.m * 60);

      // Adding an extra 0 for values inferior to 10
      if (transformedTime.d < 10) {
        transformedTime.d = "0".concat(transformedTime.d);
      }
      if (transformedTime.h < 10) {
        transformedTime.h = "0".concat(transformedTime.h);
      }
      if (transformedTime.m < 10) {
        transformedTime.m = "0".concat(transformedTime.m);
      }
      if (transformedTime.s < 10) {
        transformedTime.s = "0".concat(transformedTime.s);
      }

      // Formatting output
      if (transformedTime.d > 0) {
        return "".concat(transformedTime.d, "d ").concat(transformedTime.h, "h ").concat(transformedTime.m, "m ").concat(transformedTime.s, "s");
      } else if (transformedTime.h > 0) {
        return "".concat(transformedTime.h, ":").concat(transformedTime.m, ":").concat(transformedTime.s);
      } else {
        return "".concat(transformedTime.m, ":").concat(transformedTime.s);
      }
    }
  }, {
    key: "formatDate",
    value: function formatDate(string) {
      var date = new Date(string);
      var locale = navigator.languages[0] || navigator.language;
      return new Intl.DateTimeFormat(locale, {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }).format(date);
    }

    /**
     * @method
     * @name precisionRound
     * @public
     * @memberof Utils
     * @author Arthur Beaulieu
     * @since September 2018
     * @description
     * <blockquote>
     * Do a Math.round with a given precision (ie amount of integers after the coma). 
     * </blockquote>
     * @param {Nunmber} value - The value to precisely round (> 0)
     * @param {Number} precision - The number of integers after the coma (> 0)
     * @return {Number} - The rounded value 
     **/
  }, {
    key: "precisionRound",
    value: function precisionRound(value, precision) {
      if (typeof value !== 'number' || typeof precision !== 'number') {
        return -1;
      }
      var multiplier = Math.pow(10, precision || 0);
      return Math.round(value * multiplier) / multiplier;
    }
  }, {
    key: "getElementsByText",
    value: function getElementsByText(str, el) {
      var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'a';
      return Array.prototype.slice.call(el.getElementsByTagName(tag)).filter(function (el) {
        return el.textContent.trim() === str.trim();
      });
    }
  }, {
    key: "getAverageRGB",
    value: function getAverageRGB(imgEl) {
      var defaultRGB = {
        r: 0,
        g: 0,
        b: 0
      };
      var canvas = document.createElement('canvas');
      var context = canvas.getContext ? canvas.getContext('2d') : null;
      if (!context) {
        return defaultRGB;
      }
      var blockSize = 5; // Distance between analysed pixels
      var rgb = {
        r: 0,
        g: 0,
        b: 0
      };
      var imgData = null;
      var width = 0;
      var height = 0;
      var count = 0;
      height = canvas.height = imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;
      width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;
      context.drawImage(imgEl, 0, 0);
      try {
        imgData = context.getImageData(0, 0, width, height);
      } catch (e) {
        return defaultRGB; // Probably tainted canvas
      }

      var i = -4;
      while ((i += blockSize * 4) < imgData.data.length) {
        ++count;
        rgb.r += imgData.data[i];
        rgb.g += imgData.data[i + 1];
        rgb.b += imgData.data[i + 2];
      }

      // ~~ used to floor values
      rgb.r = ~~(rgb.r / count);
      rgb.g = ~~(rgb.g / count);
      rgb.b = ~~(rgb.b / count);
      return rgb;
    }
  }, {
    key: "getRelativeLuminance",
    value: function getRelativeLuminance(c) {
      return 0.2126 * (c.r / 255) + 0.7152 * (c.g / 255) + 0.0722 * (c.r / 255);
    }
  }, {
    key: "getImageLightness",
    value: function getImageLightness(img) {
      // create canvas
      var canvas = document.createElement("canvas");
      var ctx = canvas.getContext('2d');
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      var data = imgData.data;
      var r = 0;
      var g = 0;
      var b = 0;
      var avg = 0;
      var colorSum = 0;
      for (var x = 0; x < data.length; x += 4) {
        r = data[x];
        g = data[x + 1];
        b = data[x + 2];
        avg = Math.floor((r + g + b) / 3);
        colorSum += avg;
      }
      return Math.floor(colorSum / (img.width * img.height)) / 255;
    }
  }, {
    key: "lightenDarkenColor",
    value: function lightenDarkenColor(color, amount) {
      // Test that caller sent mandatory arguments
      if (color === undefined || color === null || amount === undefined || amount === null) {
        return new Error('Utils.lightenDarkenColor : Missing arguments color or amount');
      }
      // Test that color is an hex code
      if (!/^[a-fA-F0-9]+$/i.test(color)) {
        color = this.rgbToHex(color);
      }
      // Pound color value to remove # char and memorize it had one
      var usePound = false;
      if (color[0] === '#') {
        color = color.slice(1);
        usePound = true;
      }
      // Check that alpha value is properly bounded to [0, 1]
      if (amount < -100 || amount > 100) {
        return new Error('Utils.lightenDarkenColor : Amount is not a valid float in [-100, 100]');
      }
      if (amount === 0) {
        return (usePound ? '#' : '') + color.toLowerCase();
      }
      if (amount > 0) {
        amount += 16;
      } else {
        amount -= 16;
      }
      // Perform method purpose
      var num = parseInt(color, 16);
      // Red channel bounding
      var r = (num >> 16) + amount;
      if (r > 255) {
        r = 255;
      } else if (r < 0) {
        r = 0;
      }
      // Blue channel bounding
      var b = (num >> 8 & 0x00FF) + amount;
      if (b > 255) {
        b = 255;
      } else if (b < 0) {
        b = 0;
      }
      // Green channel bounding
      var g = (num & 0x0000FF) + amount;
      if (g > 255) {
        g = 255;
      } else if (g < 0) {
        g = 0;
      }
      // Format returned hex value
      return (usePound ? '#' : '') + (g | b << 8 | r << 16).toString(16);
    }
  }, {
    key: "hexToRgb",
    value: function hexToRgb(c) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(c);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : null;
    }
  }, {
    key: "rgbToHex",
    value: function rgbToHex(c) {
      var componentToHex = function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0".concat(hex) : hex;
      };
      return "#".concat(componentToHex(c.r)).concat(componentToHex(c.g)).concat(componentToHex(c.b));
    }
  }]);
  return Utils;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utils);

/***/ }),

/***/ "./front/js/utils/enum/HttpStatusCode.js":
/*!***********************************************!*\
  !*** ./front/js/utils/enum/HttpStatusCode.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Object.freeze({
  /* The HTTP call worked properly. */
  OK: 200,
  /* The url wasn't found. */
  NOT_FOUND: 404,
  /* The url cannot be accessed. */
  FORBIDDEN: 403,
  /* The server encountered a problem. */
  INTERNAL_ERROR: 500
}));

/***/ }),

/***/ "./front/js/utils/enum/PlayerPlaybackMode.js":
/*!***************************************************!*\
  !*** ./front/js/utils/enum/PlayerPlaybackMode.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Object.freeze({
  NORMAL: 0,
  SHUFFLE: 1,
  RANDOM: 2
}));

/***/ }),

/***/ "./front/js/utils/enum/PlayerRepeatMode.js":
/*!*************************************************!*\
  !*** ./front/js/utils/enum/PlayerRepeatMode.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Object.freeze({
  NO_REPEAT: 0,
  REPEAT_ONE: 1,
  REPEAT_ALL: 2
}));

/***/ }),

/***/ "./front/js/utils/enum/ProgressControl.js":
/*!************************************************!*\
  !*** ./front/js/utils/enum/ProgressControl.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ProgressControl = Object.freeze({
  SMALL_JUMP: 1,
  // Jump over 1 second of the track
  BIG_JUMP: 10,
  // Jump over 10 seconds of the track.
  HUGE_JUMP: 25 // Jump over 25 senconds of the track.
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProgressControl);

/***/ }),

/***/ "./front/js/utils/enum/VolumeControl.js":
/*!**********************************************!*\
  !*** ./front/js/utils/enum/VolumeControl.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The enum is used to offset the value of the volume bar.
 * @type {Readonly<{BIG: number, SMALL: number, HUGE: number}>}
 */
var VolumeControl = Object.freeze({
  SMALL: 0.01,
  // 1% volume update
  BIG: 0.1,
  // 10% volume update
  HUGE: 0.25 // 25% volume update
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VolumeControl);

/***/ }),

/***/ "./front/js/view/UserInterface.js":
/*!****************************************!*\
  !*** ./front/js/view/UserInterface.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _element_Aside__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element/Aside */ "./front/js/view/element/Aside.js");
/* harmony import */ var _element_TopBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element/TopBar */ "./front/js/view/element/TopBar.js");
/* harmony import */ var _element_NavBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element/NavBar */ "./front/js/view/element/NavBar.js");
/* harmony import */ var _element_Scene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./element/Scene */ "./front/js/view/element/Scene.js");
/* harmony import */ var _scene_utils_ViewHistory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scene/utils/ViewHistory */ "./front/js/view/scene/utils/ViewHistory.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





var UserInterface = /*#__PURE__*/function () {
  /** @summary <h1>ManaZeak user interface controller</h1>
   * @author Arthur Beaulieu
   * @since September 2020
   * @description <blockquote>This class is made to handle all interactions between UI and Mzk controller. It is in
   * charge to load views and to append them into the DOM, but also to make them interactive with the app context.</blockquote> */
  function UserInterface() {
    _classCallCheck(this, UserInterface);
    /** @private
     * @member {object} - The aside controller */
    this._aside = new _element_Aside__WEBPACK_IMPORTED_MODULE_0__["default"]();
    /** @private
     * @member {object} - The scene controller */
    this._scene = new _element_Scene__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this._topBar = new _element_TopBar__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this._navBar = new _element_NavBar__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this._history = new _scene_utils_ViewHistory__WEBPACK_IMPORTED_MODULE_4__["default"]();
    this._wrapper = document.getElementById('scene-wrapper');
    /** @private
     * @member {object} - Home button icon */
    this._homeButton = document.getElementById('mzk-home-icon');
    /** @private
     * @member {object} - The DOM loading overlay to use in transitions */
    this._loadingOverlay = null;
    // Build loading overlay and add its style class
    this._loadingOverlay = document.getElementById('mzk-loading-overlay');
    // The HTML comes with the loading overlay visible
    this.stopLoading();
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  -------------------------------------------  VIEW MANIPULATION  ----------------------------------------------  */
  /*                                                                                                                  */
  /*  These methods will set the single page with a new view, while properly cleaning the previously used one.        */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name setSceneView
   * @public
   * @memberof UserInterface
   * @description <blockquote>This method will try to build a view according to the given options. If options are
   * invalid, the Main Page will be loaded instead. It handle the transition with previous view to put a loading
   * overlay while loading the new view.</blockquote>
   * @param {object} options - The options to build the view from
   * @param {object} options.name - The view name, must match one in the ViewFactory class
   * @return {promise} - The action promise */
  _createClass(UserInterface, [{
    key: "setSceneView",
    value: function setSceneView(options) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        _this.startLoading().then(_this._updateHistory.bind(_this, options)).then(_this._updateHomeIcon.bind(_this, options)).then(_this._scene.buildView.bind(_this._scene, options)).then(_this._setTopBarView.bind(_this, options)).then(resolve)["catch"](reject)["finally"](_this.stopLoading.bind(_this, options)); // Clear loading overlay whatever happens
      });
    }
  }, {
    key: "setModal",
    value: function setModal(options) {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        _this2._scene.buildModal(options).then(resolve)["catch"](reject);
      });
    }
  }, {
    key: "getFragment",
    value: function getFragment(url) {
      // The loading overlay must be handled caller, since fragment is only a part of viewport
      return new Promise(function (resolve, reject) {
        mzk.kom.getText(url).then(function (fragment) {
          resolve(fragment);
        })["catch"](function () {
          Logger.raise('F_FRAGMENT_GET_ERROR');
          reject();
        });
      });
    }
  }, {
    key: "previousHistoryView",
    value: function previousHistoryView() {
      var view = this._history.getPreviousView();
      if (view !== null) {
        mzk.setView(view);
      }
    }
  }, {
    key: "nextHistoryView",
    value: function nextHistoryView() {
      var view = this._history.getNextView();
      if (view !== null) {
        mzk.setView(view);
      }
    }
  }, {
    key: "processLogFromServer",
    value: function processLogFromServer(errors) {
      if (errors && errors.length > 0) {
        for (var i = 0; i < errors.length; ++i) {
          Logger.raise(errors[i]);
        }
      }
    }
  }, {
    key: "_updateHistory",
    value: function _updateHistory(options) {
      this._history.addView(options);
    }
  }, {
    key: "_updateHomeIcon",
    value: function _updateHomeIcon(options) {
      var _this3 = this;
      return new Promise(function (resolve) {
        if (options.name === 'MainPage') {
          _this3._homeButton.src = 'static/img/actions/random-roll.svg';
        } else if (_this3._homeButton.src !== 'static/img/navigation/home.svg') {
          _this3._homeButton.src = 'static/img/navigation/home.svg';
        }
        resolve();
      });
    }
  }, {
    key: "_setTopBarView",
    value: function _setTopBarView(options) {
      var _this4 = this;
      return new Promise(function (resolve) {
        _this4._topBar.setView(Object.assign({
          displayName: _this4._scene.view.getDisplayName()
        }, options));
        resolve();
      });
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ----------------------------------------  LOADING OVERLAY METHODS  -------------------------------------------  */
    /*                                                                                                                  */
    /*  These methods add/remove the loading overlay on top of elements. It is meant to be used when switching view.    */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name startLoading
     * @public
     * @memberof UserInterface
     * @description <blockquote>The start loading method will add an overlay on the whole page that has a css animation.</blockquote>
     * @return {promise} - The action promise */
  }, {
    key: "startLoading",
    value: function startLoading() {
      var _this5 = this;
      return new Promise(function (resolve) {
        if (!document.body.contains(_this5._loadingOverlay)) {
          document.body.appendChild(_this5._loadingOverlay);
        }
        requestAnimationFrame(resolve);
      });
    }

    /** @method
     * @name startLoading
     * @public
     * @memberof UserInterface
     * @description <blockquote>The stop loading method will remove the overlay on the page.</blockquote>
     * @return {promise} - The action promise */
  }, {
    key: "stopLoading",
    value: function stopLoading(options) {
      var _this6 = this;
      return new Promise(function (resolve) {
        if (options && options.keepLoading === true) {
          resolve();
          return;
        }
        if (document.body.contains(_this6._loadingOverlay)) {
          document.body.removeChild(_this6._loadingOverlay);
        }
        requestAnimationFrame(resolve);
      });
    }

    /* Playback */
  }, {
    key: "changeTrack",
    value: function changeTrack(track) {
      if (track) {
        this._topBar.setTrack(track, mzk.ctrl.playObject);
        this._navBar.setQueuedTracks(mzk.ctrl.queuedTracks);
        this._navBar.setQueuedPlayObject(mzk.ctrl.playObject);
        this._navBar.updateMoodbar(track.mood);
        this.setPlay(true);
        this.setPageTitle("".concat(track.artist, " \u2013 ").concat(track.title));
      }
    }
  }, {
    key: "setPlay",
    value: function setPlay(playing) {
      if (mzk.ctrl.playingId !== -1) {
        // Only set play if payer is indeed playing
        if (!this._navBar.progressBar.isActive) {
          this._navBar.progressBar.activate();
        }
        this._navBar.updatePlayButton(playing);
      } else if (this._scene.view.playFirstTrack) {
        this._scene.view.playFirstTrack();
      } else {
        this._navBar.progressBar.deactivate();
      }
    }
  }, {
    key: "stopPlayback",
    value: function stopPlayback() {
      this._topBar.clearTrack();
      this._navBar.progressBar.deactivate();
      this._navBar.updatePlayButton(false);
      this.setPageTitle("Mzk | Welcome!");
      if (this._scene.view.stopPlayback) {
        this._scene.view.stopPlayback();
      }
    }
  }, {
    key: "queue",
    value: function queue(queuedTracks) {
      this._navBar.setQueuedTracks(queuedTracks);
    }
  }, {
    key: "getTrackById",
    value: function getTrackById(id) {
      if (this._scene.view.getTrackById) {
        return this._scene.view.getTrackById(id);
      }
    }
  }, {
    key: "setRepeatMode",
    value: function setRepeatMode(repeatMode) {
      this._navBar.setRepeatMode(repeatMode);
    }
  }, {
    key: "setPlaybackMode",
    value: function setPlaybackMode(playbackMode) {
      this._navBar.setPlaybackMode(playbackMode);
    }
  }, {
    key: "setMute",
    value: function setMute(player) {
      this._navBar.volumeBar.updateVolume(player.muted, player.volume);
    }
  }, {
    key: "setVolume",
    value: function setVolume(player) {
      this._navBar.volumeBar.updateVolume(player.muted, player.volume);
    }
  }, {
    key: "setProgress",
    value: function setProgress(progress) {
      this._navBar.progressBar.setProgress(progress);
    }
  }, {
    key: "setPlaybackRate",
    value: function setPlaybackRate(rate) {
      this._navBar.playbackRateContext.updatePlaybackRate(rate);
    }
  }, {
    key: "setPageTitle",
    value: function setPageTitle(string) {
      document.title = string;
    }
  }, {
    key: "setGradientColor",
    value: function setGradientColor(rgb) {
      this._wrapper.style.backgroundImage = "linear-gradient(rgb(".concat(rgb.r, ", ").concat(rgb.g, ", ").concat(rgb.b, "),var(--color-bg-darker))");
    }
  }, {
    key: "restoreGradientColor",
    value: function restoreGradientColor() {
      this._wrapper.style.backgroundImage = "linear-gradient(var(--color-bg-lighter),var(--color-bg-darker))";
    }
  }, {
    key: "getViewDisplayName",
    value: function getViewDisplayName() {
      return this._scene.view.getDisplayName();
    }
  }, {
    key: "clearQueueTracks",
    value: function clearQueueTracks() {
      this.updateQueueNumber(0);
    }
  }, {
    key: "updateQueueNumber",
    value: function updateQueueNumber(length) {
      this._navBar.updateQueueNumber(length);
    }
  }]);
  return UserInterface;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UserInterface);

/***/ }),

/***/ "./front/js/view/context/ContextMenu.js":
/*!**********************************************!*\
  !*** ./front/js/view/context/ContextMenu.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ContextMenu = /*#__PURE__*/function () {
  function ContextMenu(options) {
    _classCallCheck(this, ContextMenu);
    this._target = options.target;
    this._url = "/fragment/context/".concat(options.name, "/");
    this._overlay = {};
    this._dom = {};
    this._evtIds = [];
    this._fetchTemplate();
  }
  _createClass(ContextMenu, [{
    key: "destroy",
    value: function destroy() {
      var _this$_overlay;
      if ((_this$_overlay = this._overlay) !== null && _this$_overlay !== void 0 && _this$_overlay.innerHTML && document.body.contains(this._overlay)) {
        document.body.removeChild(this._overlay);
        this._overlay.removeEventListener('click', this._viewportClicked, false);
        window.removeEventListener('resize', this.close.bind(this), false);
      }
    }

    /* TODO destroy and proper event handling */
  }, {
    key: "_fetchTemplate",
    value: function _fetchTemplate() {
      var _this = this;
      mzk.kom.getText(this._url).then(function (response) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(response, 'text/html');
        _this._overlay = doc.getElementsByClassName('context-transparent-overlay')[0];
        _this._dom = doc.getElementsByClassName(_this._overlay.children[0].className)[0];
        _this._events();
        _this.setActions(doc);
        if (_this._url.indexOf('modal') !== -1) {
          _this.open();
        }
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      this._viewportClicked = this._viewportClicked.bind(this);
    }
  }, {
    key: "_viewportClicked",
    value: function _viewportClicked(event) {
      event.stopImmediatePropagation();
      if (event.target === this._overlay) {
        this.close();
      }
    }
  }, {
    key: "open",
    value: function open(event, options) {
      if (this._open) {
        this._open(event, options);
      }
      document.body.appendChild(this._overlay);
      this._overlay.addEventListener('click', this._viewportClicked, false);
      window.addEventListener('resize', this.close.bind(this), false);
    }
  }, {
    key: "close",
    value: function close(event, options) {
      if (this._close) {
        this._close(event, options);
      }
      if (document.body.contains(this._overlay)) {
        document.body.removeChild(this._overlay);
        this._overlay.removeEventListener('click', this._viewportClicked, false);
        window.removeEventListener('resize', this.close.bind(this), false);
      }
    }
  }, {
    key: "isOpen",
    value: function isOpen() {
      return document.body.contains(this._overlay);
    }
  }, {
    key: "dom",
    get: function get() {
      return this._dom;
    }
  }]);
  return ContextMenu;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ContextMenu);

/***/ }),

/***/ "./front/js/view/context/PlaybackRateContext.js":
/*!******************************************************!*\
  !*** ./front/js/view/context/PlaybackRateContext.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ContextMenu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ContextMenu.js */ "./front/js/view/context/ContextMenu.js");
/* harmony import */ var _control_PlaybackRateBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../control/PlaybackRateBar */ "./front/js/view/control/PlaybackRateBar.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var PlaybackRateContext = /*#__PURE__*/function (_ContextMenu) {
  _inherits(PlaybackRateContext, _ContextMenu);
  var _super = _createSuper(PlaybackRateContext);
  function PlaybackRateContext(options) {
    var _this;
    _classCallCheck(this, PlaybackRateContext);
    _this = _super.call(this, options);
    _this._playbackRateBar = {};
    _this._animationLockId = -1;
    return _this;
  }
  _createClass(PlaybackRateContext, [{
    key: "setActions",
    value: function setActions(doc) {
      this._dom.container = doc.getElementsByClassName('playback-rate-context')[0];
    }
  }, {
    key: "_open",
    value: function _open(options) {
      var _this2 = this;
      if (this._animationLockId === -1) {
        this._animationLockId = 42;
        this._dom.container.style.right = "".concat(options.rightOffset, "px");
        this._target.appendChild(this._overlay);
        this._playbackRateBar = new _control_PlaybackRateBar__WEBPACK_IMPORTED_MODULE_1__["default"]();
        requestAnimationFrame(function () {
          _this2._dom.container.style.opacity = "1";
          requestAnimationFrame(function () {
            _this2._dom.container.style.transform = "translateY(0)";
          });
          setTimeout(function () {
            _this2._animationLockId = -1;
          }, 250);
        });
      }
    }
  }, {
    key: "_close",
    value: function _close() {
      var _this3 = this;
      if (this._target.contains(this._overlay) && this._animationLockId === -1) {
        // Animate playback rate arrival on UI
        requestAnimationFrame(function () {
          _this3._dom.container.style.opacity = "0";
          requestAnimationFrame(function () {
            _this3._dom.container.style.transform = "translateY(50px)";
          });
        });
        // Actually remove after approximately after translation of 250 ms
        this._animationLockId = setTimeout(function () {
          _this3._animationLockId = -1;
          _this3._playbackRateBar = null;
        }, 250);
      }
    }
  }, {
    key: "updatePlaybackRate",
    value: function updatePlaybackRate(percentage) {
      if (this._playbackRateBar !== null) {
        this._playbackRateBar.updatePlaybackRate(percentage, mzk.ctrl.player.playbackRate);
      }
    }
  }]);
  return PlaybackRateContext;
}(_ContextMenu_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaybackRateContext);

/***/ }),

/***/ "./front/js/view/context/QueueContext.js":
/*!***********************************************!*\
  !*** ./front/js/view/context/QueueContext.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ContextMenu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ContextMenu.js */ "./front/js/view/context/ContextMenu.js");
/* harmony import */ var _navigation_ScrollBar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../navigation/ScrollBar.js */ "./front/js/view/navigation/ScrollBar.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var QueueContext = /*#__PURE__*/function (_ContextMenu) {
  _inherits(QueueContext, _ContextMenu);
  var _super = _createSuper(QueueContext);
  function QueueContext(options) {
    var _this;
    _classCallCheck(this, QueueContext);
    _this = _super.call(this, options);
    // Contains all queued Track object in an array
    _this._queuedTracks = [];
    _this._playObject = {};
    _this._playObjectClickedId = -1;
    _this._scroll = null;
    _this._clearQueueButton = null;
    _this._emptyQueueDom = null;
    _this._emptyPlayObjectDom = null;
    return _this;
  }
  _createClass(QueueContext, [{
    key: "destroy",
    value: function destroy() {
      var _this$_scroll;
      _get(_getPrototypeOf(QueueContext.prototype), "destroy", this).call(this);
      (_this$_scroll = this._scroll) === null || _this$_scroll === void 0 ? void 0 : _this$_scroll.destroy();
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "setActions",
    value: function setActions(doc) {
      // Save emtpy DOMs from first template load
      this._emptyQueueDom = doc.getElementsByClassName('queue')[0].innerHTML;
      this._emptyPlayObjectDom = doc.getElementsByClassName('play-object')[0].innerHTML;
      this._clearQueueButton = doc.getElementsByClassName('queue-remove-all-tracks')[0];
      this._evtIds.push(Evts.addEvent('click', this._clearQueueButton, this._clearQueueTracksClicked, this));
    }
  }, {
    key: "_open",
    value: function _open(options) {
      // Position queue to the left and add to view
      this._dom.style.left = "".concat(options.leftOffset, "px");
      this._target.appendChild(this._overlay);
      this._updateQueueHeight();
    }
  }, {
    key: "_updateQueueHeight",
    value: function _updateQueueHeight() {
      // Update queue height depending on its content (track are build off screen, not handled in _open)
      var queue = this._dom.getElementsByClassName('queue')[0];
      // First case, empty queue or less than 6 tracks
      if (queue.innerHTML === this._emptyQueueDom) {
        queue.style.height = 'auto';
        return;
      }
      if (this._scroll === null) {
        if (queue.children.length < 6) {
          queue.style.height = 'auto';
          return;
        }
        // Otherwise, we fset a fixed height to queue then create a scrollbar
        queue.style.height = '40rem';
        this._scroll = new _navigation_ScrollBar_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: queue,
          style: {
            color: '#56D45B'
          }
        });
      } else if (queue.children[0].children[0].children.length < 6) {
        queue.style.height = 'auto';
      }
    }

    /* Tracks */
  }, {
    key: "updateQueuedTracks",
    value: function updateQueuedTracks(tracks) {
      var _this2 = this;
      var queue = this._dom.getElementsByClassName('queue')[0];
      if (tracks.length === 0) {
        this._restoreQueueEmptyDom();
      } else {
        queue.innerHTML = '';
        this._clearQueueButton.classList.remove('hidden');
        for (var i = 0; i < tracks.length; ++i) {
          this._buildQueuedTrackDom(tracks[i]).then(function (track) {
            queue.appendChild(track);
            _this2._evtIds.push(Evts.addEvent('click', track.querySelector('.queue-track-remove'), function () {
              mzk.ctrl.removeFromQueue(track.dataset.id);
              if (track.parentNode.children.length === 1) {
                _this2._restoreQueueEmptyDom();
                mzk.ui.updateQueueNumber(0);
              } else {
                mzk.ui.updateQueueNumber(track.parentNode.children.length - 1);
                track.remove();
              }
              _this2._updateQueueHeight();
            }, _this2));
          })["catch"](function (err) {
            return console.error(err);
          });
        }
      }
      setTimeout(function () {
        _this2._updateQueueHeight();
      }, 200);
    }
  }, {
    key: "_buildQueuedTrackDom",
    value: function _buildQueuedTrackDom(track) {
      return new Promise(function (resolve) {
        mzk.kom.getText('/fragment/entry/queuetrack/').then(function (response) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(response, 'text/html');
          var entry = doc.getElementsByClassName('queue-track-entry')[0];
          entry.querySelector('#queue-track-cover').src = track.cover;
          entry.querySelector('#queue-track-title').innerHTML = track.title;
          entry.querySelector('#queue-track-artist').innerHTML = track.artist;
          entry.querySelector('#queue-track-duration').innerHTML = track.duration;
          entry.dataset.id = track.id;
          resolve(entry);
        });
      });
    }
  }, {
    key: "_restoreQueueEmptyDom",
    value: function _restoreQueueEmptyDom() {
      var _this$_scroll2;
      (_this$_scroll2 = this._scroll) === null || _this$_scroll2 === void 0 ? void 0 : _this$_scroll2.destroy();
      this._scroll = null;
      var queue = this._dom.getElementsByClassName('queue')[0];
      this._dom.className = 'queue-context'; // Remove any scroll class
      queue.innerHTML = this._emptyQueueDom;
      queue.style.height = 'auto';
      this._clearQueueButton.classList.add('hidden');
    }
  }, {
    key: "_clearQueueTracksClicked",
    value: function _clearQueueTracksClicked() {
      mzk.clearQueueTracks();
      this._queuedTracks = [];
      this._restoreQueueEmptyDom();
    }

    /*  PlayObject */
  }, {
    key: "updateQueuedPlayObject",
    value: function updateQueuedPlayObject(playObject) {
      var _this3 = this;
      var po = this._dom.getElementsByClassName('play-object')[0];
      if (!playObject) {
        po.innerHTML = this._emptyPlayObjectDom;
      } else {
        Evts.removeEvent(this._playObjectClickedId);
        po.innerHTML = '';
        this._buildQueuedPlayObjectDom(playObject).then(function (dom) {
          po.appendChild(dom);
          _this3._playObjectClickedId = Evts.addEvent('click', po, _this3._playObjectClicked.bind(_this3, playObject), _this3);
        })["catch"](function (err) {
          return console.error(err);
        });
      }
    }
  }, {
    key: "_buildQueuedPlayObjectDom",
    value: function _buildQueuedPlayObjectDom(playObject) {
      return new Promise(function (resolve) {
        mzk.kom.getText('/fragment/entry/queueplayobject/').then(function (response) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(response, 'text/html');
          var entry = doc.getElementsByClassName('queue-play-object-entry')[0];
          entry.querySelector('#queue-play-object-cover').src = playObject.cover;
          entry.querySelector('#queue-play-object-track').innerHTML = playObject.tracks[0].title;
          entry.querySelector('#queue-play-object-artist').innerHTML = playObject.artist;
          entry.querySelector('#queue-play-object-title').innerHTML = playObject.title;
          resolve(entry);
        });
      });
    }
  }, {
    key: "_playObjectClicked",
    value: function _playObjectClicked(playObject) {
      this.close();
      mzk.setView({
        name: playObject.type,
        id: playObject.id
      });
    }
  }]);
  return QueueContext;
}(_ContextMenu_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QueueContext);

/***/ }),

/***/ "./front/js/view/context/TrackContext.js":
/*!***********************************************!*\
  !*** ./front/js/view/context/TrackContext.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ContextMenu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ContextMenu.js */ "./front/js/view/context/ContextMenu.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TrackContext = /*#__PURE__*/function (_ContextMenu) {
  _inherits(TrackContext, _ContextMenu);
  var _super = _createSuper(TrackContext);
  function TrackContext(options) {
    var _this;
    _classCallCheck(this, TrackContext);
    _this = _super.call(this, options);
    _this._targetId = -1;
    _this._targetName = -1;
    _this._commands = {
      download: {},
      queue: {},
      tapBpm: {}
    };
    _this._text = {
      download: {},
      queue: {},
      tapBpm: {}
    };
    return _this;
  }
  _createClass(TrackContext, [{
    key: "_download",
    value: function _download() {
      mzk.download({
        id: this._targetId,
        name: this._targetName
      });
      this.close();
    }
  }, {
    key: "_addToQueue",
    value: function _addToQueue(event) {
      event.stopImmediatePropagation();
      mzk.queue({
        type: 'track',
        id: this._targetId
      });
      this.close();
    }
  }, {
    key: "_tapBpm",
    value: function _tapBpm() {
      mzk.tapBpmForId(this._targetId);
      this.close();
    }
  }, {
    key: "setActions",
    value: function setActions(doc) {
      this._commands.download = doc.getElementsByClassName('download')[0];
      this._commands.queue = doc.getElementsByClassName('add-to-queue')[0];
      this._commands.tapBpm = doc.getElementsByClassName('tap-bpm')[0];
      this._text.download = doc.getElementsByClassName('track-download')[0];
      this._text.queue = doc.getElementsByClassName('track-queue')[0];
      this._commands.download.addEventListener('click', this._download.bind(this), false);
      this._commands.queue.addEventListener('click', this._addToQueue.bind(this), false);
      if (true /*mzk.user.hasPermission('TAGE')*/) {
        this._text.tapBpm = doc.getElementsByClassName('track-tap-bpm')[0];
        this._commands.tapBpm.addEventListener('click', this._tapBpm.bind(this), false);
      } else {}
    }
  }, {
    key: "_open",
    value: function _open(event, options) {
      this._targetId = options.id;
      this._targetName = options.name;
      var pos = {
        x: event.clientX,
        y: event.clientY
      };
      this._dom.style.left = '0';
      this._dom.style.top = '0';
      this._target.appendChild(this._overlay);
      var contextWidth = getComputedStyle(this._overlay.children[0]).width;
      var offset = parseInt(contextWidth.substring(0, contextWidth.length - 2)); // Removing px from string

      // Avoid X overflow : X pos + context width
      if (event.clientX + offset > document.body.clientWidth) {
        pos.x -= offset;
      }
      // Avoid Y overflow : Y pos + context height + footbar height
      if (event.clientY + Object.keys(this._commands).length * 30 + 80 > document.body.clientHeight) {
        pos.y -= Object.keys(this._commands).length * 30;
      }
      this._dom.style.left = "".concat(pos.x, "px");
      this._dom.style.top = "".concat(pos.y, "px");
      this._target.appendChild(this._overlay);
    }
  }, {
    key: "_close",
    value: function _close() {
      if (this._target.contains(this._overlay)) {
        this._targetId = -1;
        this._target.removeChild(this._overlay);
      }
    }
  }]);
  return TrackContext;
}(_ContextMenu_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TrackContext);

/***/ }),

/***/ "./front/js/view/control/PlaybackRateBar.js":
/*!**************************************************!*\
  !*** ./front/js/view/control/PlaybackRateBar.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var PlaybackRateBar = /*#__PURE__*/function () {
  /**
   * @summary UI VolumeBar
   * @author Arthur Beaulieu
   * @since July 2018
   * @description <blockquote>Interactive playback rate bar that is linked to ManaZeak logic</blockquote>
   **/
  function PlaybackRateBar() {
    _classCallCheck(this, PlaybackRateBar);
    /** @private
     * @member {object} - The VolumeBar DOM elements */
    this._playbackRate = {
      container: {},
      current: {},
      thumb: {},
      text: {},
      reset: {},
      slower: {},
      faster: {}
    };
    /** @private
     * @member {boolean} - Flag to notify that user is currently dragging the volume bar thumb */
    this._isDragging = false;
    // Event binding
    this._mouseMove = this._mouseMove.bind(this);
    this._mouseUp = this._mouseUp.bind(this);
    this._mouseDown = this._mouseDown.bind(this);
    this._resetPlaybackRate = this._resetPlaybackRate.bind(this);
    this._adjustPlaybackRateSlower = this._adjustPlaybackRateSlower.bind(this);
    this._adjustPlaybackRateFaster = this._adjustPlaybackRateFaster.bind(this);
    this._scrolledInto = this._scrolledInto.bind(this);
    // Init plabackratebar
    this._init().then(this._addEvents.bind(this))["catch"](function (errorCode) {
      Logger.raise({
        code: errorCode,
        frontend: true
      });
    });
  }
  _createClass(PlaybackRateBar, [{
    key: "destroy",
    value: function destroy() {
      this._removeEvents();
      Utils.removeAllObjectKeys(this);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -------------------------------------  CLASS INTERNALS  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//
  }, {
    key: "_init",
    value: function _init() {
      var _this = this;
      return new Promise(function (resolve, reject) {
        // All playback rate elements are in <code>app/templates/index.html</code>
        _this._playbackRate = {
          container: document.getElementById('playback-rate-container'),
          current: document.getElementById('playback-rate-current'),
          thumb: document.getElementById('playback-rate-thumb'),
          text: document.getElementById('playback-rate-text'),
          reset: document.getElementById('reset-playback-rate'),
          slower: document.getElementById('playback-rate-slower'),
          faster: document.getElementById('playback-rate-faster')
        };
        // Check proper DOM construction or reject if missing DOM elements
        Object.keys(_this._playbackRate).forEach(function (key) {
          // If one of playbackRate is null, reject
          if (_this._playbackRate[key] === null) {
            reject('MISSING_DOM_ELEMENTS');
          }
        });
        // Init successful
        resolve();
      });
    }

    /**
     * @method
     * @name _events
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Attach mouse events to the DOM elements
     **/
  }, {
    key: "_addEvents",
    value: function _addEvents() {
      this._playbackRate.container.addEventListener('mousedown', this._mouseDown, false);
      this._playbackRate.reset.addEventListener('click', this._resetPlaybackRate, false);
      this._playbackRate.slower.addEventListener('click', this._adjustPlaybackRateSlower, false);
      this._playbackRate.faster.addEventListener('click', this._adjustPlaybackRateFaster, false);
      this._playbackRate.container.addEventListener('wheel', this._scrolledInto, true);
    }
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      this._playbackRate.container.removeEventListener('mousedown', this._mouseDown, false);
      this._playbackRate.reset.removeEventListener('click', this._resetPlaybackRate, false);
      this._playbackRate.slower.removeEventListener('click', this._adjustPlaybackRateSlower, false);
      this._playbackRate.faster.removeEventListener('click', this._adjustPlaybackRateFaster, false);
      this._playbackRate.container.removeEventListener('wheel', this._scrolledInto, true);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ---------------------------------------  MOUSE EVENTS  ---------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name _mouseDown
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description When a mouse down event is triggered on <code>this.volume.container</code>,
     * attach mouse events to the windows while is <code>this._isDragging</code> is a true
     * @param {object} event - The mouse down event
     **/
  }, {
    key: "_mouseDown",
    value: function _mouseDown(event) {
      if (!this._isDragging && (event.target.id === 'playback-rate-wrapper' || event.target.id === 'playback-rate-container' || event.target.id === 'playback-rate-current' || event.target.id === 'playback-rate-thumb')) {
        this._isDragging = true;
        this._setPlaybackRateFromEvent(event);
        window.addEventListener('mousemove', this._mouseMove);
        window.addEventListener('mouseup', this._mouseUp);
      }
    }

    /**
     * @method
     * @name _mouseMove
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Change volume according to the mouse position in window
     * @param {object} event - The mouse down event
     **/
  }, {
    key: "_mouseMove",
    value: function _mouseMove(event) {
      if (this._isDragging) {
        this._setPlaybackRateFromEvent(event);
      }
    }

    /**
     * @method
     * @name _mouseUp
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description End all mouse events attached to the window. Revoke the <code>this._isDragging</code> truthness
     **/
  }, {
    key: "_mouseUp",
    value: function _mouseUp() {
      if (this._isDragging) {
        this._isDragging = false;
        window.removeEventListener('mousemove', this._mouseMove);
        window.removeEventListener('mouseup', this._mouseUp);
      }
    }

    /**
     * @method
     * @name _setVolumeFromEvent
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Converts the user's mouse position into a volume value and send update info to <code>Mzk</code> controller
     * @param {object} event - The mouse event
     **/
  }, {
    key: "_setPlaybackRateFromEvent",
    value: function _setPlaybackRateFromEvent(event) {
      // Get container bound rectangle and compute difference in px and % (pr)
      var boundRect = this._playbackRate.container.getBoundingClientRect();
      var toLeftInPx = event.clientX - boundRect.left; // Client X position minus container left X position equals X variation from container left side
      var toLeftInPr = toLeftInPx * 100 / boundRect.width; // Get width percentage depending on container width
      // OOB protection
      if (toLeftInPr > 100) {
        toLeftInPr = 100;
      }
      if (toLeftInPr < 0) {
        toLeftInPr = 0;
      }

      // Set mzk global volume
      mzk.setPlaybackRate(toLeftInPr / 100);
    }
  }, {
    key: "_getPlaybackRateFromProgress",
    value: function _getPlaybackRateFromProgress() {
      var boundRectContainer = this._playbackRate.container.getBoundingClientRect();
      var boundRectProgress = this._playbackRate.current.getBoundingClientRect();
      var toLeftInPr = boundRectProgress.width * 100 / boundRectContainer.width; // Get width percentage depending on container width
      // OOB protection
      if (toLeftInPr > 100) {
        toLeftInPr = 100;
      }
      if (toLeftInPr < 0) {
        toLeftInPr = 0;
      }
      return toLeftInPr / 100;
    }
  }, {
    key: "_resetPlaybackRate",
    value: function _resetPlaybackRate() {
      mzk.setPlaybackRate(0.5);
    }
  }, {
    key: "_adjustPlaybackRateSlower",
    value: function _adjustPlaybackRateSlower() {
      var progressPercentage = Utils.precisionRound(this._getPlaybackRateFromProgress(), 2);
      if (progressPercentage - 0.1 >= 0) {
        mzk.setPlaybackRate(progressPercentage - 0.1);
      } else {
        mzk.setPlaybackRate(0);
      }
    }
  }, {
    key: "_adjustPlaybackRateFaster",
    value: function _adjustPlaybackRateFaster() {
      var progressPercentage = Utils.precisionRound(this._getPlaybackRateFromProgress(), 2);
      if (progressPercentage + 0.05 < 1) {
        // .05 because range from [1, 2] is twice larger than [.5, 1]
        mzk.setPlaybackRate(progressPercentage + 0.05);
      } else {
        mzk.setPlaybackRate(1);
      }
    }
  }, {
    key: "_scrolledInto",
    value: function _scrolledInto(e) {
      // Scrolling up
      if (e.deltaY < 0) {
        this._adjustPlaybackRateFaster();
      } else {
        this._adjustPlaybackRateSlower();
      }
    }

    /**
     * @method
     * @name updateVolume
     * @public
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Updates the VolumeBar UI with a given position
     * @param {number} percentage - The playback rate converted in %
     **/
  }, {
    key: "updatePlaybackRate",
    value: function updatePlaybackRate(percentage, playbackRate) {
      percentage = Utils.precisionRound(percentage, 2);
      percentage *= 100;
      // Restore style to default in all case
      this._playbackRate.current.classList.remove('full');
      this._playbackRate.current.style.border = "solid 1px #0F8489"; // Match value with #playback-rate-current style

      if (percentage > 97 && percentage <= 100) {
        // Add border radius on right side
        this._playbackRate.current.classList.add('full');
      }
      if (percentage === 0) {
        this._playbackRate.current.style.border = "none";
      }
      this._playbackRate.current.style.width = "".concat(percentage, "%");
      this._playbackRate.thumb.style.left = "".concat(percentage, "%");
      this._playbackRate.text.innerHTML = Utils.precisionRound(playbackRate, 2);
    }
  }]);
  return PlaybackRateBar;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlaybackRateBar);

/***/ }),

/***/ "./front/js/view/control/ProgressBar.js":
/*!**********************************************!*\
  !*** ./front/js/view/control/ProgressBar.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/enum/ProgressControl.js */ "./front/js/utils/enum/ProgressControl.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ProgressBar = /*#__PURE__*/function () {
  /**
   * @summary Interactive Progress Bar
   * @author Arthur Beaulieu
   * @since August 2018
   * @description <blockquote>Handle the progress over a track</blockquote>
   **/
  function ProgressBar() {
    _classCallCheck(this, ProgressBar);
    this._progress = {
      container: {},
      track: {},
      current: {},
      thumb: {},
      hover: {},
      moodbar: {},
      left: {},
      right: {}
    };
    this._topbarLogo = {};
    this._asideLogo = {};
    this._rafId = null;
    this._duration = 0;
    this._isActive = false; // Boolean flag to make listeners available/unavailable
    this._isMouseOver = false;
    this._isDragging = false;
    this._init();
  }

  //  ------------------------------------------------------------------------------------------------//
  //  -------------------------------------  CLASS INTERNALS  --------------------------------------  //
  //  ------------------------------------------------------------------------------------------------//

  /**
   * @method
   * @name _init
   * @private
   * @memberof ProgressBar
   * @author Arthur Beaulieu
   * @since August 2018
   * @description Init the progress bar DOM and events
   **/
  _createClass(ProgressBar, [{
    key: "_init",
    value: function _init() {
      var _this = this;
      this._progress.container = document.getElementById('progress-container');
      this._progress.track = document.getElementById('progress-track');
      this._progress.current = document.getElementById('progress-current');
      this._progress.thumb = document.getElementById('progress-thumb');
      this._progress.hover = document.getElementById('progress-hover');
      this._progress.moodbar = document.getElementById('progress-moodbar');
      this._progress.left = document.getElementById('timecode-left');
      this._progress.right = document.getElementById('timecode-right');
      this._resetTimecode();

      // In order to remove event listeners in _removeEvents()
      this._mouseDown = this._mouseDown.bind(this);
      this._mouseMove = this._mouseMove.bind(this);
      this._mouseUp = this._mouseUp.bind(this);
      this._updateMouseOver = this._updateMouseOver.bind(this);
      this._scrolledInto = this._scrolledInto.bind(this);
      Evts.subscribe('TrackLoaded', function () {
        _this.updateDuration(mzk.ctrl.player.duration);
      });
    }

    /**
     * @method
     * @name _addEvents
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Listen to mouse events when ProgressBar is activated
     **/
  }, {
    key: "_addEvents",
    value: function _addEvents() {
      this._progress.container.addEventListener('mousedown', this._mouseDown);
      this._progress.container.addEventListener('mouseover', this._updateMouseOver);
      this._progress.container.addEventListener('mouseleave', this._updateMouseOver);
      window.addEventListener('mousemove', this._mouseMove);
      window.addEventListener('mouseup', this._mouseUp);
      this._progress.container.addEventListener('wheel', this._scrolledInto, true);
    }

    /**
     * @method
     * @name _removeEvents
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Remove mouse events when ProgressBar is deactivated
     **/
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      this._progress.container.removeEventListener('mousedown', this._mouseDown);
      this._progress.container.removeEventListener('mouseover', this._updateMouseOver);
      this._progress.container.removeEventListener('mouseleave', this._updateMouseOver);
      window.removeEventListener('mousemove', this._mouseMove);
      window.removeEventListener('mouseup', this._mouseUp);
      this._progress.container.removeEventListener('wheel', this._scrolledInto, true);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ---------------------------------------  MOUSE EVENTS  ---------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name _mouseDown
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Handle the mouse down event
     * @param {object} event - The mouse event object
     **/
  }, {
    key: "_mouseDown",
    value: function _mouseDown(event) {
      if (!this._isDragging && (event.target.id === 'progress-container' || event.target.id === 'progress-track' || event.target.id === 'progress-current' || event.target.id === 'progress-moodbar' || event.target.id === 'progress-thumb' || event.target.id === 'moodbarThumb' || event.target.tagName === 'rect')) {
        mzk.mute();
        this._isDragging = true;
        this._stopAnimation();
        var progress = this._getProgressFromEvent(event.clientX);
        this.setProgress(progress);
      }
    }

    /**
     * @method
     * @name _mouseUp
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Handle the mouse up event
     * @param {object} event - The mouse event object
     **/
  }, {
    key: "_mouseUp",
    value: function _mouseUp(event) {
      if (this._isDragging) {
        // User has released progress thumb
        this._isDragging = false;
        mzk.unmute();
        this._startAnimation();
        var progress = this._getProgressFromEvent(event.clientX);
        mzk.setProgress(Utils.precisionRound(progress, 3));
      }
    }

    /**
     * @method
     * @name _mouseMove
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Handle the mouse move event
     * @param {object} event - The mouse event object
     **/
  }, {
    key: "_mouseMove",
    value: function _mouseMove(event) {
      var _this2 = this;
      if (this._isDragging) {
        if (this._rafId !== -1) {
          cancelAnimationFrame(this._rafId);
          this._rafId = -1;
        }
        var progress = this._getProgressFromEvent(event.clientX);
        requestAnimationFrame(function () {
          _this2.setProgress(progress);
        });
      }
      if (this._isActive && this._isMouseOver) {
        this._updateHoverTimecode(event.clientX);
      }
    }

    /**
     * @method
     * @name _updateMouseOver
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Handle mouse hover on progress bar
     * @param {object} event - The mouse event object
     **/
  }, {
    key: "_updateMouseOver",
    value: function _updateMouseOver(event) {
      if (event.type === 'mouseover') {
        this._progress.hover.style.opacity = '1'; // Automatic CSS transition
        this._isMouseOver = true;
      } else if (event.type === 'mouseleave') {
        this._progress.hover.style.opacity = '0'; // Automatic CSS transition
        this._isMouseOver = false;
      }
    }
  }, {
    key: "_scrolledInto",
    value: function _scrolledInto(e) {
      // Scrolling up
      if (e.deltaY < 0) {
        mzk.adjustProgress(_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].SMALL_JUMP);
      } else {
        mzk.adjustProgress(-_utils_enum_ProgressControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].SMALL_JUMP);
      }
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ------------------------------------  ANIMATION METHODS  -------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name _animate
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Set the progress bar completion according to the Mzk player progress value
     **/
  }, {
    key: "_animate",
    value: function _animate() {
      this.setProgress(mzk.ctrl.player.progress);
      this._rafId = requestAnimationFrame(this._animate.bind(this));
    }

    /**
     * @method
     * @name _startAnimation
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Use RequestAnimationFrame to render and setProgress most of the frames
     **/
  }, {
    key: "_startAnimation",
    value: function _startAnimation() {
      if (this._isActive) {
        this._animate();
      }
    }

    /**
     * @method
     * @name _stopAnimation
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Cancel animation frame if needed
     **/
  }, {
    key: "_stopAnimation",
    value: function _stopAnimation() {
      if (!this._isActive) {
        cancelAnimationFrame(this._rafId);
      }
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -----------------------------------  ACTIVATION METHODS  -------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name activate
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Activate the ProgressBar, set it visible, add animations and add mouse events
     **/
  }, {
    key: "activate",
    value: function activate() {
      this._isActive = true;
      this.setVisibility(true);
      this._startAnimation();
      this._addEvents();
    }

    /**
     * @method
     * @name deactivate
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Deactivate the ProgressBar, set it invisible, remove animations and remove mouse events
     **/
  }, {
    key: "deactivate",
    value: function deactivate() {
      var _this3 = this;
      this._progress.thumb.style.transition = 'left 0.4s ease 0s, opacity 0.4s ease 0s'; // Match transition duration w/ the one in ui/_footbar.scss (var(--mzk-footbar-transition))
      this._progress.current.style.transition = 'width 0.4s ease 0s'; // Match transition duration w/ the one in ui/_footbar.scss (var(--mzk-footbar-transition))

      this._isActive = false;
      this.setVisibility(false);
      this._resetTimecode();
      this._removeEvents();
      this._stopAnimation();
      setTimeout(function () {
        // Delay no animation style for thumb and current (both come at 0% in 0.5s interval)
        _this3._progress.thumb.style.transition = 'left 0s ease 0s, opacity 0.4s ease 0s';
        _this3._progress.current.style.transition = 'width 0s ease 0s';
      }, 500);
    }

    /**
     * @method
     * @name toggleActive
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Toggle the ProgressBar active status
     **/
  }, {
    key: "toggleActive",
    value: function toggleActive() {
      if (!this._isActive) {
        this.activate();
      } else {
        this.deactivate();
      }
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ------------------------------------  UI MANIPULATIONS  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name setVisibility
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Set the visibility status of the ProgressBar
     * @param {boolean} isVisible - The visibility state
     **/
  }, {
    key: "setVisibility",
    value: function setVisibility(isVisible) {
      if (isVisible) {
        this._progress.moodbar.style.height = '3.5rem'; // Match value w/ --navbar-height / 2
        this._progress.moodbar.style.opacity = '1';
        this._progress.moodbar.style.cursor = 'pointer';
        this._progress.track.style.opacity = '1';
        this._progress.track.style.cursor = 'pointer';
        this._progress.left.style.opacity = '1';
        this._progress.right.style.opacity = '1';
      } else {
        this._progress.moodbar.style.height = '0';
        this._progress.moodbar.style.opacity = '0';
        this._progress.moodbar.style.cursor = 'default';
        this._progress.track.style.opacity = '0';
        this._progress.track.style.cursor = 'default';
        this._progress.left.style.opacity = '0';
        this._progress.right.style.opacity = '0';
      }
    }

    /**
     * @method
     * @name _resetTimecode
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Set UI values to default `--:--`
     **/
  }, {
    key: "_resetTimecode",
    value: function _resetTimecode() {
      var _this4 = this;
      setTimeout(function () {
        _this4._progress.left.innerHTML = '--:--';
        _this4._progress.right.innerHTML = '--:--';
        _this4._progress.hover.innerHTML = '--:--';
      }, 500); // Match value with the one in scss/ui/components/_progresbar.scss -> var(--mzk-footbar-transition)
    }

    /**
     * @method
     * @name updateDuration
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Update the duration values
     * @param {number} duration - The track duration in seconds
     **/
  }, {
    key: "updateDuration",
    value: function updateDuration(duration) {
      this._duration = duration;
      this._progress.right.innerHTML = Utils.secondsToTimecode(duration);
    }

    /**
     * @method
     * @name _updateHoverTimecode
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Update the hover timecode value
     * @param {number} xPos - The mouse X position on screen
     **/
  }, {
    key: "_updateHoverTimecode",
    value: function _updateHoverTimecode(xPos) {
      var boundRect = this._progress.track.getBoundingClientRect();
      var percentage = (xPos - boundRect.left) * 100 / boundRect.width;
      if (percentage > 100) {
        percentage = 100;
      }
      if (percentage < 0) {
        percentage = 0;
      }
      this._progress.hover.style.left = "".concat((boundRect.width * percentage / 100 - 30) * 100 / boundRect.width, "%");
      this._progress.hover.innerHTML = Utils.secondsToTimecode(percentage * this._duration / 100);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ---------------------------------  PROGRESS MANIPULATIONS  -----------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name setProgress
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Set the completion percentage of the ProgressBar
     * @param {number} percentage - The progress percentage to set
     **/
  }, {
    key: "setProgress",
    value: function setProgress(percentage) {
      if (this._isActive) {
        this._progress.current.style.width = "".concat(percentage, "%");
        this._progress.thumb.style.left = "".concat(percentage, "%");
        this._progress.left.innerHTML = Utils.secondsToTimecode(percentage * this._duration / 100);
      }
    }

    /**
     * @method
     * @name adjustProgress
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Add/Substract a completion percentage to the ProgressBar
     * @param {number} amount - The percentage amount to add/substract in range float[-100,100]
     **/
  }, {
    key: "adjustProgress",
    value: function adjustProgress(amount) {
      this.setProgress(amount);
    }

    /**
     * @method
     * @name resetProgressBar
     * @public
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Reset the progress bar to its initial state and deactivate its events and transitions
     **/
  }, {
    key: "resetProgressBar",
    value: function resetProgressBar() {
      this.setProgress(0);
      this.deactivate();
    }

    /**
     * @method
     * @name _getProgressFromEvent
     * @private
     * @memberof ProgressBar
     * @author Arthur Beaulieu
     * @since August 2018
     * @description Move the progress along its track
     * @param {number} xPos - The mouse X position on screen
     **/
  }, {
    key: "_getProgressFromEvent",
    value: function _getProgressFromEvent(xPos) {
      var boundRect = this._progress.track.getBoundingClientRect();
      var percentage = (xPos - boundRect.left) * 100 / boundRect.width;
      if (percentage < 0) {
        percentage = 0;
      }
      if (percentage > 100) {
        percentage = 100;
      }
      return percentage;
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -------------------------------------  GETTER / SETTER  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /** @public
     * @member {object} - The ProgressBar moodbar DOM container */
  }, {
    key: "moodbarContainer",
    get: function get() {
      return this._progress.moodbar;
    }
  }, {
    key: "isActive",
    get: function get() {
      return this._isActive;
    }
  }]);
  return ProgressBar;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProgressBar);

/***/ }),

/***/ "./front/js/view/control/VolumeBar.js":
/*!********************************************!*\
  !*** ./front/js/view/control/VolumeBar.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/enum/VolumeControl.js */ "./front/js/utils/enum/VolumeControl.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var VolumeBar = /*#__PURE__*/function () {
  /**
   * @summary UI VolumeBar
   * @author Arthur Beaulieu
   * @since July 2018
   * @description <blockquote>Interactive volume bar that is linked to ManaZeak logic</blockquote>
   **/
  function VolumeBar() {
    _classCallCheck(this, VolumeBar);
    /** @private
     * @member {object} - The VolumeBar DOM elements (image, wrapper, container, current, thumb) */
    this._volume = {
      image: {},
      wrapper: {},
      container: {},
      current: {},
      thumb: {}
    };
    /** @private
     * @member {boolean} - Flag to notify that user is currently dragging the volume bar thumb */
    this._isDragging = false;
    this._init();
    this._events();
  }

  //  ------------------------------------------------------------------------------------------------//
  //  -------------------------------------  CLASS INTERNALS  --------------------------------------  //
  //  ------------------------------------------------------------------------------------------------//

  /**
   * @method
   * @name _init
   * @private
   * @memberof VolumeBar
   * @author Arthur Beaulieu
   * @since July 2018
   * @description Build VolumeBar object from DOM
   **/
  _createClass(VolumeBar, [{
    key: "_init",
    value: function _init() {
      this._volume = {
        image: document.getElementById('volumebar-img'),
        wrapper: document.getElementById('volumebar-wrapper'),
        container: document.getElementById('volumebar-container'),
        current: document.getElementById('volumebar-current'),
        thumb: document.getElementById('volumebar-thumb')
      };
    }

    /**
     * @method
     * @name _events
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Attach mouse events to the DOM elements
     **/
  }, {
    key: "_events",
    value: function _events() {
      this._volume.image.addEventListener('click', mzk.toggleMute.bind(mzk));
      this._volume.container.addEventListener('mousedown', this._mouseDown.bind(this));
      this._mouseMove = this._mouseMove.bind(this);
      this._mouseUp = this._mouseUp.bind(this);
      this._volume.container.addEventListener('wheel', this._scrolledInto.bind(this), true);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ---------------------------------------  MOUSE EVENTS  ---------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name _mouseDown
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description When a mouse down event is triggered on <code>this.volume.container</code>,
     * attach mouse events to the windows while is <code>this._isDragging</code> is a true
     * @param {object} event - The mouse down event
     **/
  }, {
    key: "_mouseDown",
    value: function _mouseDown(event) {
      if (!this._isDragging && (event.target.id === 'volumebar-wrapper' || event.target.id === 'volumebar-container' || event.target.id === 'volumebar-current' || event.target.id === 'volumebar-thumb')) {
        this._isDragging = true;
        this._setVolumeFromEvent(event);
        window.addEventListener('mousemove', this._mouseMove);
        window.addEventListener('mouseup', this._mouseUp);
      }
    }

    /**
     * @method
     * @name _mouseMove
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Change volume according to the mouse position in window
     * @param {object} event - The mouse down event
     **/
  }, {
    key: "_mouseMove",
    value: function _mouseMove(event) {
      if (this._isDragging) {
        this._setVolumeFromEvent(event);
      }
    }

    /**
     * @method
     * @name _mouseUp
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description End all mouse events attached to the window. Revoke the <code>this._isDragging</code> truthness
     **/
  }, {
    key: "_mouseUp",
    value: function _mouseUp() {
      if (this._isDragging) {
        this._isDragging = false;
        window.removeEventListener('mousemove', this._mouseMove);
        window.removeEventListener('mouseup', this._mouseUp);
      }
    }
  }, {
    key: "_scrolledInto",
    value: function _scrolledInto(e) {
      // Scrolling up
      if (e.deltaY < 0) {
        mzk.adjustVolume(_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].BIG);
      } else {
        mzk.adjustVolume(-_utils_enum_VolumeControl_js__WEBPACK_IMPORTED_MODULE_0__["default"].BIG);
      }
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -----------------------------------  VOLUME MANIPULATIONS ------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name _setVolumeFromEvent
     * @private
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Converts the user's mouse position into a volume value and send update info to <code>Mzk</code> controller
     * @param {object} event - The mouse event
     **/
  }, {
    key: "_setVolumeFromEvent",
    value: function _setVolumeFromEvent(event) {
      // Get container bound rectangle and compute difference in px and % (pr)
      var boundRect = this._volume.container.getBoundingClientRect();
      var toLeftInPx = event.clientX - boundRect.left; // Client X position minus container left X position equals X variation from container left side
      var toLeftInPr = toLeftInPx * 100 / boundRect.width; // Get width percentage depending on container width
      // OOB protection
      if (toLeftInPr > 100) {
        toLeftInPr = 100;
      }
      if (toLeftInPr < 0) {
        toLeftInPr = 0;
      }
      // Set mzk global volume
      mzk.setVolume(toLeftInPr / 100);
    }

    /**
     * @method
     * @name updateVolume
     * @public
     * @memberof VolumeBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Updates the VolumeBar UI with a given position
     * @param {boolean} isMuted - The muted state
     * @param {number} volume - The volume value to set in range float[0, 100]
     **/
  }, {
    key: "updateVolume",
    value: function updateVolume(isMuted, volume) {
      var _this = this;
      var removeFullClass = function removeFullClass() {
        if (_this._volume.current.classList.contains('full')) {
          _this._volume.current.classList.remove('full');
        }
      };
      volume *= 100;
      // Icon update
      if (volume === 0 || typeof isMuted === 'boolean' && isMuted === true) {
        removeFullClass();
        this._volume.image.src = '/static/img/player/volume-mute.svg';
      } else if (volume > 0 && volume < 50) {
        removeFullClass();
        this._volume.image.src = '/static/img/player/volume-half.svg';
      } else {
        removeFullClass();
        this._volume.image.src = '/static/img/player/volume-full.svg';
      }
      if (volume > 97 && volume <= 100) {
        // Add border radius on right side
        this._volume.current.classList.add('full');
      }

      // Current and thumb update
      if (typeof isMuted === 'boolean' && isMuted === true) {
        volume = 0;
      } // To set volume current and thumb at 0% left when muted.
      this._volume.current.style.width = "".concat(volume, "%");
      this._volume.thumb.style.left = "".concat(volume, "%");
    }
  }]);
  return VolumeBar;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VolumeBar);

/***/ }),

/***/ "./front/js/view/element/Aside.js":
/*!****************************************!*\
  !*** ./front/js/view/element/Aside.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Aside = /*#__PURE__*/function () {
  function Aside() {
    _classCallCheck(this, Aside);
    this._homepage = document.getElementById('homepage-button');
    this._menupage = document.getElementById('menupage-button');
    // No need to use an event on logout, as it's only href redirect in template
    this._evtIds = [];
    this._events();
  }

  /* Not meant to be destroyed */
  _createClass(Aside, [{
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('click', this._homepage, mzk.setView.bind(mzk, {
        name: 'MainPage'
      }), this));
      this._evtIds.push(Evts.addEvent('click', this._menupage, mzk.setView.bind(mzk, {
        name: 'MenuPage'
      }), this));
    }
  }]);
  return Aside;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Aside);

/***/ }),

/***/ "./front/js/view/element/NavBar.js":
/*!*****************************************!*\
  !*** ./front/js/view/element/NavBar.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _control_VolumeBar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control/VolumeBar.js */ "./front/js/view/control/VolumeBar.js");
/* harmony import */ var _control_ProgressBar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../control/ProgressBar.js */ "./front/js/view/control/ProgressBar.js");
/* harmony import */ var _context_QueueContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/QueueContext.js */ "./front/js/view/context/QueueContext.js");
/* harmony import */ var _context_PlaybackRateContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../context/PlaybackRateContext.js */ "./front/js/view/context/PlaybackRateContext.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




var NavBar = /*#__PURE__*/function () {
  function NavBar() {
    _classCallCheck(this, NavBar);
    this._controls = {
      play: {},
      stop: {},
      volume: {},
      previous: {},
      next: {},
      repeat: {},
      shuffle: {},
      speedometer: {},
      queue: {}
    };
    this._volumeBar = {};
    this._progressBar = {};
    this._playbackRateContext = {};
    this._queueContext = {};
    this._mmodbar = {};
    this._init();
    this._events();
  }
  _createClass(NavBar, [{
    key: "_init",
    value: function _init() {
      this._controls.play = document.getElementById('play');
      this._controls.stop = document.getElementById('stop');
      this._controls.previous = document.getElementById('previous');
      this._controls.next = document.getElementById('next');
      this._controls.repeat = document.getElementById('repeat');
      this._controls.shuffle = document.getElementById('shuffle');
      this._controls.speedometer = document.getElementById('speedometer');
      this._controls.queue = document.getElementById('queue');
      this._volumeBar = new _control_VolumeBar_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
      this._progressBar = new _control_ProgressBar_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
      this._playbackRateContext = new _context_PlaybackRateContext_js__WEBPACK_IMPORTED_MODULE_3__["default"]({
        target: document.body,
        name: 'playbackrate'
      });
      this._queueContext = new _context_QueueContext_js__WEBPACK_IMPORTED_MODULE_2__["default"]({
        target: document.body,
        name: 'queue'
      });
      this._moodbar = document.getElementById('progress-moodbar');
    }
  }, {
    key: "_events",
    value: function _events() {
      var _this = this;
      this._controls.play.addEventListener('click', function () {
        mzk.togglePlay();
      });
      this._controls.stop.addEventListener('click', function () {
        mzk.stopPlayback();
      });
      this._controls.previous.addEventListener('click', function () {
        mzk.previous();
      });
      this._controls.next.addEventListener('click', function () {
        mzk.next();
      });
      this._controls.repeat.addEventListener('click', function () {
        mzk.toggleRepeatMode();
      });
      this._controls.shuffle.addEventListener('click', function () {
        mzk.togglePlaybackMode();
      });
      this._controls.speedometer.addEventListener('click', function () {
        if (document.body.contains(_this._playbackRateContext.dom)) {
          _this._playbackRateContext.close();
          _this._playbackRateContext = null;
        } else {
          var windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
          var clientRectangle = _this._controls.speedometer.getBoundingClientRect();
          _this._playbackRateContext.open({
            rightOffset: windowWidth - (clientRectangle.x + clientRectangle.width + 5)
          });
        }
      });
      this._controls.queue.addEventListener('click', function () {
        if (document.body.contains(_this._queueContext.dom)) {
          _this._queueContext.close();
        } else {
          var clientRectangle = _this._controls.queue.getBoundingClientRect();
          _this._queueContext.open({
            leftOffset: clientRectangle.x
          });
        }
      });
    }

    /**
     * @method
     * @name updatePlayButton
     * @public
     * @memberof FootBar
     * @author Arthur Beaulieu
     * @since July 2018
     * @description Updates the play icon according to a given state
     * @param {boolean} isPlaying - The player playback state
     **/
  }, {
    key: "updatePlayButton",
    value: function updatePlayButton(isPlaying) {
      if (isPlaying) {
        this._controls.play.src = '/static/img/player/pause.svg';
      } else {
        this._controls.play.src = '/static/img/player/play.svg';
      }
    }
  }, {
    key: "updatePlaybackRate",
    value: function updatePlaybackRate(playbackRate) {
      if (this._playbackRateContext !== null) {
        this._playbackRateContext.updatePlaybackRate(playbackRate);
      }
    }
  }, {
    key: "setRepeatMode",
    value: function setRepeatMode(value) {
      if (value === 0) {
        this._controls.repeat.src = '/static/img/player/repeat-off.svg';
        this._controls.repeat.parentNode.dataset.tooltip = this._controls.repeat.dataset.repeatoff;
      } else if (value === 1) {
        this._controls.repeat.src = '/static/img/player/repeat-one.svg';
        this._controls.repeat.parentNode.dataset.tooltip = this._controls.repeat.dataset.repeatone;
      } else if (value === 2) {
        this._controls.repeat.src = '/static/img/player/repeat-all.svg';
        this._controls.repeat.parentNode.dataset.tooltip = this._controls.repeat.dataset.repeatall;
      }
      // Update tooltip displayed text
      this._controls.repeat.parentNode.lastElementChild.textContent = this._controls.repeat.parentNode.dataset.tooltip;
    }
  }, {
    key: "setPlaybackMode",
    value: function setPlaybackMode(value) {
      if (value === 0) {
        this._controls.shuffle.src = '/static/img/player/shuffle-off.svg';
        this._controls.shuffle.parentNode.dataset.tooltip = this._controls.shuffle.dataset.shuffleoff;
      } else if (value === 1) {
        this._controls.shuffle.src = '/static/img/player/shuffle-on.svg';
        this._controls.shuffle.parentNode.dataset.tooltip = this._controls.shuffle.dataset.shuffle;
      } else if (value === 2) {
        this._controls.shuffle.src = '/static/img/player/shuffle-random-on.svg';
        this._controls.shuffle.parentNode.dataset.tooltip = this._controls.shuffle.dataset.random;
      }
      // Update tooltip displayed text
      this._controls.shuffle.parentNode.lastElementChild.textContent = this._controls.shuffle.parentNode.dataset.tooltip;
    }
  }, {
    key: "updateMoodbar",
    value: function updateMoodbar(mood) {
      var _this2 = this;
      var evtId = Evts.addEvent('error', this._moodbar, function () {
        Evts.removeEvent(evtId);
        _this2._moodbar.src = "/static/img/moodbar/default-1k.webp";
      });
      this._moodbar.src = "/resources/moods/hd/".concat(mood);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  ---------------------------------------  QUEUE METHODS  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//

    /**
     * @method
     * @name updateQueueNumber
     * @public
     * @memberof FootBar
     * @author Arthur Beaulieu
     * @since March 2019
     * @description Updates the superscript queue length over the queue icon
     * @param {array} queue - The current session queue
     **/
  }, {
    key: "updateQueueNumber",
    value: function updateQueueNumber(length) {
      if (length === 0) {
        length = '';
      }
      this._controls.queue.parentNode.dataset.before = length;
    }
  }, {
    key: "setQueuedTracks",
    value: function setQueuedTracks(queuedTracks) {
      this._queueContext.updateQueuedTracks(queuedTracks);
      this.updateQueueNumber(queuedTracks.length);
    }
  }, {
    key: "setQueuedPlayObject",
    value: function setQueuedPlayObject(playObject) {
      this._queueContext.updateQueuedPlayObject(playObject);
    }

    //  ------------------------------------------------------------------------------------------------//
    //  -------------------------------------  GETTER / SETTER  --------------------------------------  //
    //  ------------------------------------------------------------------------------------------------//
  }, {
    key: "playbackRateContext",
    get: function get() {
      return this._playbackRateContext;
    }

    /** @public
     * @member {object} - The FootBar's progress bar public accessor */
  }, {
    key: "progressBar",
    get: function get() {
      return this._progressBar;
    }

    /** @public
     * @member {object} - The FootBar's volume bar public accessor */
  }, {
    key: "volumeBar",
    get: function get() {
      return this._volumeBar;
    }

    /** @public
     * @member {number} - The FootBar control shuffle mode value in range int[0, 2] */
  }, {
    key: "playbackMode",
    set: function set(value) {
      if (value === 0) {
        this._controls.shuffle.src = '/static/img/player/shuffle-off.svg';
        this._controls.shuffle.parentNode.dataset.tooltip = mzk.lang.player.shuffle.off;
      } else if (value === 1) {
        this._controls.shuffle.src = '/static/img/player/shuffle-on.svg';
        this._controls.shuffle.parentNode.dataset.tooltip = mzk.lang.player.shuffle.shuffle;
      } else if (value === 2) {
        this._controls.shuffle.parentNode.dataset.tooltip = mzk.lang.player.shuffle.on;
        this._controls.shuffle.src = '/static/img/player/shuffle-random-on.svg';
      }
    }
  }]);
  return NavBar;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NavBar);

/***/ }),

/***/ "./front/js/view/element/Scene.js":
/*!****************************************!*\
  !*** ./front/js/view/element/Scene.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _scene_ViewFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scene/ViewFactory */ "./front/js/view/scene/ViewFactory.js");
/* harmony import */ var _modal_ModalFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modal/ModalFactory */ "./front/js/view/modal/ModalFactory.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Scene = /*#__PURE__*/function () {
  function Scene() {
    _classCallCheck(this, Scene);
    this._scene = document.getElementById('scene');
    this.view = null;
    this.modal = null;
  }
  _createClass(Scene, [{
    key: "clearScene",
    value: function clearScene() {
      if (this.view) {
        this.view.destroy();
        this.view = null;
      }
      this._scene.innerHTML = '';
    }
  }, {
    key: "buildView",
    value: function buildView(options) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        var failEvtId = Evts.subscribe('SceneViewFailed', function (errors) {
          // Restore mainpage if view doesn't exists
          // Don't unsubscribe ready evt as we load MainPage that requires this evt
          _this.clearScene();
          _this.view = new _scene_ViewFactory__WEBPACK_IMPORTED_MODULE_0__["default"]('MainPage');
          mzk.ui.processLogFromServer(errors);
        }, true);
        Evts.subscribe('SceneViewReady', function (data) {
          // To force UserInterface to leave loading overlay. Must be manually shut down by view
          if (data && data.keepLoading === true) {
            options.keepLoading = true;
          }
          _this._scene.append(_this.view.dom);
          Evts.unsubscribe(failEvtId);
          resolve();
        }, true);
        // Scene clearing and view instantiation
        _this.clearScene();
        _this.view = new _scene_ViewFactory__WEBPACK_IMPORTED_MODULE_0__["default"](options.name, options);
        // Reject view build if it exceeds 20 seconds
        setTimeout(reject, 20000);
      });
    }
  }, {
    key: "buildModal",
    value: function buildModal(options) {
      var _this2 = this;
      return new Promise(function (resolve) {
        _this2.modal = new _modal_ModalFactory__WEBPACK_IMPORTED_MODULE_1__["default"](options.name, options);
        resolve();
      });
    }
  }]);
  return Scene;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Scene);

/***/ }),

/***/ "./front/js/view/element/TopBar.js":
/*!*****************************************!*\
  !*** ./front/js/view/element/TopBar.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var TopBar = /*#__PURE__*/function () {
  function TopBar() {
    _classCallCheck(this, TopBar);
    this._view = null;
    this._track = null;
    this._evtIds = [];
    this._init();
    this._events();
  }
  _createClass(TopBar, [{
    key: "_init",
    value: function _init() {
      this._view = document.getElementById('topbar-current-view');
      this._track = document.getElementById('topbar-current-track');
    }
  }, {
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('click', this._view, this._viewClicked, this));
      this._evtIds.push(Evts.addEvent('click', this._track, this._trackClicked, this));
    }
  }, {
    key: "_viewClicked",
    value: function _viewClicked() {
      mzk.setView(JSON.parse(this._view.dataset.options));
    }
  }, {
    key: "_trackClicked",
    value: function _trackClicked() {
      mzk.setView(JSON.parse(this._track.dataset.view));
    }
  }, {
    key: "setView",
    value: function setView(options) {
      this._view.innerHTML = options.displayName;
      this._view.dataset.options = JSON.stringify(options);
    }
  }, {
    key: "setTrack",
    value: function setTrack(track, playObject) {
      this._track.parentNode.style.opacity = 1;
      this._track.innerHTML = "".concat(track.artist, " \u2013 ").concat(track.title);
      this._track.dataset.view = JSON.stringify({
        id: playObject.id,
        name: playObject.type
      });
    }
  }, {
    key: "clearTrack",
    value: function clearTrack() {
      var _this = this;
      this._track.parentNode.style.opacity = 0;
      setTimeout(function () {
        _this._track.innerHTML = '';
        _this._track.dataset.view = '';
      }, 200);
    }
  }]);
  return TopBar;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TopBar);

/***/ }),

/***/ "./front/js/view/modal/ModalFactory.js":
/*!*********************************************!*\
  !*** ./front/js/view/modal/ModalFactory.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _mainpage_ArtistPictureModal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mainpage/ArtistPictureModal.js */ "./front/js/view/modal/mainpage/ArtistPictureModal.js");
/* harmony import */ var _mainpage_AlbumCoverModal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mainpage/AlbumCoverModal.js */ "./front/js/view/modal/mainpage/AlbumCoverModal.js");
/* harmony import */ var _mainpage_TrackDetailModal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mainpage/TrackDetailModal.js */ "./front/js/view/modal/mainpage/TrackDetailModal.js");
/* harmony import */ var _menupage_AboutModal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./menupage/AboutModal.js */ "./front/js/view/modal/menupage/AboutModal.js");
/* harmony import */ var _menupage_WishModal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./menupage/WishModal.js */ "./front/js/view/modal/menupage/WishModal.js");
/* harmony import */ var _adminpage_BadgeModal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./adminpage/BadgeModal.js */ "./front/js/view/modal/adminpage/BadgeModal.js");
/* harmony import */ var _accountpage_ResetPasswordModal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./accountpage/ResetPasswordModal.js */ "./front/js/view/modal/accountpage/ResetPasswordModal.js");
/* harmony import */ var _accountpage_EditAccountModal_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./accountpage/EditAccountModal.js */ "./front/js/view/modal/accountpage/EditAccountModal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var Classes = {
  ArtistPictureModal: _mainpage_ArtistPictureModal_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  AlbumCoverModal: _mainpage_AlbumCoverModal_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  TrackDetailModal: _mainpage_TrackDetailModal_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  AboutModal: _menupage_AboutModal_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  WishModal: _menupage_WishModal_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  BadgeModal: _adminpage_BadgeModal_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  ResetPasswordModal: _accountpage_ResetPasswordModal_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  EditAccountModal: _accountpage_EditAccountModal_js__WEBPACK_IMPORTED_MODULE_7__["default"]
};
var ModalFactory = /*#__PURE__*/_createClass(function ModalFactory(name) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  _classCallCheck(this, ModalFactory);
  return new Classes["".concat(name, "Modal")](options);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ModalFactory);

/***/ }),

/***/ "./front/js/view/modal/accountpage/EditAccountModal.js":
/*!*************************************************************!*\
  !*** ./front/js/view/modal/accountpage/EditAccountModal.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var EditAccountModal = /*#__PURE__*/function (_Modal) {
  _inherits(EditAccountModal, _Modal);
  var _super = _createSuper(EditAccountModal);
  function EditAccountModal(options) {
    var _this;
    _classCallCheck(this, EditAccountModal);
    _this = _super.call(this, 'edit-account');
    _this._evtIds = [];
    _this._data = options.data;
    return _this;
  }
  _createClass(EditAccountModal, [{
    key: "_fillAttributes",
    value: function _fillAttributes() {
      var _this2 = this;
      this._rootElement.querySelector('#email-input').value = this._data.email;
      this._rootElement.querySelector('#surname-input').value = this._data.surname;
      this._rootElement.querySelector('#name-input').value = this._data.name;
      this._rootElement.querySelector('#bio-input').value = this._data.bio;
      this._rootElement.querySelector('#birthday-input').value = this._data.birthDate;
      this._rootElement.querySelector('#country-select').querySelectorAll('option').forEach(function (o) {
        return o.selected = o.innerText == _this2._data.country;
      });
      this._rootElement.querySelector('#locale-select').querySelectorAll('option').forEach(function (o) {
        return o.selected = o.innerText == _this2._data.locale;
      });
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('click', this._rootElement.querySelector('#submit'), this._submit, this));
    }
  }, {
    key: "_submit",
    value: function _submit() {
      var r = this._rootElement;
      mzk.kom.post('/fragment/account/profile-edit/', {
        email: r.querySelector('#email-input').value,
        surname: r.querySelector('#surname-input').value,
        name: r.querySelector('#name-input').value,
        bio: r.querySelector('#bio-input').value,
        birthDate: r.querySelector('#birthday-input').value,
        country: r.querySelector('#country-select').options[r.querySelector('#country-select').selectedIndex].text,
        locale: r.querySelector('#locale-select').options[r.querySelector('#locale-select').selectedIndex].text
      })["finally"](this.close.bind(this));
    }
  }]);
  return EditAccountModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EditAccountModal);

/***/ }),

/***/ "./front/js/view/modal/accountpage/ResetPasswordModal.js":
/*!***************************************************************!*\
  !*** ./front/js/view/modal/accountpage/ResetPasswordModal.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ResetPasswordModal = /*#__PURE__*/function (_Modal) {
  _inherits(ResetPasswordModal, _Modal);
  var _super = _createSuper(ResetPasswordModal);
  function ResetPasswordModal() {
    var _this;
    _classCallCheck(this, ResetPasswordModal);
    _this = _super.call(this, 'reset-password');
    _this._evtIds = [];
    return _this;
  }
  _createClass(ResetPasswordModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(ResetPasswordModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('click', document.getElementById('reset-password-submit'), this._submit, this));
    }
  }, {
    key: "_submit",
    value: function _submit() {
      var _this2 = this;
      mzk.kom.post('/resetPassword/', {
        newPassword1: document.getElementById('reset-password-one-input').value,
        newPassword2: document.getElementById('reset-password-two-input').value
      }).then(function (res) {
        if (res.status === 400) {
          document.getElementById('reset-password-one-input').classList.add('error');
          document.getElementById('reset-password-two-input').classList.add('error');
        } else {
          _this2.close();
        }
      })["catch"](function (err) {
        console.error(err);
      });
    }
  }]);
  return ResetPasswordModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ResetPasswordModal);

/***/ }),

/***/ "./front/js/view/modal/adminpage/BadgeModal.js":
/*!*****************************************************!*\
  !*** ./front/js/view/modal/adminpage/BadgeModal.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BadgeModal = /*#__PURE__*/function (_Modal) {
  _inherits(BadgeModal, _Modal);
  var _super = _createSuper(BadgeModal);
  function BadgeModal() {
    var _this;
    _classCallCheck(this, BadgeModal);
    _this = _super.call(this, 'new-badge');
    /** @private
     * @member {object} - The form submit input */
    _this._submitInput = null;
    /** @private
     * @member {number} - The event ID for the submit input clicked */
    _this._submitEvtId = -1;
    return _this;
  }
  _createClass(BadgeModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(BadgeModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._submitEvtId);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._submitInput = this._rootElement.querySelector('#submit-badge-button');
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      this._submitEvtId = Evts.addEvent('click', this._submitInput, this._submitClicked, this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------------------  MODAL INTERACTIONS  -----------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */
  }, {
    key: "_submitClicked",
    value: function _submitClicked(event) {
      console.log('submit clicked');
    }
  }]);
  return BadgeModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BadgeModal);

/***/ }),

/***/ "./front/js/view/modal/mainpage/AlbumCoverModal.js":
/*!*********************************************************!*\
  !*** ./front/js/view/modal/mainpage/AlbumCoverModal.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AlbumCoverModal = /*#__PURE__*/function (_Modal) {
  _inherits(AlbumCoverModal, _Modal);
  var _super = _createSuper(AlbumCoverModal);
  /** @summary <h1>About modal</h1>
   * @extends Modal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This modal is made to allow the user to send a wish (under the form of a string) to the
   * instance administrators. This wish can be reviewed in the admin page, in the wishes sections. This way, users can
   * leave a feedback on the instance, straight from their account.</blockquote> **/
  function AlbumCoverModal(options) {
    var _this;
    _classCallCheck(this, AlbumCoverModal);
    _this = _super.call(this, 'album-cover');
    _this._path = options.path;
    _this._title = options.title;
    _this._artist = options.artist;
    /** @private
     * @member {object} - The modal close button */
    _this._footerCloseButton = null;
    /** @private
     * @member {number} - The event ID for the close button clicked */
    _this._footerCloseEvtId = -1;
    return _this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof AboutModal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This method will destroy the Modal parent (see documentation).</blockquote> **/
  _createClass(AlbumCoverModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AlbumCoverModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._footerCloseEvtId);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _fillAttributes
     * @private
     * @memberof AboutModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method doesn't do anything, the about modal is only for reading.</blockquote> **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._rootElement.querySelector('#album-title').innerHTML = this._title;
      this._rootElement.querySelector('#album-artist').innerHTML = this._artist;
      this._rootElement.querySelector('#album-cover').src = this._path;
      // The modal doesn't contain any interaction with user inputs
      this._footerCloseButton = this._rootElement.querySelector('#modal-footer-close');
      this._events();
    }

    /** @method
     * @name _events
     * @private
     * @memberof WishModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will listen to any click on the submit button to process the textarea
     * content to send it to the backend if needed.</blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      this._footerCloseEvtId = Evts.addEvent('click', this._footerCloseButton, this.close, this);
    }
  }]);
  return AlbumCoverModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AlbumCoverModal);

/***/ }),

/***/ "./front/js/view/modal/mainpage/ArtistPictureModal.js":
/*!************************************************************!*\
  !*** ./front/js/view/modal/mainpage/ArtistPictureModal.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ArtistPictureModal = /*#__PURE__*/function (_Modal) {
  _inherits(ArtistPictureModal, _Modal);
  var _super = _createSuper(ArtistPictureModal);
  /** @summary <h1>About modal</h1>
   * @extends Modal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This modal is made to allow the user to send a wish (under the form of a string) to the
   * instance administrators. This wish can be reviewed in the admin page, in the wishes sections. This way, users can
   * leave a feedback on the instance, straight from their account.</blockquote> **/
  function ArtistPictureModal(options) {
    var _this;
    _classCallCheck(this, ArtistPictureModal);
    _this = _super.call(this, 'artist-picture');
    _this._path = options.path;
    _this._artist = options.artist;
    /** @private
     * @member {object} - The modal close button */
    _this._footerCloseButton = null;
    /** @private
     * @member {number} - The event ID for the close button clicked */
    _this._footerCloseEvtId = -1;
    return _this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof AboutModal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This method will destroy the Modal parent (see documentation).</blockquote> **/
  _createClass(ArtistPictureModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(ArtistPictureModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._footerCloseEvtId);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _fillAttributes
     * @private
     * @memberof AboutModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method doesn't do anything, the about modal is only for reading.</blockquote> **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._rootElement.querySelector('#artist-name').innerHTML = this._artist;
      this._rootElement.querySelector('#artist-picture').src = this._path;
      // The modal doesn't contain any interaction with user inputs
      this._footerCloseButton = this._rootElement.querySelector('#modal-footer-close');
      this._events();
    }

    /** @method
     * @name _events
     * @private
     * @memberof WishModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will listen to any click on the submit button to process the textarea
     * content to send it to the backend if needed.</blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      this._footerCloseEvtId = Evts.addEvent('click', this._footerCloseButton, this.close, this);
    }
  }]);
  return ArtistPictureModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArtistPictureModal);

/***/ }),

/***/ "./front/js/view/modal/mainpage/TrackDetailModal.js":
/*!**********************************************************!*\
  !*** ./front/js/view/modal/mainpage/TrackDetailModal.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
/* harmony import */ var _visu_AudioVisualizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../visu/AudioVisualizer */ "./front/js/view/visu/AudioVisualizer.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var TrackDetailModal = /*#__PURE__*/function (_Modal) {
  _inherits(TrackDetailModal, _Modal);
  var _super = _createSuper(TrackDetailModal);
  function TrackDetailModal(options) {
    var _this;
    _classCallCheck(this, TrackDetailModal);
    _this = _super.call(this, "track-detail/".concat(options.id));
    _this._id = options.id;
    console.log(options);
    _this._waveform = null;
    /** @private
     * @member {object} - The modal close button */
    _this._footerCloseButton = null;
    /** @private
     * @member {number} - The event ID for the close button clicked */
    _this._footerCloseEvtId = -1;
    return _this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof AboutModal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This method will destroy the Modal parent (see documentation).</blockquote> **/
  _createClass(TrackDetailModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(TrackDetailModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._footerCloseEvtId);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._footerCloseButton = this._rootElement.querySelector('#modal-footer-close');
      this._buildWaveform();
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      this._footerCloseEvtId = Evts.addEvent('click', this._footerCloseButton, this.close, this);
    }
  }, {
    key: "_buildWaveform",
    value: function _buildWaveform() {
      var audio = document.createElement('AUDIO');
      audio.src = "/play/".concat(this._id, "/");
      this._waveform = new _visu_AudioVisualizer__WEBPACK_IMPORTED_MODULE_1__["default"]({
        type: 'waveform',
        player: audio,
        renderTo: this._rootElement.querySelector('#waveform-container'),
        fftSize: 128,
        noEvents: true,
        wave: {
          align: 'center',
          barWidth: 0.2,
          barMarginScale: 0,
          merged: false,
          noSignalLine: false
        },
        colors: {
          background: 'transparent',
          track: '#E7E9E7'
        }
      });
    }
  }]);
  return TrackDetailModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TrackDetailModal);

/***/ }),

/***/ "./front/js/view/modal/menupage/AboutModal.js":
/*!****************************************************!*\
  !*** ./front/js/view/modal/menupage/AboutModal.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AboutModal = /*#__PURE__*/function (_Modal) {
  _inherits(AboutModal, _Modal);
  var _super = _createSuper(AboutModal);
  /** @summary <h1>About modal</h1>
   * @extends Modal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This modal is made to allow the user to send a wish (under the form of a string) to the
   * instance administrators. This wish can be reviewed in the admin page, in the wishes sections. This way, users can
   * leave a feedback on the instance, straight from their account.</blockquote> **/
  function AboutModal() {
    var _this;
    _classCallCheck(this, AboutModal);
    _this = _super.call(this, 'about');
    /** @private
     * @member {object} - The modal close button */
    _this._footerCloseButton = null;
    /** @private
     * @member {number} - The event ID for the close button clicked */
    _this._footerCloseEvtId = -1;
    return _this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof AboutModal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This method will destroy the Modal parent (see documentation).</blockquote> **/
  _createClass(AboutModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AboutModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._footerCloseEvtId);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _fillAttributes
     * @private
     * @memberof AboutModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method doesn't do anything, the about modal is only for reading.</blockquote> **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      // The modal doesn't contain any interaction with user inputs
      this._footerCloseButton = this._rootElement.querySelector('#modal-footer-close');
      this._events();
    }

    /** @method
     * @name _events
     * @private
     * @memberof WishModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will listen to any click on the submit button to process the textarea
     * content to send it to the backend if needed.</blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      this._footerCloseEvtId = Evts.addEvent('click', this._footerCloseButton, this.close, this);
    }
  }]);
  return AboutModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AboutModal);

/***/ }),

/***/ "./front/js/view/modal/menupage/WishModal.js":
/*!***************************************************!*\
  !*** ./front/js/view/modal/menupage/WishModal.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Modal.js */ "./front/js/view/modal/utils/Modal.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WishModal = /*#__PURE__*/function (_Modal) {
  _inherits(WishModal, _Modal);
  var _super = _createSuper(WishModal);
  /** @summary <h1>Wish modal</h1>
   * @extends Modal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This modal is made to allow the user to send a wish (under the form of a string) to the
   * instance administrators. This wish can be reviewed in the admin page, in the wishes sections. This way, users can
   * leave a feedback on the instance, straight from their account.</blockquote> **/
  function WishModal() {
    var _this;
    _classCallCheck(this, WishModal);
    _this = _super.call(this, 'wish');
    /** @private
     * @member {object} - The form submit input */
    _this._submitInput = null;
    /** @private
     * @member {number} - The event ID for the submit input clicked */
    _this._submitEvtId = -1;
    return _this;
  }

  /** @method
   * @name destroy
   * @public
   * @memberof WishModal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This method will destroy the Modal parent (see documentation), then clear the submit event
   * subscription, and finally will destroy all properties of this class. It's then properly destroyed.</blockquote> **/
  _createClass(WishModal, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(WishModal.prototype), "destroy", this).call(this);
      Evts.removeEvent(this._submitEvtId);
      Utils.removeAllObjectKeys(this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _fillAttributes
     * @private
     * @memberof WishModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will retrieve the submit button from the wish modal template. It will then
     * call the event button to handle the interactivity with this button.</blockquote> **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._submitInput = this._rootElement.querySelector('#submit-wish-button');
      this._events();
    }

    /** @method
     * @name _events
     * @private
     * @memberof WishModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will listen to any click on the submit button to process the textarea
     * content to send it to the backend if needed.</blockquote> **/
  }, {
    key: "_events",
    value: function _events() {
      this._submitEvtId = Evts.addEvent('click', this._submitInput, this._submitClicked, this);
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------------------  MODAL INTERACTIONS  -----------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _submitClicked
     * @private
     * @async
     * @memberof WishModal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method is the submit button callback. If the textarea content is empty, the server
     * response to the post call will be the wish modal HTML template, completed with an error message. This callback
     * will refresh the interface to display this error message. Otherwise, if the textarea isn't empty, the server will
     * respond with a JSON object that contains the success information, to be displayed as a notification.</blockquote>
     * @param {object} event - The click event (on submit button) **/
  }, {
    key: "_submitClicked",
    value: function _submitClicked(event) {
      var _this2 = this;
      // Avoid form submit default behavior
      event.preventDefault();
      // Calling the modal url in post allow its resolution
      mzk.kom.postForm(this._url, {
        content: this._rootElement.querySelector('#wish-content').value
      }).then(function (response) {
        Logger.raise(response);
        _this2.close();
      })["catch"](function (response) {
        // Parse new modal content as DOM object
        _this2._rootElement = Utils.parseHTMLFragment(response);
        // Clear overlay content
        _this2._modalOverlay.innerHTML = '';
        // Restore new modal content
        _this2._modalOverlay.appendChild(_this2._rootElement);
        // Avoid event stacking
        Evts.removeEvent(_this2._submitEvtId);
        // Reset submit event id
        _this2._submitEvtId = -1;
        // Re-save internals with new template
        _this2._fillAttributes();
      });
    }
  }]);
  return WishModal;
}(_utils_Modal_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WishModal);

/***/ }),

/***/ "./front/js/view/modal/utils/Modal.js":
/*!********************************************!*\
  !*** ./front/js/view/modal/utils/Modal.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Modal = /*#__PURE__*/function () {
  /** @summary <h1>Mzk Modal base component</h1>
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This modal component is meant to be extended. It provides a base to build a modal, using
   * an HTML template from an existing backend url. It handles the loading and building of the HTML template. It also
   * exposes an open and a close method. Finally, it allows the user to click on the modal overlay, or on the close icon
   * to close the modal. The developer must override <code>destroy()</code> and <code>_fillAttributes()</code> methods
   * to fully cover the modal lifecycle (see each of these methods documentation).</blockquote>
   * @param {string} type - The modal type to load (must match html template filename, no extension) **/
  function Modal(type) {
    _classCallCheck(this, Modal);
    /** @private
     * @member {string} - The modal type */
    this._type = type;
    /** @private
     * @member {string} - The HTML template url to fetch */
    this._url = "/fragment/modal/".concat(this._type, "/");
    /** @private
     * @member {object} - The template root DOM element */
    this._rootElement = null;
    /** @private
     * @member {object} - The overlay that contains the modal, full viewport size and close modal on click */
    this._modalOverlay = null;
    /** @private
     * @member {number} - The event ID for the overlay clicked */
    this._overlayClickedEvtId = -1;
    /** @private
     * @member {object} - The close button, in the modal header */
    this._closeButton = null;
    /** @private
     * @member {number} - The event ID for the close button clicked */
    this._closeClickedEvtId = -1;
    // Modal building sequence:
    // - get HTML template from server;
    // - parse template response to become DOM object;
    // - append DOM element to global overlay;
    // - open modal by adding overlay to the body;
    // - let child class fill attributes and register its events.
    this._loadTemplate();
  }

  /** @method
   * @name destroy
   * @public
   * @memberof Modal
   * @author Arthur Beaulieu
   * @since November 2020
   * @description <blockquote>This method must be overridden in child class. It only destroys the <code>Modal.js</code>
   * properties and close event subscription. The developer must remove its abstracted properties and events after
   * calling this method, to make the destruction process complete.</blockquote> **/
  _createClass(Modal, [{
    key: "destroy",
    value: function destroy() {
      // Must be overridden in child class to clean extension properties and events
      Evts.removeEvent(this._overlayClickedEvtId); // Might do nothing, as event is removed in close method
      Evts.removeEvent(this._closeClickedEvtId); // Same for this event
      delete this._url;
      delete this._rootElement;
      delete this._modalOverlay;
      delete this._overlayClickedEvtId;
      delete this._closeButton;
      delete this._closeClickedEvtId;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL INSTANTIATION SEQUENCE  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _loadTemplate
     * @private
     * @async
     * @memberof Modal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method creates the modal overlay, fetch the HTML template using the <code>Kom.js
     * </code> component, it then build the modal DOM, append it to the overlay, open the modal and call <code>
     * _fillAttributes()</code> that must be overridden in the child class. It is asynchronous because of the fetch call,
     * so the child class constructor can be fully executed.</blockquote> **/
  }, {
    key: "_loadTemplate",
    value: function _loadTemplate() {
      var _this = this;
      mzk.kom.getText(this._url).then(function (response) {
        // Create DOM from fragment and tweak url to only keep modal type as css class
        _this._rootElement = Utils.parseHTMLFragment(response);
        var type = _this._type.split('/')[0]; // Avoid any ID in url
        _this._rootElement.classList.add("".concat(type, "-modal"));
        // Create overlay modal container
        _this._modalOverlay = document.createElement('DIV');
        _this._modalOverlay.className = 'loading-overlay';
        _this._modalOverlay.appendChild(_this._rootElement);
        // Get close button from template
        _this._closeButton = _this._rootElement.querySelector('#modal-close');
        _this.open();
        _this._fillAttributes();
      })["catch"](function (error) {
        console.error(error);
      });
    }

    /** @method
     * @name _fillAttributes
     * @private
     * @memberof Modal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method doesn't implement anything. It must be overridden in child class, to use the
     * template DOM elements to build its interactions. It is called once the template is successfully fetched from the
     * server.</blockquote> **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      // Must be overridden in child class to build modal with HTML template attributes
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  MODAL VISIBILITY MANIPULATION  -----------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name open
     * @public
     * @memberof Modal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will open the modal, by adding the modal overlay to the document body. It will
     * also register a subscription for a user click event on the modal overlay or on the close icon.</blockquote> **/
  }, {
    key: "open",
    value: function open() {
      // Ensure all shortcut are ineffective during modal lispan
      Shortcut.pauseAll();
      document.body.appendChild(this._modalOverlay);
      this._overlayClickedEvtId = Evts.addEvent('click', this._modalOverlay, this.close, this);
      this._closeClickedEvtId = Evts.addEvent('click', this._closeButton, this.close, this);
    }

    /** @method
     * @name close
     * @public
     * @memberof Modal
     * @author Arthur Beaulieu
     * @since November 2020
     * @description <blockquote>This method will close the modal by removing the modal overlay from the document body.
     * When closed, a modal must be destroyed, and the child class must implement its own <code>destroy()</code> method,
     * to unsubscribe to any events it has and to remove its internal properties.</blockquote>
     * @param {object} [event] - The click event, not mandatory to allow the closing of the modal outside of any event **/
  }, {
    key: "close",
    value: function close(event) {
      // Must be overridden in child class to properly clean extension properties and events
      if (!event || event && (event.target === this._modalOverlay || event.target === this._closeButton) || event.target.id.indexOf('close') !== -1) {
        // Ensure all shortcut are ineffective during modal lispan
        Shortcut.resumeAll();
        // Clear close events int eh Events component
        Evts.removeEvent(this._overlayClickedEvtId);
        Evts.removeEvent(this._closeClickedEvtId);
        this._overlayClickedEvtId = -1;
        this._closeClickedEvtId = -1;
        // Remove the overlay from the body
        document.body.removeChild(this._modalOverlay);
        // Use the child class destroy
        this.destroy();
      }
    }
  }]);
  return Modal;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Modal);

/***/ }),

/***/ "./front/js/view/navigation/Graph.js":
/*!*******************************************!*\
  !*** ./front/js/view/navigation/Graph.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _graph_Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graph/Canvas */ "./front/js/view/navigation/graph/Canvas.js");
/* harmony import */ var _graph_Tree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./graph/Tree */ "./front/js/view/navigation/graph/Tree.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Graph = /*#__PURE__*/function () {
  /**
   * @class AppController
   * @constructor
   * @description Build tree and picklists as local models,
   *              Draw in Canvas the graph
   *              Handle mouse events
   * @param {object} options : Contains the Canvas object, the Picklists object and the Tree object
   **/
  function Graph(options) {
    _classCallCheck(this, Graph);
    this.data = options.data;
    this.style = options.style;
    this.cellClickedCB = options.cellClicked;
    this.canvas = new _graph_Canvas__WEBPACK_IMPORTED_MODULE_0__["default"](options);
    this.tree = new _graph_Tree__WEBPACK_IMPORTED_MODULE_1__["default"]({
      data: this.data,
      style: this.style
    });
    this._rafId = -1;
    this._evtIds = [];
    this._init();
    this._eventListeners(); // Listen to App events
  }
  _createClass(Graph, [{
    key: "destroy",
    value: function destroy() {
      window.cancelAnimationFrame(this._rafId);
      Utils.clearAllEvents(this._evtIds);
      this.tree.destroy();
      this.canvas.destroy();
      Utils.removeAllObjectKeys(this);
    }

    /**
     * @method start
     * @description App is ready to use
     **/
  }, {
    key: "_init",
    value: function _init(size) {
      this.canvas.graphSize = this.tree.layoutSize();
      this._rafId = window.requestAnimationFrame(this._draw.bind(this)); // Start draw animation
      // Center canvas on root node depending on orientation
      this.centerOnRootNode();
    }

    /**
     * @method eventListeners
     * @description Listen to App mouse event (node dragging)
     **/
  }, {
    key: "_eventListeners",
    value: function _eventListeners() {
      this._evtIds.push(Evts.addEvent('mousemove', this.canvas.canvas, this._canvasHovered, this)); // Cursor on hover
      this._evtIds.push(Evts.addEvent('touchmove', this.canvas.canvas, this._canvasHovered, this));
      this._evtIds.push(Evts.addEvent('click', this.canvas.canvas, this._click, this)); // Select node
      this._evtIds.push(Evts.addEvent('touchstart', this.canvas.canvas, this._click, this));
    }

    /**
     * @method mouseMove
     * @description Handle mouse move event in the app
     * @param {event} event : Mouse event
     **/
  }, {
    key: "_canvasHovered",
    value: function _canvasHovered(event, newNode) {
      var hoverPosition = this.canvas.ctx.transformedPoint(
      // Get clicked position relatively to all canvas transformations
      event.offsetX || event.pageX - this.canvas.offsetLeft,
      // X coordinate
      event.offsetY || event.pageY - this.canvas.offsetTop // Y coordinate
      );
      // Coming from touch event
      if (hoverPosition.x === 0 && hoverPosition.y === 0) {
        hoverPosition.x = event.targetTouches[0].pageX;
        hoverPosition.y = event.targetTouches[0].pageY;
      }
      for (var i = 0; i < this.tree.nodes.length; ++i) {
        // Iterate over nodes
        if (this.tree.nodes[i].isInNode(hoverPosition) && this.canvas.getCanvas().style.cursor === 'inherit') {
          this.canvas.getCanvas().style.cursor = 'pointer';
          this.tree.nodes[i].isHovered = true;
          return;
        }
        this.tree.nodes[i].isHovered = false;
        this.canvas.getCanvas().style.cursor = 'inherit';
      }
    }

    /**
     * @method click
     * @private
     * @description Handle click event in the app
     * @param {event} event : Mouse event
     **/
  }, {
    key: "_click",
    value: function _click(event) {
      var clickPosition = this.canvas.ctx.transformedPoint(
      // Get clicked position relatively to all canvas transformations
      event.offsetX || event.pageX - this.canvas.offsetLeft,
      // X coordinate
      event.offsetY || event.pageY - this.canvas.offsetTop // Y coordinate
      );
      // Coming from touch event
      if (clickPosition.x === 0 && clickPosition.y === 0) {
        clickPosition.x = event.targetTouches[0].pageX;
        clickPosition.y = event.targetTouches[0].pageY;
      }
      for (var i = 0; i < this.tree.nodes.length; ++i) {
        // Iterate over nodes
        if (this.tree.nodes[i].isInNode(clickPosition)) {
          // Collision detection
          this.tree.unselectAll(); // Unselect all nodes
          this.tree.nodes[i].select(); // Select target node
          this.cellClickedCB({
            name: this.tree.nodes[i].label,
            info: this.tree.nodes[i].info,
            parent: this.tree.nodes[i].parent ? this.tree.nodes[i].parent.label : '',
            children: this.tree.nodes[i].getChildrenLabels()
          });
          return; // Exit loop
        }
      }

      this.cellClickedCB();
      this.tree.unselectAll(); // If no nodes have been clicked, we unselect all nodes
    }

    /**
     * @method draw
     * @private
     * @description Draw the tree in Canvas. Use RequestAnimationFram for more fluidity
     **/
  }, {
    key: "_draw",
    value: function _draw() {
      this.canvas.ctx.save(); // Save previous translation / scale state
      this.canvas.ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transformation temporary
      this.canvas.ctx.clearRect(0, 0, this.canvas.canvas.width, this.canvas.canvas.height); // Clearing viewport
      this.canvas.ctx.restore(); // Restoring translation / scale state

      for (var i = 0; i < this.tree.nodes.length; ++i) {
        // Iterate over tree
        if (this.tree.nodes[i].isVisible) {
          // Node visibility test
          this.tree.nodes[i].draw(this.canvas.ctx, this.tree.nodes[i].origin, this.tree.nodes[i].label); // Draw node

          if (this.tree.nodes[i].parent) {
            // Node parent test
            this.canvas.ctx.strokeStyle = this.style.tree.connectorColor; // Connector color
            // Draw connector
            this.canvas.ctx.stroke(this.canvas.connectorPath(this.tree.nodes[i].parent.getConnectorCoordinates(), this.tree.nodes[i].getConnectorCoordinates()));
          }
        }
      }
      this._rafId = window.requestAnimationFrame(this._draw.bind(this)); // Request next frame
    }
  }, {
    key: "centerOnRootNode",
    value: function centerOnRootNode() {
      var pt = {};
      if (this.style.tree.orientation === 0) {
        // Top to Bottom
        pt = this.canvas.ctx.transformedPoint(-this.tree.nodes[0].origin.x + this.canvas.width / 2 - this.style.node.width / 2, -this.tree.nodes[0].origin.y + 100);
      } else if (this.style.tree.orientation === 1) {
        // Right to Left
        pt = this.canvas.ctx.transformedPoint(-this.tree.nodes[0].origin.x + this.canvas.width - this.style.node.width - 100, -this.tree.nodes[0].origin.y + this.canvas.height / 2 - this.style.node.height / 2);
      } else if (this.style.tree.orientation === 2) {
        // Bottom to Top
        pt = this.canvas.ctx.transformedPoint(-this.tree.nodes[0].origin.x + this.canvas.width / 2 - this.style.node.width / 2, -this.tree.nodes[0].origin.y + this.canvas.height - this.style.node.height - 100);
      } else if (this.style.tree.orientation === 3) {
        // Left to Right
        pt = this.canvas.ctx.transformedPoint(-this.tree.nodes[0].origin.x + 100, -this.tree.nodes[0].origin.y + this.canvas.height / 2 - this.style.node.height / 2);
      }
      // Translate accordingly
      this.canvas.ctx.translate(pt.x, pt.y);
    }
  }]);
  return Graph;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Graph);

/***/ }),

/***/ "./front/js/view/navigation/ScrollBar.js":
/*!***********************************************!*\
  !*** ./front/js/view/navigation/ScrollBar.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _scss_navigation_scrollbar_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../scss/navigation/scrollbar.scss */ "./front/scss/navigation/scrollbar.scss");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ScrollBar = /*#__PURE__*/function () {
  /**
   * @class
   * @constructor
   * @summary Custom JavaScript ScrollBar for any conatiner
   * @author Arthur Beaulieu
   * @since January 2022
   * @licence GPL-v3.0
   * @description Build a custom ScrollBar according to the given DOM target, inspired from https://github.com/buzinas/simple-scrollbar <3
   * @param {Object} options - The ScrollBar options
   * @param {Object} options.target - The DOM node to add a ScrollBar to
   * @param {Boolean} [options.horizontal=false] - The scrollbar direction, default to vertical
   * @param {Number} [options.minSize=15] - The minimal scrollbar size in pixels
   * @param {Object} [options.style] - The scrollbar style to apply
   * @param {String} [options.style.color='rgb(155, 155, 155)'] - The CSS color
   * @param {String} [options.style.size='10px'] - The scrollbar with or height in px depending on horizontal flag
   * @param {String} [options.style.radius='5px'] - The border radius in px, by default is half the scrollbar width
   * @param {String} [options.style.lowOpacity='.2'] - The scrollbar opacity when not hovered
   * @param {String} [options.style.highOpacity='.8'] - The scrollbar opacity when hovered
   * @param {String} [options.style.transitionDuration='.2'] - The opacity transition duration in seconds
   **/
  function ScrollBar(options) {
    _classCallCheck(this, ScrollBar);
    /**
     * The DOM target element to put a scrollbar on
     * @type {Object}
     * @private
     **/
    this._target = options.target;
    /**
     * Whether the scrollbar should be horizontal or not
     * @type {Boolean}
     * @private
     **/
    this._horizontal = options.horizontal || false;
    /**
     * The minimal size in pixels for scrollbar to be
     * @type {Number}
     * @private
     **/
    this._minSize = options.minSize || 15;
    /**
     * Optionnal custom style object. Support for color, size, radius, lowOpacity, highOpacity and transitionDuration
     * @type {Object}
     * @private
     **/
    this._style = options.style || {};
    /**
     * The DOM element that will wrap the DOM target content
     * @type {Object}
     * @private
     **/
    this._wrapper = {};
    /**
     * The DOM element that will contain the DOM target content, this DOM element hides the default browser scrollbar
     * @type {Object}
     * @private
     **/
    this._container = {};
    /**
     * The DOM element that hold the custom scrollbar itself
     * @type {Object}
     * @private
     **/
    this._bar = {};
    /**
     * Ratio between DOM target and content size, if < 1, it requires a scrollbar
     * @type {Number}
     * @private
     **/
    this._scrollRatio = 0;
    /**
     * For horizontal scroll, save the last user X position for position computations
     * @type {Number}
     * @private
     **/
    this._lastPageX = 0;
    /**
     * For vertical scroll, save the last user Y position for position computations
     * @type {Number}
     * @private
     **/
    this._lastPageY = 0;
    // Component initialization sequence
    this._init().then(this._events.bind(this)).then(this._updateScrollBar.bind(this))["catch"](function (err) {
      return console.error(err);
    });
  }
  _createClass(ScrollBar, [{
    key: "destroy",
    value: function destroy() {
      Utils.removeAllObjectKeys(this);
    }

    // ======================================================================== //
    // ---------------------- Component initialization ------------------------ //
    // ======================================================================== //

    /**
     * @method
     * @name _init
     * @private
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Build DOM hierrarchy, ScrollBar double wraps the content to append its custom bar
     * @returns {Promise} A Js promise resolved when DOM is fully initialized
     **/
  }, {
    key: "_init",
    value: function _init() {
      var _this = this;
      return new Promise(function (resolve) {
        var fragment = document.createDocumentFragment();
        // Creating associated elements (wrapper, container, bar)
        _this._target.classList.add('scrollbar-container');
        _this._wrapper = document.createElement('DIV');
        _this._wrapper.setAttribute('class', 'scrollbar-wrapper');
        _this._container = document.createElement('DIV');
        // Append scroll-content class to container
        if (_this._horizontal === true) {
          _this._container.setAttribute('class', 'horizontal-scrollbar-content');
        } else {
          _this._container.setAttribute('class', 'scrollbar-content');
        }
        // Move target children into this new container
        while (_this._target.firstChild) {
          _this._container.appendChild(_this._target.firstChild);
        }
        // Link DOM elements
        _this._wrapper.appendChild(_this._container);
        fragment.appendChild(_this._wrapper);
        // Append fragment to DOM target
        _this._target.appendChild(fragment);
        // Append the scroll depending on scrollbar position
        if (_this._horizontal === true) {
          _this._target.insertAdjacentHTML('beforeend', '<div class="horizontal-scroll"></div>'); // Append scroll as last child
        } else {
          _this._target.insertAdjacentHTML('beforeend', '<div class="scroll"></div>'); // Append scroll as last child
        }
        // Save bar from previously added scroll element
        _this._bar = _this._target.lastChild;
        // Style update if user has specified style rules of its own
        _this.style = _this._style;
        // DOM initialization is done
        resolve();
      });
    }

    /**
     * @method
     * @name _events
     * @private
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Handle ScrollBar mouse events
     * @returns {Promise} A Js promise resolved when all events are registered
     **/
  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;
      return new Promise(function (resolve) {
        // Methods auto binding with this to be able to add/remove listeners easily
        _this2._drag = _this2._drag.bind(_this2);
        _this2._stopDrag = _this2._stopDrag.bind(_this2);
        // Listen to window events or container/scrollbar events
        window.addEventListener('resize', _this2._updateScrollBar.bind(_this2));
        _this2._container.addEventListener('scroll', _this2._updateScrollBar.bind(_this2));
        _this2._container.addEventListener('mouseenter', _this2._mouseEnter.bind(_this2));
        _this2._container.addEventListener('mouseleave', _this2._mouseLeave.bind(_this2));
        _this2._bar.addEventListener('mousedown', _this2._barClicked.bind(_this2));
        // Scrollbar is now ready to be used
        resolve();
      });
    }

    // ======================================================================== //
    // ----------------------- Dragging mouse events -------------------------- //
    // ======================================================================== //

    /**
     * @method
     * @name _barClicked
     * @private
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Add document events when bar is clicked to track the mouse movement in parent
     * @param {Object} event - The Mouse event from this._events()
     **/
  }, {
    key: "_barClicked",
    value: function _barClicked(event) {
      var _this3 = this;
      if (this._horizontal === true) {
        this._lastPageX = event.pageX;
      } else {
        this._lastPageY = event.pageY;
      }
      this._bar.classList.add('scrollbar-grabbed');
      document.body.classList.add('scrollbar-grabbed');
      requestAnimationFrame(function () {
        document.addEventListener('mousemove', _this3._drag);
        document.addEventListener('mouseup', _this3._stopDrag);
      });
    }

    /**
     * @method
     * @name _drag
     * @private
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Handle the drag animation of the bar
     * @param {Object} event - The Mouse event from this._events()
     **/
  }, {
    key: "_drag",
    value: function _drag(event) {
      var _this4 = this;
      if (this._horizontal === true) {
        var delta = event.pageX - this._lastPageX;
        this._lastPageX = event.pageX;
        requestAnimationFrame(function () {
          _this4._container.scrollLeft += delta / _this4._scrollRatio;
        });
      } else {
        var _delta = event.pageY - this._lastPageY;
        this._lastPageY = event.pageY;
        requestAnimationFrame(function () {
          _this4._container.scrollTop += _delta / _this4._scrollRatio;
        });
      }
    }

    /**
     * @method
     * @name _stopDrag
     * @private
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Remove document events when bar is released
     **/
  }, {
    key: "_stopDrag",
    value: function _stopDrag() {
      this._bar.classList.remove('scrollbar-grabbed');
      document.body.classList.remove('scrollbar-grabbed');
      document.removeEventListener('mousemove', this._drag);
      document.removeEventListener('mouseup', this._stopDrag);
    }

    // ======================================================================== //
    // ----------------- Internal size and position update -------------------- //
    // ======================================================================== //
  }, {
    key: "_mouseEnter",
    value: function _mouseEnter(e) {
      e.preventDefault();
      this._target.classList.add('hovered');
      this._updateScrollBar();
    }
  }, {
    key: "_mouseLeave",
    value: function _mouseLeave(e) {
      e.preventDefault();
      this._target.classList.remove('hovered');
      this._updateScrollBar();
    }

    /**
     * @method
     * @name _updateScrollBar
     * @private
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Compute bar position according to DOM measurements
     **/
  }, {
    key: "_updateScrollBar",
    value: function _updateScrollBar() {
      if (this._horizontal === true) {
        this._updateHorizontalScroll();
      } else {
        this._updateVerticalScroll();
      }
    }
  }, {
    key: "_updateHorizontalScroll",
    value: function _updateHorizontalScroll() {
      var _this5 = this;
      var totalWidth = this._container.scrollWidth;
      var ownWidth = this._container.clientWidth;
      var bottom = (this._target.clientHeight - this._bar.clientHeight) * -1;
      this._scrollRatio = ownWidth / totalWidth;
      requestAnimationFrame(function () {
        // Hide scrollbar if no scrolling is possible
        if (_this5._scrollRatio >= 1) {
          _this5._bar.classList.add('hidden');
        } else {
          var width = Math.max(_this5._scrollRatio * 100, _this5._minSize) * ownWidth / 100;
          var left = _this5._container.scrollLeft / totalWidth * 100 * ownWidth / 100;
          // ScrollBar has reached its minimum size
          if (Math.max(_this5._scrollRatio * 100, _this5._minSize) === _this5._minSize) {
            // Set minSize as width, unless minSize is greater than container client width
            width = _this5._minSize < ownWidth ? _this5._minSize : ownWidth / 2;
            /* Here is a complex thing : scroll total height != DOM node total height. We must substract
            a growing percentage (as user goes down) that is scaled after total scroll progress in %. */
            var scrollProgressPercentage = _this5._container.scrollLeft * 100 / (totalWidth - ownWidth);
            left = (ownWidth - width) * ((_this5._container.scrollLeft + scrollProgressPercentage * ownWidth / 100) / totalWidth * 100) / 100;
          }
          // Update the bar position
          _this5._bar.classList.remove('hidden');
          _this5._bar.style.cssText = "width: ".concat(width, "px; left: ").concat(left, "px; bottom: ").concat(bottom, "px;");
        }
      });
    }
  }, {
    key: "_updateVerticalScroll",
    value: function _updateVerticalScroll() {
      var _this6 = this;
      var totalHeight = this._container.scrollHeight;
      var ownHeight = this._container.clientHeight;
      var right = (this._target.clientWidth - this._bar.clientWidth) * -1;
      this._scrollRatio = ownHeight / totalHeight;
      requestAnimationFrame(function () {
        // Hide scrollbar if no scrolling is possible
        if (_this6._scrollRatio >= 1) {
          _this6._bar.classList.add('hidden');
        } else {
          var height = Math.max(_this6._scrollRatio * 100, _this6._minSize) * ownHeight / 100;
          var top = _this6._container.scrollTop / totalHeight * 100 * ownHeight / 100;
          // ScrollBar has reached its minimum size
          if (Math.max(_this6._scrollRatio * 100, _this6._minSize) === _this6._minSize) {
            // Set minSize as height, unless minSize is greater than container client height
            height = _this6._minSize < ownHeight ? _this6._minSize : ownHeight / 2;
            /* Here is a complex thing : scroll total height != DOM node total height. We must substract
            a growing percentage (as user goes down) that is scaled after total scroll progress in %. */
            var scrollProgressPercentage = _this6._container.scrollTop * 100 / (totalHeight - ownHeight);
            top = (ownHeight - height) * ((_this6._container.scrollTop + scrollProgressPercentage * ownHeight / 100) / totalHeight * 100) / 100;
          }
          // Update the bar position
          _this6._bar.classList.remove('hidden');
          _this6._bar.style.cssText = "height: ".concat(height, "px; top: ").concat(top, "px; right: ").concat(right, "px;");
        }
      });
    }

    // ======================================================================== //
    // -------------------------- Exposed methods ----------------------------- //
    // ======================================================================== //

    /**
     * @method
     * @name updateScrollbar
     * @public
     * @memberof ScrollBar
     * @author Arthur Beaulieu
     * @since January 2022
     * @description Manually update the scrollbar
     **/
  }, {
    key: "updateScrollbar",
    value: function updateScrollbar() {
      this._updateScrollBar();
    }
  }, {
    key: "isHidden",
    value: function isHidden() {
      return this._bar.classList.contains('hidden');
    }

    /**
     * Updates the scrollbar style. Support for color, size, radius, lowOpacity, highOpacity and transitionDuration
     * @param {Object} style
     **/
  }, {
    key: "style",
    set: function set(style) {
      this._style = style;
      if (this._style.color) {
        this._target.style.setProperty('--scroll-color', this._style.color);
      }
      if (this._style.size) {
        this._target.style.setProperty('--scroll-size', this._style.size);
      }
      if (this._style.radius) {
        this._target.style.setProperty('--scroll-radius', this._style.radius);
      }
      if (this._style.lowOpacity) {
        this._target.style.setProperty('--scroll-low-opacity', this._style.lowOpacity);
      }
      if (this._style.highOpacity) {
        this._target.style.setProperty('--scroll-high-opacity', this._style.highOpacity);
      }
      if (this._style.transitionDuration) {
        this._target.style.setProperty('--scroll-transition-duration', this._style.transitionDuration);
      }
    }
  }]);
  return ScrollBar;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ScrollBar);

/***/ }),

/***/ "./front/js/view/navigation/graph/Canvas.js":
/*!**************************************************!*\
  !*** ./front/js/view/navigation/graph/Canvas.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Canvas = /*#__PURE__*/function () {
  /**
   * @class Canvas
   * @constructor
   * @description Canvas plug and play object
   *              Contains tools and functions to manipulate and draw in it
   * @param {object} options : Canvas width and height
   **/
  function Canvas(options) {
    _classCallCheck(this, Canvas);
    this.style = options.style;
    this.container = options.container;
    this.height = this.container.getBoundingClientRect().height; // Canvas height
    this.width = this.container.getBoundingClientRect().width; // Canvas width
    this.canvas = null; // DOM element
    this.ctx = null; // Canvas context
    this.dragStart = null; // Drag starting relative coordinates lock
    this.isDragged = false; // Dragging lock
    this.pointer = {}; // Pointer position
    this.scaleFactor = 0; // Zooming scale factor intensity
    this._graphSize = {}; // Graph size in pixels
    this._evtIds = [];
    this._createCanvas(); // Create DOM element
  }
  _createClass(Canvas, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }

    /**
     * @method createCanvas
     * @private
     * @description Build Canvas DOM object and Canvas internal attributes
     **/
  }, {
    key: "_createCanvas",
    value: function _createCanvas() {
      this.canvas = document.createElement('CANVAS'); // Canvas DOM element creation
      this.ctx = this.canvas.getContext('2d'); // Extract context from canvas
      this.container.appendChild(this.canvas);
      this.canvas.id = 'CanvasGraph'; // CSS ID
      this.canvas.width = this.width; // Scale canvas inner width
      this.canvas.height = this.height; // Scale canvas inner height
      this.pointer.x = this.width / 2; // Init pointer X position
      this.pointer.y = this.height / 2; // Init pointer Y position
      this.scaleFactor = 1.05; // Zoom intensity

      this.canvas.style.height = "".concat(this.height, "px"); // Style canvas height
      this.canvas.style.width = "".concat(this.width, "px"); // Style canvas width

      this._trackTransforms(this.ctx); // Track canvas transformations (translate, scale)
      this._eventListeners(); // Trigger canvas transformations (translate, scale)
    }

    /**
     * @method mouseDown
     * @private
     * @description Handle mouse down event on the canvas. Drag context entry point
     * @param {event} event : Mouse event
     **/
  }, {
    key: "_mouseDown",
    value: function _mouseDown(event) {
      this.pointer.x = event.offsetX || event.pageX - this.canvas.offsetLeft; // Update pointer X position
      this.pointer.y = event.offsetY || event.pageY - this.canvas.offsetTop; // Update pointer Y position
      // Mobile handling
      if (isNaN(this.pointer.x) && isNaN(this.pointer.y)) {
        this.pointer.x = event.targetTouches[0].offsetX || event.targetTouches[0].pageX - this.canvas.offsetLeft;
        this.pointer.y = event.targetTouches[0].offsetY || event.targetTouches[0].pageY - this.canvas.offsetTop;
      }
      this.dragStart = this.ctx.transformedPoint(this.pointer.x, this.pointer.y); // Lock drag starting relative coordinates
      this.isDragged = false; // Update lock
    }

    /**
     * @method mouseMove
     * @private
     * @description Handle mouse move event over the canvas to drag context according to mouse coordinates
     * @param {event} event : Mouse event
     **/
  }, {
    key: "_mouseMove",
    value: function _mouseMove(event) {
      this.pointer.x = event.offsetX || event.pageX - this.canvas.offsetLeft; // Update pointer X position
      this.pointer.y = event.offsetY || event.pageY - this.canvas.offsetTop; // Update pointer Y position
      this.isDragged = true; // Update lock
      // Mobile handling
      if (isNaN(this.pointer.x) && isNaN(this.pointer.y)) {
        this.pointer.x = event.targetTouches[0].offsetX || event.targetTouches[0].pageX - this.canvas.offsetLeft;
        this.pointer.y = event.targetTouches[0].offsetY || event.targetTouches[0].pageY - this.canvas.offsetTop;
      }
      if (this.dragStart) {
        // Move context
        var pt = this.ctx.transformedPoint(this.pointer.x, this.pointer.y); // Convert pointer in canvas' coordinates
        this.ctx.translate(pt.x - this.dragStart.x, pt.y - this.dragStart.y); // Translate accordingly
      }
    }

    /**
     * @method mouseUp
     * @private
     * @description Handle mouse up event on the canvas to endcontext translation
     * @param {event} event : Mouse event
     **/
  }, {
    key: "_mouseUp",
    value: function _mouseUp(event) {
      this._pointerX = event.offsetX || event.pageX - this.canvas.offsetLeft; // Update pointer X position
      this._pointerY = event.offsetY || event.pageY - this.canvas.offsetTop; // Update pointer Y position
      // Mobile handling
      if (isNaN(this.pointer.x) && isNaN(this.pointer.y)) {
        this.pointer.x = event.targetTouches[0].offsetX || event.targetTouches[0].pageX - this.canvas.offsetLeft;
        this.pointer.y = event.targetTouches[0].offsetY || event.targetTouches[0].pageY - this.canvas.offsetTop;
      }
      this.dragStart = null; // Release drag starting relative coordinates
    }

    /**
     * @method mouseWheel
     * @private
     * @description Handle mouse wheel event over the Canvas to zoom in the context
     * @param {event} event : Mouse event
     **/
  }, {
    key: "_mouseWheel",
    value: function _mouseWheel(event) {
      event.preventDefault();
      // Convert scroll to variation
      var delta = 0;
      if (event.wheelDelta) {
        delta = event.wheelDelta / 40;
      } else if (event.detail) {
        delta = -event.detail;
      }
      if (delta) {
        this._zoom(delta);
      }
    }
  }, {
    key: "_mouseOut",
    value:
    /**
     * @method mouseOut
     * @private
     * @description Handle mouse out event when mouse get out of Canvas DOM object
     * @param {event} event : Mouse event
     **/
    function _mouseOut() {
      this.dragStart = null; // Release drag starting relative coordinates
    }

    /**
     * @method zoom
     * @private
     * @description Handle mouse move event over the canvas to drag context according to mouse coordinates
     * @param {int} value : Zoom value (-1 or 1 to zoom/unzoom)
     **/
  }, {
    key: "_zoom",
    value: function _zoom(value) {
      if (value < -4) {
        value = -4;
      } else if (value > 4) {
        value = 4;
      }
      var pt = this.ctx.transformedPoint(this.pointer.x, this.pointer.y); // Convert pointer in canvas' coordinates
      var sf = Math.pow(this.scaleFactor, value); // Compute local scale factor
      var ptMin = this.ctx.transformedPoint(0, 0);
      var ptMax = this.ctx.transformedPoint(this.width, this.height);
      // Dezooming only, Graph is horizontal
      if (value < 0) {
        var canvasAR = this._graphSize.height / this._graphSize.width;
        var elementAR = this.height / this.width;
        if (this._graphSize.width > this._graphSize.height) {
          // Getting graph and canvas aspect ratio
          canvasAR = this._graphSize.width / this._graphSize.height;
          elementAR = this.width / this.height;
        }
        var xPadding = this._graphSize.width / (elementAR * canvasAR);
        var yPadding = this._graphSize.height / (elementAR * canvasAR);
        var border = {
          l: ptMin.x < -xPadding,
          t: ptMin.y < -yPadding,
          r: ptMax.x - this._graphSize.width > xPadding,
          // 100 padding times 2
          b: ptMax.y - this._graphSize.height > yPadding // 100 padding times 2
        };

        if (!this._dezoomingHandleBorders(border, sf)) {
          return;
        }
      }
      // Zoom from pointer position
      this.ctx.translate(pt.x, pt.y); // Positive offset accordingly
      this.ctx.scale(sf, sf); // Scale context
      this.ctx.translate(-pt.x, -pt.y); // Negative offset to align
    }
  }, {
    key: "_dezoomingHandleBorders",
    value: function _dezoomingHandleBorders(border, sf) {
      // Double side bounds
      if (border.l) {
        this.__dezoomingBorderLeft(border, sf);
        return false;
      }
      if (border.t) {
        this.__dezoomingBorderTop(border, sf);
        return false;
      }
      if (border.r) {
        this.__dezoomingBorderRight(border, sf);
        return false;
      }
      if (border.b) {
        this.__dezoomingBorderBottom(border, sf);
        return false;
      }
      return true;
    }
  }, {
    key: "__dezoomingBorderLeft",
    value: function __dezoomingBorderLeft(border, sf) {
      if (border.r) {
        return;
      }
      if (border.t) {
        if (border.r || border.b) {
          return;
        }
        var _ptMid = this.ctx.transformedPoint(0, 0);
        this.ctx.translate(_ptMid.x, _ptMid.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid.x, -_ptMid.y);
        return;
      }
      if (border.b) {
        if (border.r || border.t) {
          return;
        }
        var _ptMid2 = this.ctx.transformedPoint(0, this.height);
        this.ctx.translate(_ptMid2.x, _ptMid2.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid2.x, -_ptMid2.y);
        return;
      }
      var ptMid = this.ctx.transformedPoint(0, this.height / 2);
      this.ctx.translate(ptMid.x, ptMid.y);
      this.ctx.scale(sf, sf); // Scale context
      this.ctx.translate(-ptMid.x, -ptMid.y);
    }
  }, {
    key: "__dezoomingBorderTop",
    value: function __dezoomingBorderTop(border, sf) {
      if (border.b) {
        return;
      }
      if (border.l) {
        if (border.r || border.b) {
          return;
        }
        var _ptMid3 = this.ctx.transformedPoint(0, 0);
        this.ctx.translate(_ptMid3.x, _ptMid3.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid3.x, -_ptMid3.y);
        return;
      }
      if (border.r) {
        if (border.b || border.l) {
          return;
        }
        var _ptMid4 = this.ctx.transformedPoint(this.width, 0);
        this.ctx.translate(_ptMid4.x, _ptMid4.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid4.x, -_ptMid4.y);
        return;
      }
      var ptMid = this.ctx.transformedPoint(this.width / 2, 0);
      this.ctx.translate(ptMid.x, ptMid.y);
      this.ctx.scale(sf, sf); // Scale context
      this.ctx.translate(-ptMid.x, -ptMid.y);
    }
  }, {
    key: "__dezoomingBorderRight",
    value: function __dezoomingBorderRight(border, sf) {
      if (border.l) {
        return;
      }
      if (border.t) {
        if (border.b || border.l) {
          return;
        }
        var _ptMid5 = this.ctx.transformedPoint(this.width, 0);
        this.ctx.translate(_ptMid5.x, _ptMid5.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid5.x, -_ptMid5.y);
        return;
      }
      if (border.b) {
        if (border.l || border.t) {
          return;
        }
        var _ptMid6 = this.ctx.transformedPoint(this.width, this.height);
        this.ctx.translate(_ptMid6.x, _ptMid6.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid6.x, -_ptMid6.y);
        return;
      }
      var ptMid = this.ctx.transformedPoint(this.width, this.height / 2);
      this.ctx.translate(ptMid.x, ptMid.y);
      this.ctx.scale(sf, sf); // Scale context
      this.ctx.translate(-ptMid.x, -ptMid.y);
    }
  }, {
    key: "__dezoomingBorderBottom",
    value: function __dezoomingBorderBottom(border, sf) {
      if (border.t) {
        return;
      }
      if (border.l) {
        if (border.r || border.t) {
          return;
        }
        var _ptMid7 = this.ctx.transformedPoint(0, this.height);
        this.ctx.translate(_ptMid7.x, _ptMid7.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid7.x, -_ptMid7.y);
        return;
      }
      if (border.r) {
        if (border.t || border.l) {
          return;
        }
        var _ptMid8 = this.ctx.transformedPoint(this.width, this.height);
        this.ctx.translate(_ptMid8.x, _ptMid8.y);
        this.ctx.scale(sf, sf); // Scale context
        this.ctx.translate(-_ptMid8.x, -_ptMid8.y);
        return;
      }
      var ptMid = this.ctx.transformedPoint(this.width / 2, this.height);
      this.ctx.translate(ptMid.x, ptMid.y);
      this.ctx.scale(sf, sf); // Scale context
      this.ctx.translate(-ptMid.x, -ptMid.y);
    }

    /**
     * @method trackTransforms
     * @private
     * @description Track and store all context transformations (scale, rotate, translate)
     * @param {object} ctx : Canvas context
     **/
  }, {
    key: "_trackTransforms",
    value: function _trackTransforms(ctx) {
      var svg = document.createElementNS("http://www.w3.org/2000/svg", 'svg'); // {object} Create svg element
      var xform = svg.createSVGMatrix(); // {object} Create SVG matrix
      var transformedPoint = svg.createSVGPoint(); // {object}   (x, y) coordinates
      var savedTransforms = []; // {array}  Saved transformations
      // Closure required to avoid inifinte call stack
      var save = ctx.save; // {function} save ctx
      var restore = ctx.restore; // {function} restore ctx
      var scale = ctx.scale; // {function} scale ctx
      var rotate = ctx.rotate; // {function} rotate ctx
      var translate = ctx.translate; // {function} translate ctx
      var transform = ctx.transform; // {function} add transformation
      var setTransform = ctx.setTransform; // {function} set transformation

      ctx.getTransform = function () {
        return xform;
      };
      // Save state
      ctx.save = function () {
        savedTransforms.push(xform.translate(0, 0));
        return save.call(ctx);
      };
      // Restore state
      ctx.restore = function () {
        xform = savedTransforms.pop();
        return restore.call(ctx);
      };
      // Scale context
      ctx.scale = function (sx, sy) {
        xform = xform.scaleNonUniform(sx, sy);
        return scale.call(ctx, sx, sy);
      };
      // Rotate context
      ctx.rotate = function (radians) {
        xform = xform.rotate(radians * 180 / Math.PI);
        return rotate.call(ctx, radians);
      };
      // Translate context
      ctx.translate = function (dx, dy) {
        xform = xform.translate(dx, dy);
        return translate.call(ctx, dx, dy);
      };
      // Add transformation to context
      ctx.transform = function (a, b, c, d, e, f) {
        var matrix = svg.createSVGMatrix();
        matrix.a = a;
        matrix.b = b;
        matrix.c = c;
        matrix.d = d;
        matrix.e = e;
        matrix.f = f;
        xform = xform.multiply(matrix);
        return transform.call(ctx, a, b, c, d, e, f);
      };
      // Set context transformation
      ctx.setTransform = function (a, b, c, d, e, f) {
        xform.a = a;
        xform.b = b;
        xform.c = c;
        xform.d = d;
        xform.e = e;
        xform.f = f;
        return setTransform.call(ctx, a, b, c, d, e, f);
      };
      // Get true coordinates in context
      ctx.transformedPoint = function (x, y) {
        transformedPoint.x = x;
        transformedPoint.y = y;
        return transformedPoint.matrixTransform(xform.inverse());
      };
    }

    /**
     * @method abortDrag
     * @description Block translation in canvas. To use when a drag event occurs over canvas
     **/
  }, {
    key: "abortDrag",
    value: function abortDrag() {
      this.dragStart = false; // Unlock dragStart boolean
    }
  }, {
    key: "connectorPath",
    value: function connectorPath(startPoint, endPoint) {
      var horizontalFlag = false; // Horizontal layout (root on left/right)
      var orientation = this.style.tree.orientation; // Graph orientation
      var path = new Path2D(); // Draw path
      // Set horizontalFlag depending on graph orientation
      if (orientation === 1 || orientation === 3) {
        horizontalFlag = true;
      }
      if (horizontalFlag) {
        // Left and right
        this.__leftRightConnector(startPoint, endPoint, orientation, path);
      } else {
        // Top and bottom
        this.__bottomTopConnector(startPoint, endPoint, orientation, path);
      }
      return path;
    }
  }, {
    key: "__leftRightConnector",
    value: function __leftRightConnector(startPoint, endPoint, orientation, path) {
      var _this = this;
      var direction = 1;
      if (startPoint.end.x < endPoint.start.x) {
        direction = 2;
      } else if (startPoint.end.x > endPoint.start.x) {
        direction = 0;
      }
      var _curvedLineLeft = function _curvedLineLeft() {
        path.moveTo(startPoint.end.x, startPoint.end.y);
        path.bezierCurveTo(startPoint.end.x + _this.style.tree.airspaceH / 2, startPoint.end.y, endPoint.start.x - _this.style.tree.airspaceH / 2, endPoint.start.y, endPoint.start.x, endPoint.start.y);
      };
      var _curvedLineRight = function _curvedLineRight() {
        path.moveTo(startPoint.end.x, startPoint.end.y);
        path.bezierCurveTo(startPoint.end.x - _this.style.tree.airspaceH / 2, startPoint.end.y, endPoint.start.x + _this.style.tree.airspaceH / 2, endPoint.start.y, endPoint.start.x, endPoint.start.y);
      };
      if (orientation === 1) {
        // Right
        switch (direction) {
          case 0:
            // endPoint is over startPoint
            _curvedLineRight();
            break;
          case 1:
            // endPoint is in the same row as startPoint
            path.moveTo(startPoint.end.x, startPoint.end.y);
            path.lineTo(endPoint.start.x, endPoint.start.y);
            break;
          case 2:
            // endPoint is under startPoint
            _curvedLineRight();
            break;
          default:
            console.log("Something went wrong with connector direction...");
            break;
        }
      } else {
        // Left
        switch (direction) {
          case 0:
            // endPoint is over startPoint
            _curvedLineLeft();
            break;
          case 1:
            // endPoint is in the same row as startPoint
            path.moveTo(startPoint.end.x, startPoint.end.y);
            path.lineTo(endPoint.start.x, endPoint.start.y);
            break;
          case 2:
            // endPoint is under startPoint
            _curvedLineLeft();
            break;
          default:
            console.log("Something went wrong with connector direction...");
            break;
        }
      }
    }
  }, {
    key: "__bottomTopConnector",
    value: function __bottomTopConnector(startPoint, endPoint, orientation, path) {
      var _this2 = this;
      var direction = 1;
      if (startPoint.end.x < endPoint.start.x) {
        direction = 2;
      } else if (startPoint.end.x > endPoint.start.x) {
        direction = 0;
      }
      var _curvedLineBottom = function _curvedLineBottom() {
        path.moveTo(startPoint.end.x, startPoint.end.y);
        path.bezierCurveTo(startPoint.end.x, startPoint.end.y - _this2.style.tree.airspaceV / 2, endPoint.start.x, endPoint.start.y + _this2.style.tree.airspaceV / 2, endPoint.start.x, endPoint.start.y);
      };
      var _curvedLineTop = function _curvedLineTop() {
        path.moveTo(startPoint.end.x, startPoint.end.y);
        path.bezierCurveTo(startPoint.end.x, startPoint.end.y + _this2.style.tree.airspaceV / 2, endPoint.start.x, endPoint.start.y - _this2.style.tree.airspaceV / 2, endPoint.start.x, endPoint.start.y);
      };
      if (orientation === 0) {
        // Top
        switch (direction) {
          case 0:
            // endPoint is at the left of startPoint
            _curvedLineTop();
            break;
          case 1:
            // endPoint is in the same col as startPoint
            path.moveTo(startPoint.end.x, startPoint.end.y);
            path.lineTo(endPoint.start.x, endPoint.start.y);
            break;
          case 2:
            // endPoint is at the right of startPoint
            _curvedLineTop();
            break;
          default:
            console.log("Something went wrong with connector direction...");
            break;
        }
      } else {
        // Bottom
        switch (direction) {
          case 0:
            // endPoint is at the left of startPoint
            _curvedLineBottom();
            break;
          case 1:
            // endPoint is in the same col as startPoint
            path.moveTo(startPoint.end.x, startPoint.end.y);
            path.lineTo(endPoint.start.x, endPoint.start.y);
            break;
          case 2:
            // endPoint is at the right of startPoint
            _curvedLineBottom();
            break;
          default:
            console.log("Something went wrong with connector direction...");
            break;
        }
      }
    }

    /**
     * @method eventListeners
     * @private
     * @description Canvas object event listeners
     **/
  }, {
    key: "_eventListeners",
    value: function _eventListeners() {
      this._evtIds.push(Evts.addEvent('mousedown', this.canvas, this._mouseDown, this));
      this._evtIds.push(Evts.addEvent('touchstart', this.canvas, this._mouseDown, this));
      this._evtIds.push(Evts.addEvent('mousemove', this.canvas, this._mouseMove, this));
      this._evtIds.push(Evts.addEvent('touchmove', this.canvas, this._mouseMove, this));
      this._evtIds.push(Evts.addEvent('mouseup', this.canvas, this._mouseUp, this));
      this._evtIds.push(Evts.addEvent('touchend', this.canvas, this._mouseUp, this));
      this._evtIds.push(Evts.addEvent('mouseout', this.canvas, this._mouseOut, this));
      this._evtIds.push(Evts.addEvent('DOMMouseScroll', this.canvas, this._mouseWheel, this));
      this._evtIds.push(Evts.addEvent('wheel', this.canvas, this._mouseWheel, this));
    }
  }, {
    key: "getCanvas",
    value: function getCanvas() {
      return this.canvas;
    }
  }, {
    key: "getCtx",
    value: function getCtx() {
      return this.ctx;
    }
  }, {
    key: "graphSize",
    set: function set(size) {
      this._graphSize = size;
    }
  }]);
  return Canvas;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Canvas);

/***/ }),

/***/ "./front/js/view/navigation/graph/Layout.js":
/*!**************************************************!*\
  !*** ./front/js/view/navigation/graph/Layout.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Layout = /*#__PURE__*/function () {
  /**
   * @class Layout
   * @constructor
   * @description Arrange a model into a grid filled with nodes
   **/
  function Layout(style) {
    _classCallCheck(this, Layout);
    this.orientation = null; // Layout orientation
    this._levels = {}; // Layout levels (not depending on orientation)
    this.style = style;
    this._max = {
      x: 0,
      y: 0
    };
  }
  _createClass(Layout, [{
    key: "destroy",
    value: function destroy() {
      Utils.removeAllObjectKeys(this);
    }

    /**
     * @method arrange
     * @description Arranges a hierarchical collection of nodes
     * @param {array} nodes - Tree root of the model
     * @param {int} orientation - The layout orientation
     **/
  }, {
    key: "arrange",
    value: function arrange(nodes) {
      this._levels = {}; // Reset levels
      this.orientation = this.style.tree.orientation; // Assign orientation
      this._fillLevels(nodes); // Fill levels object with nodes contained in each row
      this._organizeLevels(this._levels); // Place nodes in layout relatively to each other
      this._generateLocations(nodes); // Generate nodes origins
    }

    /**
     * @method _fillLevels
     * @private
     * @description Order nodes by their depth in the tree
     * @param {array} nodes : Tree nodes array
     **/
  }, {
    key: "_fillLevels",
    value: function _fillLevels(nodes) {
      for (var i = 0; i < nodes.length; ++i) {
        // Iterate over nodes
        if (nodes[i].isVisible) {
          var arrayRef = [];
          var count = 0;
          var parentNode = nodes[i].getParent();
          while (parentNode !== null) {
            // Getting node depth (count parent number until root)
            ++count; // Increment
            parentNode = parentNode.getParent(); // Crawl up in the tree
          }

          if (this._levels[count] === undefined) {
            // Create new level
            arrayRef = this._levels[count] = []; // Make
          } else {
            // Use existing level
            arrayRef = this._levels[count]; // Use
          }

          arrayRef.push(nodes[i]); // Save node in level
        }
      }
    }

    /**
     * @method _organizeLevels
     * @private
     * @description Parse node array to gave them grid coordinates relatively aligned
     * @param {object} levels : Array of node organize by depth in graph
     **/
  }, {
    key: "_organizeLevels",
    value: function _organizeLevels(levels) {
      var keys = Object.keys(levels); // Get key number in levels
      var reservedCols = []; // Already used cols - NB: Carefull, have to substract -1 when comparing
      for (var i = 0; i < keys.length; ++i) {
        // Parse levels
        var nodes = levels[keys[i]]; // Get all nodes in level
        var positionCursor = 0; // Cursor that moves from the left to the right of the level
        for (var j = 0; j < nodes.length; ++j) {
          // Parse nodes
          switch (this.orientation) {
            // Assign first coordinate (row or col depending on orientation)
            case 0:
              // Top
              nodes[j].row = parseInt(keys[i]); // From the beginning
              break;
            case 1:
              // Left
              nodes[j].col = keys.length - parseInt(keys[i]); // From the end
              break;
            case 2:
              // Bottom
              nodes[j].row = keys.length - parseInt(keys[i]); // From the end
              break;
            case 3:
              // Right
              nodes[j].col = parseInt(keys[i]); // From the beginning
              break;
            default:
              // Fallback (top)
              nodes[j].row = parseInt(keys[i]); // From the beginning
              break;
          }
          /*  ----  NODE INFORMATION  ----  */
          nodes[j].widthInGraph = this._getWidth(nodes[j]) + 1; // Get node width, we need to count the node itself too
          nodes[j].heightInGraph = 0; // Default node depth value (to avoid undefined values)
          this._getHeight(nodes[j]); // Get height of node
          /*  ----  CASE 1 : NODE IN GRAPH ----  */
          if (nodes[j].children.length !== 0) {
            positionCursor = this.__childrenNode(reservedCols, positionCursor, nodes[j]);
          } else {
            positionCursor = this.__noChildrenNode(reservedCols, positionCursor, nodes[j]);
          }
        }
      }
    }
  }, {
    key: "__childrenNode",
    value: function __childrenNode(reservedCols, positionCursor, node) {
      if (node.widthInGraph === 1) {
        ++positionCursor;
      } else {
        while (reservedCols.indexOf(positionCursor) !== -1) {
          ++positionCursor;
        }
        positionCursor += Math.round(node.widthInGraph / 2); // reservedCols array only store integer, so we need to round
        if (node.widthInGraph % 2 === 0) {
          // If it is even, we offset the col position from a half
          positionCursor += 0.5;
        }
      }
      while (reservedCols.indexOf(Math.round(positionCursor) - 1) !== -1) {
        // reservedCols array only store integer, so we need to round
        ++positionCursor;
      }
      switch (this.orientation) {
        // Assign second coordinate (row or col depending on orientation)
        case 0:
          // Top
          node.col = positionCursor;
          break;
        case 1:
          // Left
          node.row = positionCursor;
          break;
        case 2:
          // Bot
          node.col = positionCursor;
          break;
        case 3:
          // Right
          node.row = positionCursor;
          break;
        default:
          // Fallback (top)
          node.col = positionCursor;
          break;
      }
      if (node.widthInGraph !== 1) {
        positionCursor += Math.floor(node.widthInGraph / 2);
        if (node.widthInGraph % 2 === 0) {
          // We must substract the offset before going any further
          positionCursor -= 0.5;
        }
      }
      return positionCursor;
    }
  }, {
    key: "__noChildrenNode",
    value: function __noChildrenNode(reservedCols, positionCursor, node) {
      while (reservedCols.indexOf(positionCursor) !== -1) {
        ++positionCursor;
      }
      reservedCols.push(positionCursor);
      ++positionCursor;
      switch (this.orientation) {
        // Assign second coordinate (row or col depending on orientation)
        case 0:
          // Top
          node.col = positionCursor;
          break;
        case 1:
          // Left
          node.row = positionCursor;
          break;
        case 2:
          // Bot
          node.col = positionCursor;
          break;
        case 3:
          // Right
          node.row = positionCursor;
          break;
        default:
          // Fallback (top)
          node.col = positionCursor;
          break;
      }
      return positionCursor;
    }

    /**
     * @method _generateLocations
     * @private
     * @description Generate coordinates on a node and its children
     * @param {array} nodes     : Tree nodes array
     * @param {int} orientation : The layout orientation
     **/
  }, {
    key: "_generateLocations",
    value: function _generateLocations(nodes) {
      for (var i = 0; i < nodes.length; ++i) {
        // Iterate over nodes
        var origin = {
          x: nodes[i].col * (this.style.node.width + this.style.tree.airspaceH),
          // X coordinate
          y: nodes[i].row * (this.style.node.height + this.style.tree.airspaceV) // Y coordinate
        };

        nodes[i].setOrigin(origin); // Apply origin to node

        if (origin.x > this._max.x) {
          this._max.x = origin.x;
        }
        if (origin.y > this._max.y) {
          this._max.y = origin.y;
        }
        if (this.orientation === 1 || this.orientation === 3) {
          // Horizontal layout orientation
          // Swap col and row (flip layout)
          var _ref = [nodes[i].heightInGraph, nodes[i].widthInGraph];
          nodes[i].widthInGraph = _ref[0];
          nodes[i].heightInGraph = _ref[1];
        }
        if (nodes[i].children.length > 0) {
          // Not a leaf
          this._generateLocations(nodes[i].children); // Recursive call on children
        }
      }
    }

    /**
     * @method _getWidth
     * @private
     * @description Returns the total width of a node regarding its children (return value in col number)
     * @param {object} node : Node to determine the width in graph.
     * @return {int} Total width in graph (not in pixel, in node count)
     **/
  }, {
    key: "_getWidth",
    value: function _getWidth(node) {
      var count = node.children.length > 0 ? node.children.length - 1 : 0; // Count children number

      for (var i = 0; i < node.children.length; ++i) {
        // Iterate over node children
        count += this._getWidth(node.children[i]); // Recusrive call on childen
      }

      return count; // Return width
    }

    /**
     * @method _getHeight
     * @private
     * @description Returns the total height of a node regarding its children
     * @param {object} node : Node to determine the width in graph
     * @return {int} Total height in graph (not in pixel, in node count)
     **/
  }, {
    key: "_getHeight",
    value: function _getHeight(node) {
      var count = 1; // Init node height
      var parentNode = node.getParent(); // Store parent

      while (parentNode !== null) {
        // Iterate over parent
        parentNode.heightInGraph = count; // Update parent depth
        ++count; // Increment
        parentNode = parentNode.getParent(); // Iterate
      }
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return {
        height: this._max.y,
        width: this._max.x
      };
    }
  }]);
  return Layout;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Layout);

/***/ }),

/***/ "./front/js/view/navigation/graph/Node.js":
/*!************************************************!*\
  !*** ./front/js/view/navigation/graph/Node.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Node = /*#__PURE__*/function () {
  /**
   * @class Node
   * @constructor
   * @description Node object to store in a Tree object
   *              Contains all methods to manipulate the node in the tree
   *              Can be built with a raw node from JSON or from an existing node (JSON formatting of the options argument)
   * @param {object} options : Node specifications (node ID, node position compare to siblings, node type)
   * @param {object} parent  : Parent node, has to be null for root node **/
  function Node(opts, parent, style) {
    _classCallCheck(this, Node);
    this.style = style;
    this.info = opts.info; // Node type
    this.label = opts.name; // Node label text
    this.children = []; // Children nodes, array
    this.parent = parent; // Parent node
    this.col = 0; // Node column number in grid
    this.row = 0; // Node row number in grid
    this.origin = {
      x: 0,
      y: 0
    }; // Node coordinates
    this.isSelected = false; // Node selection boolean
    this.isHovered = false; // Node selection boolean
    this.isVisible = true; // Node visibility boolean
    this.isCandidate = false; // Node closest candidate (drag)
    this.context = null; // Node context info (picklist)
    // Add current node to its parent as children
    if (this.parent) {
      this.parent.children.push(this);
    }
  }
  _createClass(Node, [{
    key: "destroy",
    value: function destroy() {
      Utils.removeAllObjectKeys(this);
    }

    /**
     * @method drawNode
     * @description Draw tree nodes in canvas
     * @param {object} ctx    : Canvas context to draw node in
     * @param {object} origin : X and Y origin coordinates
     * @param {string} text   : Node label
     **/
  }, {
    key: "draw",
    value: function draw(ctx, origin, text) {
      // Local variables initialization
      var x = origin.x; // Path starting X coordinate
      var y = origin.y; // Path starting Y coordinate
      var height = this.style.node.height; // Node height
      var width = this.style.node.width; // Node width
      var radius = {
        // Border radius
        tl: this.style.node.radius,
        tr: this.style.node.radius,
        // Top
        br: this.style.node.radius,
        bl: this.style.node.radius // Bottom
      };
      // Node drawing path
      ctx.beginPath(); // Canvas edit start
      ctx.moveTo(x + radius.tl, y); // Begin on top left, after radius
      ctx.lineTo(x + width - radius.tr, y); // Go to top right
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr); // Apply radius
      ctx.lineTo(x + width, y + height - radius.br); // Go to bottom right
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height); // Apply radius
      ctx.lineTo(x + radius.bl, y + height); // Go to bottom left
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl); // Apply radius
      ctx.lineTo(x, y + radius.tl); // Go to top left
      ctx.quadraticCurveTo(x, y, x + radius.tl, y); // Apply radius
      ctx.closePath(); // Canvas edit done
      ctx.stroke(); // Apply border
      // Background color
      if (this.isSelected) {
        ctx.fillStyle = this.style.node.selectedBackground;
      } else if (this.isHovered) {
        ctx.fillStyle = this.style.node.hoveredBackground;
      } else {
        ctx.fillStyle = this.style.node.background;
      }
      ctx.fill(); // Apply background
      // Text
      ctx.fillStyle = "rgb(45, 45, 45)"; // Font color
      ctx.font = "".concat(this.style.node.fontSize, "px sans-serif"); // Font style
      ctx.textAlign = 'center';
      ctx.fillText(this.fitString(ctx, text, this.style.node.maxTextWidth),
      // Apply font color
      x + this.style.node.paddingH, y + this.style.node.paddingV);
      // Highlight candidate node connector (drag)
      if (this.isCandidate) {
        var coord = {
          x: 0,
          y: 0
        }; // End connector coordinates
        switch (this.style.tree.orientation) {
          // Compute coordinate depending on graph orientation
          case 0:
            // Top
            coord.x = this.origin.x + this.style.node.width / 2;
            coord.y = this.origin.y + this.style.node.height;
            break;
          case 1:
            // Left
            coord.x = this.origin.x;
            coord.y = this.origin.y + this.style.node.height / 2;
            break;
          case 2:
            // Bot
            coord.x = this.origin.x + this.style.node.width / 2;
            coord.y = this.origin.y;
            break;
          case 3:
            // Right
            coord.x = this.origin.x + this.style.node.width;
            coord.y = this.origin.y + this.style.node.height / 2;
            break;
          default:
            console.error("The layout orientation has taken an invalid value.");
            break;
        }
        ctx.beginPath(); // Canvas edit start
        ctx.arc(coord.x, coord.y, 5, 0, 2 * Math.PI, false); // Draw circle
        ctx.fillStyle = 'rgba(255,0,0,1)'; // Set connector color
        ctx.fill(); // Apply color
        ctx.closePath(); // Canvas edit done
      }
    }

    /**
     * @method getConnectorCoordinates
     * @description Compute node start and end connectors coordinates (start = from parent to node && end = from node to children)
     * @return {object} X and Y coordinates for both start and end
     **/
  }, {
    key: "getConnectorCoordinates",
    value: function getConnectorCoordinates() {
      var coord = {
        // Connectors coordinates
        start: {
          x: 0,
          y: 0
        },
        // From parent to node connector
        end: {
          x: 0,
          y: 0
        } // From node to children connector
      };

      switch (this.style.tree.orientation) {
        // Compute coordinate depending on graph orientation
        case 0:
          // Top
          coord.start.x = this.origin.x + this.style.node.width / 2;
          coord.start.y = this.origin.y;
          coord.end.x = this.origin.x + this.style.node.width / 2;
          coord.end.y = this.origin.y + this.style.node.height;
          break;
        case 1:
          // Left
          coord.start.x = this.origin.x + this.style.node.width;
          coord.start.y = this.origin.y + this.style.node.height / 2;
          coord.end.x = this.origin.x;
          coord.end.y = this.origin.y + this.style.node.height / 2;
          break;
        case 2:
          // Bot
          coord.start.x = this.origin.x + this.style.node.width / 2;
          coord.start.y = this.origin.y + this.style.node.height;
          coord.end.x = this.origin.x + this.style.node.width / 2;
          coord.end.y = this.origin.y;
          break;
        case 3:
          // Right
          coord.start.x = this.origin.x;
          coord.start.y = this.origin.y + this.style.node.height / 2;
          coord.end.x = this.origin.x + this.style.node.width;
          coord.end.y = this.origin.y + this.style.node.height / 2;
          break;
        default:
          console.error("The layout orientation has taken an invalid value.");
          break;
      }
      return coord;
    }

    /**
     * @method isInNode
     * @description Test collision between position coordinates and node coordinates
     * @param {object} position : X and Y coordinates
     * @return {bool} Is in node?
     **/
  }, {
    key: "isInNode",
    value: function isInNode(position) {
      var inside = false; // In node indicator boolean
      var x = position.x; // X target
      var y = position.y; // Y target

      if (x >= this.origin.x &&
      // Greater than X origin
      x <= this.origin.x + this.style.node.width &&
      // Smaller than X origin + node width
      y >= this.origin.y &&
      // Greater than Y origin
      y <= this.origin.y + this.style.node.height) {
        // Smaller than Y origin + node height
        inside = true;
      }
      return inside;
    }

    /**
     * @method select
     * @description Select node in graph and opens its context menu to show picklist items
     * @param {object} picklist : Node associated picklist
     * @param {object} origin   : X and Y coordinates
     **/
  }, {
    key: "select",
    value: function select() {
      this.isSelected = true; // Lock selection boolean
    }

    /**
     * @method unselect
     * @description Unselect node in graph and close its context menu
     **/
  }, {
    key: "unselect",
    value: function unselect() {
      this.isSelected = false; // Unlock selection boolean
      if (this.context) {
        this.context.clear(); // Clear context object
        this.context = null; // Destroy context object
      }
    }

    /**
     * @method showChildren
     * @description Recursive function to show a node and all its children
     * @param {object} node : Starting node to show
     **/
  }, {
    key: "showChildren",
    value: function showChildren(node) {
      if (node.children) {
        // Child existence
        for (var i = 0; i < node.children.length; ++i) {
          // Parse node's children
          node.children[i].isVisible = true; // Lock visibility boolean
          this.showChildren(node.children[i]); // Recurse over children
        }
      }
    }

    /**
     * @method hideChildren
     * @description Recursive function to hide a node and all its children
     * @param {object} node : Starting node to hide
     **/
  }, {
    key: "hideChildren",
    value: function hideChildren(node) {
      if (node.children) {
        // Child existence
        for (var i = 0; i < node.children.length; ++i) {
          // Parse node's children
          node.children[i].isVisible = false; // Unlock visibility boolean
          this.hideChildren(node.children[i]); // Recurse over children
        }
      }
    }
  }, {
    key: "getChildrenLabels",
    value: function getChildrenLabels() {
      var output = [];
      for (var i = 0; i < this.children.length; ++i) {
        output.push(this.children[i].label);
      }
      return output;
    }
  }, {
    key: "fitString",
    value: function fitString(ctx, str, maxWidth) {
      var ellipsis = '…'; // Ellipsis text format
      var width = ctx.measureText(str).width; // Get str width
      var ellipsisWidth = ctx.measureText(ellipsis).width; // Get ellipsis width

      if (width <= maxWidth || width <= ellipsisWidth) {
        // String can be display as it is
        return str; // Return input string
      } else {
        // String is overflowing
        var len = str.length; // Save string length

        while (width >= maxWidth - ellipsisWidth && --len > 0) {
          // Until it does not fit
          str = str.substring(0, len); // Remove last character
          width = ctx.measureText(str).width; // Update width
        }

        return str + ellipsis; // Return edited string
      }
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      return this.children;
    }
  }, {
    key: "getParent",
    value: function getParent() {
      return this.parent ? this.parent : null;
    }
  }, {
    key: "setLabel",
    value: function setLabel(label) {
      this.label = label;
    }
  }, {
    key: "setOrigin",
    value: function setOrigin(origin) {
      this.origin = origin;
    }
  }, {
    key: "setIsCandidate",
    value: function setIsCandidate(candidate) {
      this.isCandidate = candidate;
    }
  }]);
  return Node;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Node);

/***/ }),

/***/ "./front/js/view/navigation/graph/Tree.js":
/*!************************************************!*\
  !*** ./front/js/view/navigation/graph/Tree.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Node */ "./front/js/view/navigation/graph/Node.js");
/* harmony import */ var _Layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Layout */ "./front/js/view/navigation/graph/Layout.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Tree = /*#__PURE__*/function () {
  /**
   * @class Tree
   * @constructor
   * @description Tree object to store all nodes
   *              Contains an array of Node objects with individual information
   *              and a Layout object to handle node positioning
   * @param {string} url        : Exposed API url to get tree from
   * @param {function} callback : Callback function to call once tree fetching is done
   **/
  function Tree(options) {
    _classCallCheck(this, Tree);
    this.style = options.style;
    this._data = options.data;
    this.nodes = []; // {array}    Nodes array
    this.layout = null; // {object}   Layout controller
    this.callback = options.callback; // {function} End of loading callback
    this._loadNodes(); // Fill nodes array
  }
  _createClass(Tree, [{
    key: "destroy",
    value: function destroy() {
      this.layout.destroy();
      for (var i = 0; i < this.nodes.length; ++i) {
        this.nodes[i].destroy();
      }
      Utils.removeAllObjectKeys(this);
    }

    /**
     * @method loadNodes
     * @private
     * @description GET the API url and build Tree object
     **/
  }, {
    key: "_loadNodes",
    value: function _loadNodes() {
      this._addNode(this._data.genres, null); // Make tree first iteration, recursive call
      this.layout = new _Layout__WEBPACK_IMPORTED_MODULE_1__["default"](this.style); // Arrange layout (set cartesian coordinates)
      this.layout.arrange(this.nodes); // Orientation (0: root top || 1: root: right || 2: root bottom || 3: root left)
    }

    /**
     * @method addNode
     * @private
     * @description Recursive function to add a root and all its children
     * @param {object} toAdd  : The root node to add. Can come straight from the raw JSON of from an existing node
     * @param {object} parent : Parent node, must be null for the root
     **/
  }, {
    key: "_addNode",
    value: function _addNode(toAdd, parent) {
      var node = new _Node__WEBPACK_IMPORTED_MODULE_0__["default"](toAdd, parent, this.style); // Create node
      this.nodes.push(node); // Fill nodes array
      for (var i = 0; i < toAdd.subgenres.length; ++i) {
        // Iterate over children
        this._addNode(toAdd.subgenres[i], node); // Recursive call on each children
      }
    }

    /**
     * @method updateLayout
     * @description Update layout object (musty be called for after each modification in the tree hierrarchy)
     **/
  }, {
    key: "updateLayout",
    value: function updateLayout() {
      this.layout.arrange(this.nodes); // Call layout arrange method
    }

    /**
     * @method reorganizeTree
     * @description Clear and re-create the nodes array, according to hierrarchy contained in root node
     **/
  }, {
    key: "reorganizeTree",
    value: function reorganizeTree() {
      var root = this.nodes[0]; // Save root node
      this.nodes = []; // Clear tree nodes
      this._addNode(root, null); // Build tree again
    }

    /**
     * @method unselectAll
     * @description Unselect every node in tree
     **/
  }, {
    key: "unselectAll",
    value: function unselectAll() {
      for (var i = 0; i < this.nodes.length; ++i) {
        // Iterate over nodes array
        this.nodes[i].unselect(); // Unselect node
      }
    }
  }, {
    key: "layoutSize",
    value: function layoutSize() {
      return this.layout.getSize();
    }
  }]);
  return Tree;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Tree);

/***/ }),

/***/ "./front/js/view/scene/ViewFactory.js":
/*!********************************************!*\
  !*** ./front/js/view/scene/ViewFactory.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _mainpage_MainPageView_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mainpage/MainPageView.js */ "./front/js/view/scene/mainpage/MainPageView.js");
/* harmony import */ var _mainpage_ReleaseArtistView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mainpage/ReleaseArtistView.js */ "./front/js/view/scene/mainpage/ReleaseArtistView.js");
/* harmony import */ var _mainpage_AlbumView_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mainpage/AlbumView.js */ "./front/js/view/scene/mainpage/AlbumView.js");
/* harmony import */ var _mainpage_GenreView_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mainpage/GenreView.js */ "./front/js/view/scene/mainpage/GenreView.js");
/* harmony import */ var _mainpage_LabelView_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mainpage/LabelView.js */ "./front/js/view/scene/mainpage/LabelView.js");
/* harmony import */ var _mainpage_GenreGraphView_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mainpage/GenreGraphView.js */ "./front/js/view/scene/mainpage/GenreGraphView.js");
/* harmony import */ var _mainpage_AllReleaseArtistView_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mainpage/AllReleaseArtistView.js */ "./front/js/view/scene/mainpage/AllReleaseArtistView.js");
/* harmony import */ var _mainpage_AllGenreView_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mainpage/AllGenreView.js */ "./front/js/view/scene/mainpage/AllGenreView.js");
/* harmony import */ var _mainpage_AllLabelView_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mainpage/AllLabelView.js */ "./front/js/view/scene/mainpage/AllLabelView.js");
/* harmony import */ var _menupage_MenuPageView_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./menupage/MenuPageView.js */ "./front/js/view/scene/menupage/MenuPageView.js");
/* harmony import */ var _menupage_AdminPageView_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./menupage/AdminPageView.js */ "./front/js/view/scene/menupage/AdminPageView.js");
/* harmony import */ var _menupage_AccountPageView_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./menupage/AccountPageView.js */ "./front/js/view/scene/menupage/AccountPageView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Single views */




/* Special views */

/* All item view */



/* Nav views */



var Classes = {
  MainPageView: _mainpage_MainPageView_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  ReleaseArtistView: _mainpage_ReleaseArtistView_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  AlbumView: _mainpage_AlbumView_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  GenreView: _mainpage_GenreView_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  LabelView: _mainpage_LabelView_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  GenreGraphView: _mainpage_GenreGraphView_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  AllReleaseArtistView: _mainpage_AllReleaseArtistView_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  AllGenreView: _mainpage_AllGenreView_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  AllLabelView: _mainpage_AllLabelView_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  MenuPageView: _menupage_MenuPageView_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  AdminPageView: _menupage_AdminPageView_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  AccountPageView: _menupage_AccountPageView_js__WEBPACK_IMPORTED_MODULE_11__["default"]
};
var ViewFactory = /*#__PURE__*/_createClass(
/** @summary <h1>View factory for all usages in single page app</h1>
 * @author Arthur Beaulieu
 * @since September 2020
 * @description <blockquote>This class is a factory pattern that will build any view used in ManaZeak. Sending the
 * view name along its options will make this class returns it. The view name must be included in the CLasses definition
 * in this file, without the <code>View</code> suffix.</blockquote>
 * @param {string} name - The view name, must be listed in Classes defined in this file, without the View suffix
 * @param {object} [options={}] - The view option object, see child class for usage
 * @return {object} - The requested view as an object */
function ViewFactory(name) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  _classCallCheck(this, ViewFactory);
  return new Classes["".concat(name, "View")](options);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ViewFactory);

/***/ }),

/***/ "./front/js/view/scene/mainpage/AlbumView.js":
/*!***************************************************!*\
  !*** ./front/js/view/scene/mainpage/AlbumView.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_PlayableView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/PlayableView */ "./front/js/view/scene/utils/PlayableView.js");
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
/* harmony import */ var _context_TrackContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/TrackContext */ "./front/js/view/context/TrackContext.js");
/* harmony import */ var _utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ItemViewHelperMixin */ "./front/js/view/scene/utils/ItemViewHelperMixin.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var AlbumView = /*#__PURE__*/function (_ItemViewHelperMixin) {
  _inherits(AlbumView, _ItemViewHelperMixin);
  var _super = _createSuper(AlbumView);
  function AlbumView(options) {
    var _this;
    _classCallCheck(this, AlbumView);
    _this = _super.call(this, {
      type: 'item',
      url: "/fragment/library/album/".concat(options.id, "/")
    });
    _this._id = options.id;
    _this._artist = '';
    _this._title = '';
    _this._performers = [];
    _this._allExpander = null;
    _this._isExpanded = false;
    _this._scrolls = [];
    _this._scrollTrack = null; /* Required to be individual, see refs in file */

    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._events.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(AlbumView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AlbumView.prototype), "destroy", this).call(this);
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
      mzk.ui.restoreGradientColor();
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        // Cover determines when to free view from loading overlay
        var cover = _this2.dom.querySelector('#album-picture').children[0].children[0].children[0];
        cover.addEventListener('error', mzk.ui.stopLoading.bind(mzk.ui));
        cover.addEventListener('load', function () {
          var avgRGB = Utils.getAverageRGB(cover);
          var luminance = Utils.getRelativeLuminance(avgRGB);
          var lightness = Utils.getImageLightness(cover);
          if (luminance > 0.5 || lightness > 0.5) {
            var lightValue = lightness > luminance ? lightness : luminance;
            avgRGB = Utils.hexToRgb(Utils.lightenDarkenColor(avgRGB, -((lightValue - 0.5) * 100)));
          } else if (luminance < 0.5 || lightness < 0.5) {
            var _lightValue = lightness > luminance ? luminance : lightness;
            avgRGB = Utils.hexToRgb(Utils.lightenDarkenColor(avgRGB, (0.5 - _lightValue) * 100));
          }
          mzk.ui.setGradientColor(avgRGB);
          mzk.ui.stopLoading();
        });
        _this2._artist = _this2.dom.querySelector('#release-artist').innerHTML;
        _this2._title = _this2.dom.querySelector('#album-title').innerHTML;
        _this2._performers = _this2.dom.querySelector('#album-performers').children;
        _this2._tracks = _this2.dom.querySelector('#album-tracks').children;
        _this2.dom.querySelector('#album-duration').innerHTML = Utils.secondsToTimecode(parseFloat(_this2.dom.querySelector('#album-duration').innerHTML));
        var date = _this2.dom.querySelector('#album-release-date').innerHTML;
        _this2.dom.querySelector('#album-release-date').innerHTML = Utils.formatDate(date);
        _this2.dom.querySelector('#album-year').innerHTML = new Date(date).getFullYear();
        for (var i = 0; i < _this2._tracks.length; ++i) {
          var duration = _this2._tracks[i].getElementsByClassName('track-duration')[0];
          duration.innerHTML = Utils.secondsToTimecode(parseFloat(duration.innerHTML));
        }

        // Global view scroll
        _this2._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: _this2.dom,
          style: {
            color: '#56D45B'
          }
        }));

        // Scroll on track must be separated from other scrolls
        _this2._scrollTrack = new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: _this2.dom.querySelector('#album-tracks'),
          style: {
            color: '#56D45B'
          }
        });

        // Update tracks bc of scroll DOM
        _this2._tracks = _this2.dom.querySelector('#album-tracks').children[0].children[0].children;
        setTimeout(function () {
          _this2._scrollTrack.updateScrollbar();
        });

        // <scrollbar to performers for better UI
        _this2._buildAlbumPerformers();
        // Track context on container
        _this2._trackContext = new _context_TrackContext__WEBPACK_IMPORTED_MODULE_2__["default"]({
          target: _this2.dom.querySelector('#album-tracks'),
          name: 'track'
        });
        _this2._allExpander = _this2.dom.querySelector('#album-all-expander');
        /* Build albums */
        _this2._albums = _this2.dom.querySelector('#released-albums');
        _this2._buildArtistAlbums();
        _this2._handleAlbumSorting();
        requestAnimationFrame(function () {
          // Update playing track if necessary
          if (mzk.ctrl.playingId) {
            _this2._updatePlaying({
              id: mzk.ctrl.playingId
            });
          }
        });
        resolve();
      });
    }
  }, {
    key: "_buildAlbumPerformers",
    value: function _buildAlbumPerformers() {
      var _this3 = this;
      if (this._performers.length > 8) {
        this.dom.getElementsByClassName('album-container')[0].style.height = '78rem';
        this.dom.querySelector('#album-performers').style.height = '200px';
        // Ensure height is properly applied before creating scroll on performers
        requestAnimationFrame(function () {
          _this3._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
            target: _this3.dom.querySelector('#album-performers'),
            style: {
              color: '#56D45B'
            }
          }));
          // Update performers bc of scroll DOM
          _this3._performers = _this3.dom.querySelector('#album-performers').children[0].children[0].children;
        });
      } else {
        this.dom.getElementsByClassName('album-container')[0].style.height = '68.1em';
        this.dom.querySelector('#album-performers').style.overflow = 'hidden';
      }
    }
  }, {
    key: "_buildArtistAlbums",
    value: function _buildArtistAlbums() {
      var _this$_albums;
      if ((_this$_albums = this._albums) !== null && _this$_albums !== void 0 && _this$_albums.children) {
        for (var i = 0; i < this._albums.children.length; ++i) {
          var title = this._albums.children[i].lastElementChild.innerHTML;
          if (title.includes(' EP')) {
            title = title.replace(' EP', '');
            this._albums.children[i].querySelector('.ep-sp').innerHTML = 'EP';
          }
          if (title.includes(' - Single')) {
            title = title.replace(' - Single', '');
            this._albums.children[i].querySelector('.ep-sp').innerHTML = 'SP';
          }
          // Update album title if needed
          this._albums.children[i].lastElementChild.innerHTML = title;
          this._albums.children[i].addEventListener('click', this._albumClicked);
        }
        this._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: this._albums,
          horizontal: true,
          style: {
            color: '#56D45B'
          }
        }));
        this._albums = this._albums.children[0].children[0];
        this.updateScrollbars();
      }
    }
  }, {
    key: "_handleAlbumSorting",
    value: function _handleAlbumSorting() {
      var _this4 = this;
      var sortArtistReleases = this.dom.querySelector('#sort-artist-releases');
      sortArtistReleases.addEventListener('click', function () {
        sortArtistReleases.classList.toggle('active');
        var elements = [].slice.call(_this4._albums.children);
        elements = elements.reverse();
        for (var i = 0; i < _this4._albums.children.length; ++i) {
          _this4._albums.children[i].remove();
        }
        for (var _i = 0; _i < elements.length; ++_i) {
          _this4._albums.appendChild(elements[_i]);
        }
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      var _this5 = this;
      _get(_getPrototypeOf(AlbumView.prototype), "_events", this).call(this);
      return new Promise(function (resolve, reject) {
        _this5._evtIds.push(Evts.addEvent('click', _this5.dom.querySelector('#album-picture'), _this5._coverClicked, _this5));
        // On each track, listen to click evts, 
        _this5._trackEvts();
        for (var i = 0; i < _this5._performers.length; ++i) {
          _this5._evtIds.push(Evts.addEvent('click', _this5._performers[i], _this5._artistClicked, _this5._performers[i]));
        }
        var rlArtist = _this5.dom.querySelector('#release-artist'); // Text artist name
        var rlArtistContainer = _this5.dom.querySelector('#release-artist-container'); // Artist picture
        _this5._evtIds.push(Evts.addEvent('click', rlArtistContainer, _this5._artistClicked, rlArtist));
        _this5._evtIds.push(Evts.addEvent('click', rlArtist, _this5._artistClicked, rlArtist));
        var label = _this5.dom.querySelector('#album-label');
        _this5._evtIds.push(Evts.addEvent('click', label, _this5._labelClicked, label));
        var queueAlbum = _this5.dom.querySelector('#queue-album'); // Artist picture
        _this5._evtIds.push(Evts.addEvent('click', queueAlbum, _this5._queueAlbum, _this5));
        _this5.dom.querySelector('#album-tracks').addEventListener('contextmenu', function (event) {
          event.preventDefault();
          if (_this5.dom.querySelector('#album-tracks').contains(_this5._trackContext.dom)) {
            _this5._trackContext.close();
          } else {
            _this5._contextClicked(event);
          }
        });
        _this5._evtIds.push(Evts.addEvent('click', _this5._allExpander, _this5._toggleAllTracks, _this5));
        var _loop = function _loop(_i2) {
          if (_this5._id === _this5._albums.children[_i2].dataset.id) {
            setTimeout(function () {
              _this5._albums.scrollLeft = _this5._albums.children[_i2].offsetLeft - _this5._albums.clientWidth / 2 + _this5._albums.children[_i2].clientWidth / 2;
              _this5._albums.children[_i2].classList.add('selected');
            });
            return "break";
          }
        };
        for (var _i2 = 0; _i2 < _this5._albums.children.length; ++_i2) {
          var _ret = _loop(_i2);
          if (_ret === "break") break;
        }
        resolve();
      });
    }
  }, {
    key: "_trackEvts",
    value: function _trackEvts() {
      for (var i = 0; i < this._tracks.length; ++i) {
        this._evtIds.push(Evts.addEvent('click', this._tracks[i].querySelector('.track-title').children[0], this._trackTitleClicked, {
          tracks: this._tracks,
          index: i
        }));
        this.__evtArtistsList('performers', this._tracks[i]);
        this.__evtArtistsList('composers', this._tracks[i]);
        this.__evtArtistsList('lyricists', this._tracks[i]);
        this.__evtArtistsList('producers', this._tracks[i]);
        this.__evtArtistsList('engineers', this._tracks[i]);
        var isrc = this._tracks[i].querySelector('.track-isrc');
        if (isrc.textContent.replaceAll('\n', '').replaceAll(' ', '') === '') {
          isrc.parentNode.remove();
        }
        var bpmKey = this._tracks[i].querySelector('.track-bpm-key');
        if (bpmKey.textContent.replaceAll('\n', '').replaceAll(' ', '') === '') {
          bpmKey.parentNode.remove();
        }
        var genres = this._tracks[i].querySelector('.track-genres');
        for (var _i3 = 0; _i3 < genres.children.length; ++_i3) {
          this._evtIds.push(Evts.addEvent('click', genres.children[_i3], this._genreClicked, genres.children[_i3]));
        }
        if (genres.children.length === 0) {
          genres.parentNode.remove();
        }
        var expander = this._tracks[i].getElementsByClassName('toggle-track-expand')[0];
        this._tracks[i].scroll = this._scrollTrack;
        this._evtIds.push(Evts.addEvent('click', expander, this._expandTrackClicked, this._tracks[i]));
      }
    }
  }, {
    key: "__evtArtistsList",
    value: function __evtArtistsList(type, track) {
      var list = track.querySelector(".track-".concat(type));
      for (var i = 0; i < list.children.length; ++i) {
        this._evtIds.push(Evts.addEvent('click', list.children[i], this._artistClicked, list.children[i]));
      }
      if (list.children.length === 0) {
        list.parentNode.remove();
      }
    }
  }, {
    key: "_viewReady",
    value: function _viewReady() {
      return new Promise(function (resolve) {
        Evts.publish('SceneViewReady', {
          keepLoading: true
        });
        resolve();
      });
    }

    /* UI element callbacks */
  }, {
    key: "_trackTitleClicked",
    value: function _trackTitleClicked(e) {
      e.stopPropagation();
      // This as special this scope, see event definition
      mzk.setModal({
        name: 'TrackDetail',
        tracks: this.tracks,
        index: this.index,
        id: this.tracks[this.index].dataset.id
      });
    }
  }, {
    key: "_coverClicked",
    value: function _coverClicked() {
      mzk.setModal({
        name: 'AlbumCover',
        path: this.dom.querySelector('#album-picture').children[0].children[0].children[0].src,
        title: this.dom.querySelector('#release-artist').nextElementSibling.innerHTML,
        artist: this.dom.querySelector('#release-artist').innerHTML
      });
    }
  }, {
    key: "_expandTrackClicked",
    value: function _expandTrackClicked(e) {
      var _this6 = this;
      e.stopPropagation();
      this.classList.toggle('expanded');
      if (this.classList.contains('expanded')) {
        var height = this.querySelector('.track-detailed-info').getBoundingClientRect().height;
        this.style.height = "calc(5rem + ".concat(height, "px + var(--padding))"); // Here padding is expanded moodbar height
        this.getElementsByClassName('toggle-track-expand-img')[0].src = '/static/img/navigation/nav-up.svg';
      } else {
        this.style.height = '5rem'; // Restore to css value
        this.getElementsByClassName('toggle-track-expand-img')[0].src = '/static/img/navigation/nav-down.svg';
      }
      // Update scrollbar height
      // setTimeout to ensure height is properly computed.
      // Additionnal RaF is in case the scrollbar just appeared
      // after this user action, therefor it needs to be updated again
      // to properly be positioned on the scroll gutter.
      setTimeout(function () {
        if (_this6.scroll) {
          _this6.scroll.updateScrollbar();
        }
        requestAnimationFrame(function () {
          if (_this6.scroll) {
            _this6.scroll.updateScrollbar();
          }
        });
      }, 200); /* Match height transition duration in _mainpage.scss */
    }
  }, {
    key: "_contextClicked",
    value: function _contextClicked(event) {
      var track = event.target.closest('.track');
      if (track.dataset.id !== '') {
        // From track root div, 3 lvl down, must match HTML struct
        var title = track.children[0].children[0].children[0];
        var id = track.dataset.id;
        this._trackContext.open(event, {
          id: id,
          name: "".concat(document.getElementById('release-artist').innerHTML, " - ").concat(title.textContent)
        });
      }
    }
  }, {
    key: "_queueAlbum",
    value: function _queueAlbum() {
      var tracklist = [];
      for (var i = 0; i < this._tracks.length; ++i) {
        tracklist.push(this._tracks[i].dataset.id);
      }
      mzk.queue({
        type: 'tracklist',
        ids: tracklist
      });
    }
  }, {
    key: "_toggleAllTracks",
    value: function _toggleAllTracks() {
      if (this._isExpanded === false) {
        this._expandAllTracks();
      } else {
        this._collapseAllTracks();
      }
    }
  }, {
    key: "_collapseAllTracks",
    value: function _collapseAllTracks() {
      var _this7 = this;
      this._isExpanded = false;
      this._allExpander.src = '/static/img/navigation/nav-down.svg';
      for (var i = 0; i < this._tracks.length; ++i) {
        this._tracks[i].classList.remove('expanded');
        this._tracks[i].style.height = '5rem'; // Restore to css value
        this._tracks[i].getElementsByClassName('toggle-track-expand-img')[0].src = '/static/img/navigation/nav-down.svg';
      }
      // Update scrollbar height
      setTimeout(function () {
        var _this7$_scrollTrack;
        if ((_this7$_scrollTrack = _this7._scrollTrack) !== null && _this7$_scrollTrack !== void 0 && _this7$_scrollTrack.updateScrollbar) {
          _this7._scrollTrack.updateScrollbar();
        }
      }, 200); /* Match height transition duration in _mainpage.scss */
    }
  }, {
    key: "_expandAllTracks",
    value: function _expandAllTracks() {
      var _this8 = this;
      this._isExpanded = true;
      this._allExpander.src = '/static/img/navigation/nav-up.svg';
      for (var i = 0; i < this._tracks.length; ++i) {
        this._tracks[i].classList.add('expanded');
        var height = this._tracks[i].querySelector('.track-detailed-info').getBoundingClientRect().height;
        this._tracks[i].style.height = "calc(5rem + ".concat(height, "px + var(--padding))"); // Here padding is expanded moodbar height
        this._tracks[i].getElementsByClassName('toggle-track-expand-img')[0].src = '/static/img/navigation/nav-up.svg';
      }
      // Update scrollbar height
      // setTimeout to ensure height is properly computed.
      // Additionnal RaF is in case the scrollbar just appeared
      // after this user action, therefor it needs to be updated again
      // to properly be positioned on the scroll gutter.
      setTimeout(function () {
        if (_this8._scrollTrack) {
          _this8._scrollTrack.updateScrollbar();
        }
        requestAnimationFrame(function () {
          if (_this8._scrollTrack) {
            _this8._scrollTrack.updateScrollbar();
          }
        });
      }, 200); /* Match height transition duration in _mainpage.scss */
    }
  }, {
    key: "getPlayObjectFromId",
    value: function getPlayObjectFromId(id) {
      return this._buildPlaybackObject(id);
    }

    /* Handling click on tracks and callbacks */
  }, {
    key: "_buildPlaybackObject",
    value: function _buildPlaybackObject(currentId) {
      var album = {
        id: this._id,
        type: 'Album',
        cover: this.dom.querySelector('#album-picture').children[0].children[0].children[0].src,
        title: this.dom.querySelector('#album-title').textContent,
        artist: this.dom.querySelector('#release-artist').textContent,
        tracks: [],
        playingIdx: 0
      };
      for (var i = 0; i < this._tracks.length; ++i) {
        album.tracks.push(this._buildTrackObject(this._tracks[i]));
        if (this._tracks[i].dataset.id === currentId) {
          album.playingIdx = i;
        }
      }
      return album;
    }
  }, {
    key: "_buildTrackObject",
    value: function _buildTrackObject(track) {
      return {
        id: track.dataset.id,
        title: track.children[0].children[0].children[0].textContent,
        // TODO track artist instead of release artist
        artist: this.dom.querySelector('#release-artist').textContent,
        cover: this.dom.querySelector('#album-picture').children[0].children[0].children[0].src,
        duration: track.children[0].children[2].innerHTML,
        mood: track.dataset.mood
      };
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return "Album <b>".concat(this._title, "</b> \u2013 ").concat(this._artist);
    }
  }]);
  return AlbumView;
}((0,_utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_3__["default"])(_utils_PlayableView__WEBPACK_IMPORTED_MODULE_0__["default"]));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AlbumView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/AllGenreView.js":
/*!******************************************************!*\
  !*** ./front/js/view/scene/mainpage/AllGenreView.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var AllGenreView = /*#__PURE__*/function (_SceneView) {
  _inherits(AllGenreView, _SceneView);
  var _super = _createSuper(AllGenreView);
  function AllGenreView(options) {
    var _this;
    _classCallCheck(this, AllGenreView);
    _this = _super.call(this, {
      type: 'item',
      url: '/fragment/library/genre/all/'
    });
    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._events.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(AllGenreView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AllGenreView.prototype), "destroy", this).call(this);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        var genres = _this2.dom.querySelector('#genres-container').children;
        if (genres !== null && genres !== void 0 && genres.length) {
          for (var i = 0; i < genres.length; ++i) {
            _this2._evtIds.push(Evts.addEvent('click', genres[i], _this2._genreClicked, genres[i]));
          }
          resolve();
        } else {
          reject();
        }
      });
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      var _this3 = this;
      return new Promise(function (resolve, reject) {
        var genres = _this3.dom.querySelector('#genres-container').children;
        if (genres !== null && genres !== void 0 && genres.length) {
          _this3.dom.querySelector('#genre-count').innerHTML = _this3.dom.querySelector('#genre-count').innerHTML.replace('{x}', genres.length);
          _this3._scroll = new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
            target: _this3.dom,
            style: {
              color: '#56D45B'
            }
          });
          resolve();
        } else {
          reject();
        }
      });
    }
  }, {
    key: "_genreClicked",
    value: function _genreClicked() {
      mzk.setView({
        name: 'Genre',
        id: this.dataset.id
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'All genres and styles';
    }
  }]);
  return AllGenreView;
}(_utils_SceneView__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AllGenreView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/AllLabelView.js":
/*!******************************************************!*\
  !*** ./front/js/view/scene/mainpage/AllLabelView.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AllLabelView = /*#__PURE__*/function (_SceneView) {
  _inherits(AllLabelView, _SceneView);
  var _super = _createSuper(AllLabelView);
  function AllLabelView(options) {
    var _this;
    _classCallCheck(this, AllLabelView);
    _this = _super.call(this, {
      type: 'item',
      url: '/fragment/library/label/all/'
    });
    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._events.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(AllLabelView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AllLabelView.prototype), "destroy", this).call(this);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      return new Promise(function (resolve, reject) {
        console.log('events');
        resolve();
      });
    }
  }, {
    key: "_labelClicked",
    value: function _labelClicked() {
      mzk.setView({
        name: 'Label',
        id: this.dataset.id
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'All labels';
    }
  }]);
  return AllLabelView;
}(_utils_SceneView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AllLabelView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/AllReleaseArtistView.js":
/*!**************************************************************!*\
  !*** ./front/js/view/scene/mainpage/AllReleaseArtistView.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var AllReleaseArtistView = /*#__PURE__*/function (_SceneView) {
  _inherits(AllReleaseArtistView, _SceneView);
  var _super = _createSuper(AllReleaseArtistView);
  function AllReleaseArtistView(options) {
    var _this;
    _classCallCheck(this, AllReleaseArtistView);
    _this = _super.call(this, {
      type: 'item',
      url: '/fragment/library/release-artist/all/'
    });
    _this._fetchWrapper(_this._url).then(_this._events.bind(_assertThisInitialized(_this))) // We listen events first before altering the DOM
    .then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(AllReleaseArtistView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AllReleaseArtistView.prototype), "destroy", this).call(this);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        var artists = _this2.dom.querySelector('#artists-container').children;
        if (artists !== null && artists !== void 0 && artists.length) {
          for (var i = 0; i < artists.length; ++i) {
            _this2._evtIds.push(Evts.addEvent('click', artists[i], _this2._artistClicked, artists[i]));
          }
          resolve();
        } else {
          reject();
        }
      });
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      var _this3 = this;
      return new Promise(function (resolve, reject) {
        var artists = _this3.dom.querySelector('#artists-container').children;
        if (artists !== null && artists !== void 0 && artists.length) {
          _this3.dom.querySelector('#artist-count').innerHTML = _this3.dom.querySelector('#artist-count').innerHTML.replace('{x}', artists.length);
          _this3._scroll = new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
            target: _this3.dom,
            style: {
              color: '#56D45B'
            }
          });
          resolve();
        } else {
          reject();
        }
      });
    }
  }, {
    key: "_artistClicked",
    value: function _artistClicked() {
      mzk.setView({
        name: 'ReleaseArtist',
        id: this.dataset.id
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'All release artists';
    }
  }]);
  return AllReleaseArtistView;
}(_utils_SceneView__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AllReleaseArtistView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/GenreGraphView.js":
/*!********************************************************!*\
  !*** ./front/js/view/scene/mainpage/GenreGraphView.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
/* harmony import */ var _navigation_Graph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../navigation/Graph */ "./front/js/view/navigation/Graph.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var GenreGraphView = /*#__PURE__*/function (_SceneView) {
  _inherits(GenreGraphView, _SceneView);
  var _super = _createSuper(GenreGraphView);
  function GenreGraphView() {
    var _this;
    _classCallCheck(this, GenreGraphView);
    _this = _super.call(this, {
      type: 'graph',
      url: '/fragment/library/genre/genre-graph/'
    });
    _this._graph = null;
    _this._dataPath = '/static/GenresTaxonomy.json';
    _this._data = {};
    _this._genres = {};
    _this._fetchWrapper(_this._url).then(_this._fetchData.bind(_assertThisInitialized(_this), _this._dataPath)).then(_this._init.bind(_assertThisInitialized(_this))).then(_this._viewReady) // We must ensure DOM is computed to its height/width
    .then(_this._buildGraph.bind(_assertThisInitialized(_this)))["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(GenreGraphView, [{
    key: "destroy",
    value: function destroy() {
      this._graph.destroy();
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fetchData",
    value: function _fetchData(url) {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        mzk.kom.get(url).then(function (response) {
          try {
            _this2._data = response;
            resolve();
          } catch (_unused) {
            reject();
          }
        })["catch"](reject);
      });
    }
  }, {
    key: "_init",
    value: function _init() {
      var _this3 = this;
      return new Promise(function (resolve) {
        var genres = _this3._data.genres.subgenres;
        for (var i = 0; i < genres.length; ++i) {
          _this3._genres[genres[i].name] = genres[i];
        }
        resolve();
      });
    }
  }, {
    key: "_buildGraph",
    value: function _buildGraph() {
      var _this4 = this;
      return new Promise(function (resolve) {
        _this4._graph = new _navigation_Graph__WEBPACK_IMPORTED_MODULE_1__["default"]({
          cellClicked: _this4._genreClicked.bind(_this4),
          data: _this4._data,
          container: _this4.dom.querySelector('#graph-container'),
          style: {
            node: {
              background: 'rgb(225, 225, 225)',
              selectedBackground: 'rgb(225, 125, 125)',
              hoveredBackground: 'rgb(125, 125, 255)',
              fontSize: 16,
              height: 32,
              maxTextWidth: 120,
              paddingH: 70,
              paddingV: 20,
              radius: 5,
              width: 140
            },
            tree: {
              airspaceH: 420,
              airspaceV: 10,
              connectorColor: '#FFFFFF',
              orientation: 3
            }
          }
        });
        resolve();
      });
    }
  }, {
    key: "_genreClicked",
    value: function _genreClicked() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (data.name && data.info) {
        document.getElementById('genre-name').innerHTML = data.name;
        document.getElementById('genre-start').innerHTML = data.info.start;
        document.getElementById('genre-cover').src = "/resources/genre_cover/".concat(data.name, ".jpg");
        document.getElementById('graph-aside').style.opacity = 1;
      } else {
        document.getElementById('graph-aside').style.opacity = 0;
      }
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'Genres and styles family tree';
    }
  }]);
  return GenreGraphView;
}(_utils_SceneView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GenreGraphView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/GenreView.js":
/*!***************************************************!*\
  !*** ./front/js/view/scene/mainpage/GenreView.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_PlayableView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/PlayableView */ "./front/js/view/scene/utils/PlayableView.js");
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
/* harmony import */ var _context_TrackContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context/TrackContext */ "./front/js/view/context/TrackContext.js");
/* harmony import */ var _utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ItemViewHelperMixin */ "./front/js/view/scene/utils/ItemViewHelperMixin.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var GenreView = /*#__PURE__*/function (_ItemViewHelperMixin) {
  _inherits(GenreView, _ItemViewHelperMixin);
  var _super = _createSuper(GenreView);
  function GenreView(options) {
    var _this;
    _classCallCheck(this, GenreView);
    _this = _super.call(this, {
      type: 'item',
      url: "/fragment/library/genre/".concat(options.id, "/")
    });
    _this._id = options.id;
    _this._genre = '';
    _this._artists = [];
    _this._albums = [];
    _this._scrolls = [];
    _this._allExpander = null;
    _this._isExpanded = true;
    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this)))
    //.then(this._prepareUi.bind(this))
    .then(_this._events.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(GenreView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(GenreView.prototype), "destroy", this).call(this);
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        _this2._genre = _this2.dom.querySelector('#genre-name').innerHTML;
        _this2._artists = _this2.dom.querySelectorAll('.artist-info');
        _this2._albums = _this2.dom.querySelectorAll('.album-info');
        _this2._tracks = _this2.dom.querySelectorAll('.track');
        _this2._allExpander = _this2.dom.querySelector('#all-expander');
        for (var i = 0; i < _this2._tracks.length; ++i) {
          var duration = _this2._tracks[i].getElementsByClassName('track-duration')[0];
          duration.innerHTML = Utils.secondsToTimecode(parseFloat(duration.innerHTML));
        }
        _this2._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: _this2.dom,
          style: {
            color: '#56D45B'
          }
        }));
        // Track context on container
        _this2._trackContext = new _context_TrackContext__WEBPACK_IMPORTED_MODULE_2__["default"]({
          target: _this2.dom.querySelector('#genre-content'),
          name: 'track'
        });
        // Update playing track if necessary
        if (mzk.ctrl.playingId) {
          _this2._updatePlaying({
            id: mzk.ctrl.playingId
          });
        }
        resolve();
      });
    }
  }, {
    key: "_prepareUi",
    value: function _prepareUi() {
      var _this3 = this;
      return new Promise(function (resolve, reject) {
        mzk.data.getGenreInfo(_this3._genre).then(function () {
          resolve();
        })["catch"](reject);
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      var _this4 = this;
      _get(_getPrototypeOf(GenreView.prototype), "_events", this).call(this);
      return new Promise(function (resolve) {
        _this4._evtIds.push(Evts.addEvent('click', _this4._allExpander, _this4._toggleAll, _this4));
        for (var i = 0; i < _this4._artists.length; ++i) {
          _this4._evtIds.push(Evts.addEvent('click', _this4._artists[i], _this4._artistClicked, _this4._artists[i]));
        }
        for (var _i = 0; _i < _this4._albums.length; ++_i) {
          _this4._evtIds.push(Evts.addEvent('click', _this4._albums[_i], _this4._albumClicked, _this4._albums[_i]));
        }

        // On each track, listen to click evts, 
        _this4._trackEvts();
        _this4.dom.querySelector('#genre-content').addEventListener('contextmenu', function (event) {
          event.preventDefault();
          if (_this4.dom.querySelector('#genre-content').contains(_this4._trackContext.dom)) {
            _this4._trackContext.close();
          } else {
            _this4._contextClicked(event);
          }
        });
        var collapsers = _this4.dom.querySelectorAll('.collapse-artist');
        for (var _i2 = 0; _i2 < collapsers.length; ++_i2) {
          _this4._evtIds.push(Evts.addEvent('click', collapsers[_i2], _this4._toggleArtistExpansion.bind(_this4, collapsers[_i2]), _this4));
        }
        var expanders = _this4.dom.querySelectorAll('.expand-artist');
        for (var _i3 = 0; _i3 < expanders.length; ++_i3) {
          _this4._evtIds.push(Evts.addEvent('click', expanders[_i3], _this4._expandArtist.bind(_this4, expanders[_i3]), _this4));
        }
        resolve();
      });
    }
  }, {
    key: "_trackEvts",
    value: function _trackEvts() {
      for (var i = 0; i < this._tracks.length; ++i) {
        this._evtIds.push(Evts.addEvent('click', this._tracks[i].querySelector('.track-title').children[0], this._trackTitleClicked, {
          tracks: this._tracks,
          index: i
        }));
        this.__evtArtistsList('performers', this._tracks[i]);
        this.__evtArtistsList('composers', this._tracks[i]);
        this.__evtArtistsList('lyricists', this._tracks[i]);
        this.__evtArtistsList('producers', this._tracks[i]);
        this.__evtArtistsList('engineers', this._tracks[i]);
        var isrc = this._tracks[i].querySelector('.track-isrc');
        if (isrc.textContent.replaceAll('\n', '').replaceAll(' ', '') === '') {
          isrc.parentNode.remove();
        }
        var bpmKey = this._tracks[i].querySelector('.track-bpm-key');
        if (bpmKey.textContent.replaceAll('\n', '').replaceAll(' ', '') === '') {
          bpmKey.parentNode.remove();
        }
        var genres = this._tracks[i].querySelector('.track-genres');
        for (var _i4 = 0; _i4 < genres.children.length; ++_i4) {
          this._evtIds.push(Evts.addEvent('click', genres.children[_i4], this._genreClicked, genres.children[_i4]));
        }
        if (genres.children.length === 0) {
          genres.parentNode.remove();
        }
        var expander = this._tracks[i].getElementsByClassName('toggle-track-expand')[0];
        this._evtIds.push(Evts.addEvent('click', expander, this._expandTrackClicked, this._tracks[i]));
      }
    }
  }, {
    key: "__evtArtistsList",
    value: function __evtArtistsList(type, track) {
      var list = track.querySelector(".track-".concat(type));
      for (var i = 0; i < list.children.length; ++i) {
        this._evtIds.push(Evts.addEvent('click', list.children[i], this._artistClicked, list.children[i]));
      }
      if (list.children.length === 0) {
        list.parentNode.remove();
      }
    }
  }, {
    key: "_expandTrackClicked",
    value: function _expandTrackClicked(e) {
      var _this5 = this;
      e.stopPropagation();
      this.classList.toggle('expanded');
      if (this.classList.contains('expanded')) {
        var height = this.querySelector('.track-detailed-info').getBoundingClientRect().height;
        this.style.height = "calc(5rem + ".concat(height, "px + var(--padding))"); // Here padding is expanded moodbar height
        this.getElementsByClassName('toggle-track-expand-img')[0].src = '/static/img/navigation/nav-up.svg';
      } else {
        this.style.height = '5rem'; // Restore to css value
        this.getElementsByClassName('toggle-track-expand-img')[0].src = '/static/img/navigation/nav-down.svg';
      }
      // Update scrollbar height
      setTimeout(function () {
        _this5.scrollIntoView({
          behavior: 'smooth',
          block: 'nearest',
          inline: 'start'
        });
      }, 200); /* Match height transition duration in _mainpage.scss */
    }
  }, {
    key: "_contextClicked",
    value: function _contextClicked(event) {
      var track = event.target.closest('.track');
      if (track.dataset.id !== '') {
        // From track root div, 3 lvl down, must match HTML struct
        var title = track.children[0].children[0].children[0];
        var artist = track.children[0].children[3].children[0];
        var id = track.dataset.id;
        this._trackContext.open(event, {
          id: id,
          name: "".concat(artist.textContent, " - ").concat(title.textContent)
        });
      }
    }
  }, {
    key: "_buildPlaybackObject",
    value: function _buildPlaybackObject(currentId) {
      var genre = {
        id: this._id,
        type: 'Genre',
        cover: this.dom.querySelector('#genre-picture').children[0].children[0].children[0].src,
        title: this.dom.querySelector('#genre-name').innerHTML,
        artist: '',
        tracks: [],
        playingIdx: 0
      };
      for (var i = 0; i < this._tracks.length; ++i) {
        genre.tracks.push(this._buildTrackObject(this._tracks[i]));
        if (this._tracks[i].dataset.id === currentId) {
          genre.playingIdx = i;
        }
      }
      return genre;
    }
  }, {
    key: "_buildTrackObject",
    value: function _buildTrackObject(track) {
      return {
        id: track.dataset.id,
        title: track.children[0].children[0].textContent,
        // TODO track artist instead of release artist
        artist: track.parentNode.parentNode.parentNode.parentNode.querySelector('.artist-info').firstElementChild.textContent,
        cover: track.parentNode.parentNode.parentNode.parentNode.querySelector('.album-cover').src,
        duration: track.children[0].children[2].innerHTML,
        mood: track.dataset.mood
      };
    }

    /* Toggle/Collapse */
  }, {
    key: "_toggleArtistExpansion",
    value: function _toggleArtistExpansion(collapser) {
      for (var i = 0; i < this._artists.length; ++i) {
        if (this._artists[i].dataset.id === collapser.dataset.id) {
          if (this._artists[i].parentNode.classList.contains('collapsed')) {
            this._expandArtist(collapser);
          } else {
            this._collapseArtist(collapser);
          }
          break;
        }
      }
    }
  }, {
    key: "_collapseArtist",
    value: function _collapseArtist(collapser) {
      for (var i = 0; i < this._artists.length; ++i) {
        if (this._artists[i].dataset.id === collapser.dataset.id) {
          if (!collapser.classList.contains('expand-artist')) {
            collapser.src = 'static/img/navigation/nav-down.svg';
          }
          this._artists[i].parentNode.classList.add('collapsed');
          break;
        }
      }
    }
  }, {
    key: "_expandArtist",
    value: function _expandArtist(collapser) {
      for (var i = 0; i < this._artists.length; ++i) {
        if (this._artists[i].dataset.id === collapser.dataset.id) {
          if (!collapser.classList.contains('expand-artist')) {
            // Update icon if event doesn't come from expander
            collapser.src = 'static/img/navigation/nav-up.svg';
          } else {
            // When expanding we must ensure to restore collapser icon to initial state
            this._artists[i].parentNode.children[0].children[0].src = 'static/img/navigation/nav-up.svg';
          }
          this._artists[i].parentNode.classList.remove('collapsed');
          break;
        }
      }
    }
  }, {
    key: "_toggleAll",
    value: function _toggleAll() {
      if (this._isExpanded === false) {
        this._expandAll();
      } else {
        this._collapseAll();
      }
    }
  }, {
    key: "_collapseAll",
    value: function _collapseAll() {
      this._isExpanded = false;
      this._allExpander.src = '/static/img/navigation/nav-down.svg';
      for (var i = 0; i < this._artists.length; ++i) {
        this._artists[i].parentNode.children[0].children[0].src = 'static/img/navigation/nav-down.svg';
        this._artists[i].parentNode.classList.add('collapsed');
      }
    }
  }, {
    key: "_expandAll",
    value: function _expandAll() {
      this._isExpanded = true;
      this._allExpander.src = '/static/img/navigation/nav-up.svg';
      for (var i = 0; i < this._artists.length; ++i) {
        this._artists[i].parentNode.children[0].children[0].src = 'static/img/navigation/nav-up.svg';
        this._artists[i].parentNode.classList.remove('collapsed');
      }
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return "Genre <b>".concat(this._genre, "</b>");
    }
  }]);
  return GenreView;
}((0,_utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_3__["default"])(_utils_PlayableView__WEBPACK_IMPORTED_MODULE_0__["default"]));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GenreView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/LabelView.js":
/*!***************************************************!*\
  !*** ./front/js/view/scene/mainpage/LabelView.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
/* harmony import */ var _utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ItemViewHelperMixin */ "./front/js/view/scene/utils/ItemViewHelperMixin.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var LabelView = /*#__PURE__*/function (_ItemViewHelperMixin) {
  _inherits(LabelView, _ItemViewHelperMixin);
  var _super = _createSuper(LabelView);
  function LabelView(options) {
    var _this;
    _classCallCheck(this, LabelView);
    _this = _super.call(this, {
      type: 'item',
      url: "/fragment/library/label/".concat(options.id, "/")
    });
    _this._name = '';
    _this._albums = [];
    _this._artists = [];
    _this._scrolls = [];
    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._events.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(LabelView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(LabelView.prototype), "destroy", this).call(this);
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        var _this2$_albums, _this2$_artists;
        _this2._name = _this2.dom.querySelector('#label-name').innerHTML;
        /* Build albums */
        _this2._albums = _this2.dom.querySelector('#released-albums');
        _this2._artists = _this2.dom.querySelector('#label-artists');
        if ((_this2$_albums = _this2._albums) !== null && _this2$_albums !== void 0 && _this2$_albums.children || (_this2$_artists = _this2._artists) !== null && _this2$_artists !== void 0 && _this2$_artists.children) {
          _this2._buildArtists();
          _this2._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
            target: _this2._artists,
            horizontal: true,
            style: {
              color: '#56D45B'
            }
          }));
          _this2._artists = _this2._artists.children[0].children[0];
          _this2._buildAlbums();
          _this2._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
            target: _this2._albums,
            horizontal: true,
            style: {
              color: '#56D45B'
            }
          }));
          _this2._albums = _this2._albums.children[0].children[0];
          _this2._handleItemSorting('albums', _this2._albums);
          _this2._handleItemSorting('artists', _this2._artists);
        } else {
          reject('F_RELEASEARTIST_INVALID_HTML');
          return;
        }

        // Global view scroll
        _this2._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
          target: _this2.dom,
          style: {
            color: '#56D45B'
          }
        }));
        _this2.updateScrollbars();
        resolve();
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }
  }, {
    key: "_buildArtists",
    value: function _buildArtists() {
      for (var i = 0; i < this._artists.children.length; ++i) {
        // Due to HTML minimalArtistFragment struct, we must children[0] on track to get item id in dataset.
        this._evtIds.push(Evts.addEvent('click', this._artists.children[i].children[0], this._artistClicked, this._artists.children[i].children[0]));
      }
    }
  }, {
    key: "_buildAlbums",
    value: function _buildAlbums() {
      for (var i = 0; i < this._albums.children.length; ++i) {
        var title = this._albums.children[i].lastElementChild.innerHTML;
        if (title.includes(' EP')) {
          title = title.replace(' EP', '');
          this._albums.children[i].querySelector('.ep-sp').innerHTML = 'EP';
        }
        if (title.includes(' - Single')) {
          title = title.replace(' - Single', '');
          this._albums.children[i].querySelector('.ep-sp').innerHTML = 'SP';
        }
        // Update album title if needed
        this._albums.children[i].lastElementChild.innerHTML = title;
        this._evtIds.push(Evts.addEvent('click', this._albums.children[i], this._albumClicked, this._albums.children[i]));
      }
    }
  }, {
    key: "_handleItemSorting",
    value: function _handleItemSorting(type, items) {
      var sortItems = this.dom.querySelector("#sort-".concat(type));
      sortItems.addEventListener('click', function () {
        sortItems.classList.toggle('active');
        var elements = [].slice.call(items.children);
        elements = elements.reverse();
        for (var i = elements.length - 1; i >= 0; --i) {
          items.children[i].remove();
        }
        for (var _i = 0; _i < elements.length; ++_i) {
          items.appendChild(elements[_i]);
        }
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return "Label <b>".concat(this._name, "</b>");
    }
  }]);
  return LabelView;
}((0,_utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_2__["default"])(_utils_SceneView__WEBPACK_IMPORTED_MODULE_1__["default"]));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LabelView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/MainPageView.js":
/*!******************************************************!*\
  !*** ./front/js/view/scene/mainpage/MainPageView.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var MainPageView = /*#__PURE__*/function (_SceneView) {
  _inherits(MainPageView, _SceneView);
  var _super = _createSuper(MainPageView);
  function MainPageView() {
    var _this;
    _classCallCheck(this, MainPageView);
    _this = _super.call(this, {
      type: 'main',
      url: '/fragment/mainpage/',
      css: 'static/dist/css/mainpage.bundle.css'
    });
    _this._formatUrl();
    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._events.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(MainPageView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(MainPageView.prototype), "destroy", this).call(this);
      Evts.unsubscribe(this._readyEvtId);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_formatUrl",
    value: function _formatUrl() {
      var bRect = document.body.getBoundingClientRect();
      var amount = 0;
      if (bRect.width < 632) {
        amount = 12;
      } else if (bRect.width < 754) {
        amount = 20;
      } else if (bRect.width < 916) {
        amount = 18;
      } else if (bRect.width < 1038) {
        amount = 14;
      } else if (bRect.width < 1160) {
        amount = 16;
      } else if (bRect.width < 1282) {
        amount = 18;
      } else if (bRect.width < 1404) {
        amount = 20;
      } else if (bRect.width < 1526) {
        amount = 22;
      } else if (bRect.width < 1649) {
        amount = 24;
      } else if (bRect.width < 1720) {
        amount = 26;
      } else if (bRect.width < 1840) {
        amount = 28;
      } else if (bRect.width >= 1920) {
        amount = 30;
      }
      this._url = "".concat(this._url).concat(amount, "/");
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      this._scroll = new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
        target: this.dom,
        minSize: 40,
        style: {
          color: '#56D45B'
        }
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      var _this2 = this;
      /* Release artists */
      this.dom.querySelector('#see-all-release-artists').addEventListener('click', function () {
        mzk.setView({
          name: 'AllReleaseArtist'
        });
      });
      var artists = this.dom.querySelector('#artists-container');
      var _loop = function _loop(i) {
        artists.children[i].children[0].addEventListener('click', function () {
          mzk.setView({
            name: 'ReleaseArtist',
            id: artists.children[i].children[0].dataset.id
          });
        });
      };
      for (var i = 0; i < artists.children.length; ++i) {
        _loop(i);
      }
      /* Genres */
      this.dom.querySelector('#see-all-genres').addEventListener('click', function () {
        mzk.setView({
          name: 'AllGenre'
        });
      });
      var genres = this.dom.querySelector('#genres-container');
      var _loop2 = function _loop2(_i) {
        genres.children[_i].children[0].addEventListener('click', function () {
          mzk.setView({
            name: 'Genre',
            id: genres.children[_i].children[0].dataset.id
          });
        });
      };
      for (var _i = 0; _i < genres.children.length; ++_i) {
        _loop2(_i);
      }
      var genreGraph = this.dom.querySelector('#see-genres-graph');
      genreGraph.addEventListener('click', function () {
        mzk.setView({
          name: 'GenreGraph'
        });
      });
      /* Labels */
      this.dom.querySelector('#see-all-labels').addEventListener('click', function () {
        mzk.setView({
          name: 'AllLabel'
        });
      });
      var labels = this.dom.querySelector('#labels-container');
      var _loop3 = function _loop3(_i2) {
        labels.children[_i2].children[0].addEventListener('click', function () {
          mzk.setView({
            name: 'Label',
            id: labels.children[_i2].children[0].dataset.id
          });
        });
      };
      for (var _i2 = 0; _i2 < labels.children.length; ++_i2) {
        _loop3(_i2);
      }
      this._readyEvtId = Evts.subscribe('SceneViewReady', function () {
        if (_this2.dom.querySelector('#artists-container').children.length === 0) {
          mzk.setView({
            name: 'MenuPage'
          });
        }
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'Home';
    }
  }]);
  return MainPageView;
}(_utils_SceneView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MainPageView);

/***/ }),

/***/ "./front/js/view/scene/mainpage/ReleaseArtistView.js":
/*!***********************************************************!*\
  !*** ./front/js/view/scene/mainpage/ReleaseArtistView.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
/* harmony import */ var _utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ItemViewHelperMixin */ "./front/js/view/scene/utils/ItemViewHelperMixin.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var ReleaseArtistView = /*#__PURE__*/function (_ItemViewHelperMixin) {
  _inherits(ReleaseArtistView, _ItemViewHelperMixin);
  var _super = _createSuper(ReleaseArtistView);
  function ReleaseArtistView(options) {
    var _this;
    _classCallCheck(this, ReleaseArtistView);
    _this = _super.call(this, {
      type: 'item',
      url: "/fragment/library/artist/".concat(options.id, "/")
    });
    _this._artist = '';
    _this._albums = [];
    _this._scrolls = [];
    _this._fetchWrapper(_this._url).then(_this._buildNavigation.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(ReleaseArtistView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(ReleaseArtistView.prototype), "destroy", this).call(this);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_buildNavigation",
    value: function _buildNavigation() {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        var _this2$_members, _this2$_members$child, _this2$_albums;
        _this2._artist = _this2.dom.querySelector('#artist-name').innerHTML;
        _this2._evtIds.push(Evts.addEvent('click', _this2.dom.querySelector('#artist-picture'), _this2._pictureClicked, _this2));
        _this2._members = _this2.dom.querySelector('#artist-members');
        if ((_this2$_members = _this2._members) !== null && _this2$_members !== void 0 && (_this2$_members$child = _this2$_members.children) !== null && _this2$_members$child !== void 0 && _this2$_members$child.length) {
          _this2._buildArtistMembers();
        } else {
          // Remove header right, update header center class to take remaining space
          _this2.dom.querySelector('.artist-header-right').classList.add('collapsed');
          _this2.dom.querySelector('.artist-header-center').classList.add('expanded');
        }
        /* Build albums */
        _this2._albums = _this2.dom.querySelector('#released-albums');
        if ((_this2$_albums = _this2._albums) !== null && _this2$_albums !== void 0 && _this2$_albums.children) {
          _this2._buildArtistAlbums();
          _this2._handleAlbumSorting(); // Release sorting

          // Global view scroll
          _this2._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
            target: _this2.dom,
            style: {
              color: '#56D45B'
            }
          }));
          resolve();
        } else {
          reject('F_RELEASEARTIST_INVALID_HTML');
        }
      });
    }
  }, {
    key: "_buildArtistMembers",
    value: function _buildArtistMembers() {
      var _this3 = this;
      this.dom.querySelector('.artist-header-right').classList.add("collapsed-".concat(this._members.children.length));
      this.dom.querySelector('.artist-header-center').classList.add("expanded-".concat(this._members.children.length));
      for (var i = 0; i < this._members.children.length; ++i) {
        this._members.children[i].addEventListener('click', this._artistClicked);
      }
      // Add scrollbar to members
      if (this._members.children.length > 4) {
        this.dom.querySelector('.artist-header-right').classList.add('many-members');
        // Ensure height is properly applied before creating scroll on performers
        if (this._members.children.length > 8) {
          requestAnimationFrame(function () {
            _this3._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
              target: _this3.dom.querySelector('.artist-header-right'),
              style: {
                color: '#56D45B'
              }
            }));
          });
        }
      }
    }
  }, {
    key: "_buildArtistAlbums",
    value: function _buildArtistAlbums() {
      for (var i = 0; i < this._albums.children.length; ++i) {
        var title = this._albums.children[i].lastElementChild.innerHTML;
        if (title.includes(' EP')) {
          title = title.replace(' EP', '');
          this._albums.children[i].querySelector('.ep-sp').innerHTML = 'EP';
        }
        if (title.includes(' - Single')) {
          title = title.replace(' - Single', '');
          this._albums.children[i].querySelector('.ep-sp').innerHTML = 'SP';
        }
        // Update album title if needed
        this._albums.children[i].lastElementChild.innerHTML = title;
        this._albums.children[i].addEventListener('click', this._albumClicked);
      }
      this._scrolls.push(new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_0__["default"]({
        target: this._albums,
        horizontal: true,
        style: {
          color: '#56D45B'
        }
      }));
      this._albums = this._albums.children[0].children[0];
    }
  }, {
    key: "_handleAlbumSorting",
    value: function _handleAlbumSorting() {
      var _this4 = this;
      var sortArtistReleases = this.dom.querySelector('#sort-artist-releases');
      sortArtistReleases.addEventListener('click', function () {
        sortArtistReleases.classList.toggle('active');
        var elements = [].slice.call(_this4._albums.children);
        elements = elements.reverse();
        for (var i = 0; i < _this4._albums.children.length; ++i) {
          _this4._albums.children[i].remove();
        }
        for (var _i = 0; _i < elements.length; ++_i) {
          _this4._albums.appendChild(elements[_i]);
        }
      });
    }
  }, {
    key: "_pictureClicked",
    value: function _pictureClicked() {
      mzk.setModal({
        name: 'ArtistPicture',
        path: this.dom.querySelector('#artist-picture').children[0].children[0].children[0].src,
        artist: this.dom.querySelector('#artist-name').innerHTML
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return "Artist <b>".concat(this._artist, "</b>");
    }
  }]);
  return ReleaseArtistView;
}((0,_utils_ItemViewHelperMixin__WEBPACK_IMPORTED_MODULE_2__["default"])(_utils_SceneView__WEBPACK_IMPORTED_MODULE_1__["default"]));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReleaseArtistView);

/***/ }),

/***/ "./front/js/view/scene/menupage/AccountPageView.js":
/*!*********************************************************!*\
  !*** ./front/js/view/scene/menupage/AccountPageView.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_TabView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/TabView */ "./front/js/view/scene/utils/TabView.js");
/* harmony import */ var _account_ProfileFragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./account/ProfileFragment */ "./front/js/view/scene/menupage/account/ProfileFragment.js");
/* harmony import */ var _account_PreferenceFragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account/PreferenceFragment */ "./front/js/view/scene/menupage/account/PreferenceFragment.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var AccountPageView = /*#__PURE__*/function (_TabView) {
  _inherits(AccountPageView, _TabView);
  var _super = _createSuper(AccountPageView);
  function AccountPageView() {
    var _this;
    _classCallCheck(this, AccountPageView);
    _this = _super.call(this, {
      type: 'account',
      url: '/fragment/account/',
      css: 'static/dist/css/account.bundle.css'
    });
    _this._fetchWrapper(_this._url).then(_this._fillAttributes.bind(_assertThisInitialized(_this))).then(_this._profileClicked.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(AccountPageView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AccountPageView.prototype), "destroy", this).call(this);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      _get(_getPrototypeOf(AccountPageView.prototype), "_fillAttributes", this).call(this);
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      _get(_getPrototypeOf(AccountPageView.prototype), "_events", this).call(this);
    }
  }, {
    key: "_profileClicked",
    value: function _profileClicked() {
      var _this2 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/account/profile/').then(function () {
        _this2._activeFragment = new _account_ProfileFragment__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: _this2._viewContainer,
          refresh: _this2._profileClicked.bind(_this2)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "_preferenceClicked",
    value: function _preferenceClicked() {
      var _this3 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/account/preference/').then(function () {
        _this3._activeFragment = new _account_PreferenceFragment__WEBPACK_IMPORTED_MODULE_2__["default"]({
          target: _this3._viewContainer,
          refresh: _this3._preferenceClicked.bind(_this3)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'My account';
    }
  }]);
  return AccountPageView;
}(_utils_TabView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AccountPageView);

/***/ }),

/***/ "./front/js/view/scene/menupage/AdminPageView.js":
/*!*******************************************************!*\
  !*** ./front/js/view/scene/menupage/AdminPageView.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_TabView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/TabView */ "./front/js/view/scene/utils/TabView.js");
/* harmony import */ var _admin_UsersFragment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./admin/UsersFragment */ "./front/js/view/scene/menupage/admin/UsersFragment.js");
/* harmony import */ var _admin_ThumbsFragment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./admin/ThumbsFragment */ "./front/js/view/scene/menupage/admin/ThumbsFragment.js");
/* harmony import */ var _admin_WishesFragment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./admin/WishesFragment */ "./front/js/view/scene/menupage/admin/WishesFragment.js");
/* harmony import */ var _admin_SyncThingFragment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./admin/SyncThingFragment */ "./front/js/view/scene/menupage/admin/SyncThingFragment.js");
/* harmony import */ var _admin_CommandsFragment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./admin/CommandsFragment */ "./front/js/view/scene/menupage/admin/CommandsFragment.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }






var AdminPageView = /*#__PURE__*/function (_TabView) {
  _inherits(AdminPageView, _TabView);
  var _super = _createSuper(AdminPageView);
  function AdminPageView() {
    var _this;
    _classCallCheck(this, AdminPageView);
    _this = _super.call(this, {
      type: 'admin',
      url: '/fragment/admin/',
      css: 'static/dist/css/admin.bundle.css'
    });
    _this._fetchWrapper(_this._url).then(_this._fillAttributes.bind(_assertThisInitialized(_this))).then(_this._usersClicked.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](_this._viewFailed);
    return _this;
  }
  _createClass(AdminPageView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(AdminPageView.prototype), "destroy", this).call(this);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      _get(_getPrototypeOf(AdminPageView.prototype), "_fillAttributes", this).call(this);
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      _get(_getPrototypeOf(AdminPageView.prototype), "_events", this).call(this);
    }
  }, {
    key: "_usersClicked",
    value: function _usersClicked() {
      var _this2 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/admin/user-list/').then(function () {
        _this2._activeFragment = new _admin_UsersFragment__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: _this2._viewContainer,
          refresh: _this2._usersClicked.bind(_this2)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "_thumbsClicked",
    value: function _thumbsClicked() {
      var _this3 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/admin/thumb/layout/').then(function () {
        _this3._activeFragment = new _admin_ThumbsFragment__WEBPACK_IMPORTED_MODULE_2__["default"]({
          target: _this3._viewContainer,
          refresh: _this3._wishesClicked.bind(_this3)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "_wishesClicked",
    value: function _wishesClicked() {
      var _this4 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/admin/wish/all/').then(function () {
        _this4._activeFragment = new _admin_WishesFragment__WEBPACK_IMPORTED_MODULE_3__["default"]({
          target: _this4._viewContainer,
          refresh: _this4._wishesClicked.bind(_this4)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "_syncthingClicked",
    value: function _syncthingClicked() {
      var _this5 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/admin/syncthing/').then(function () {
        _this5._activeFragment = new _admin_SyncThingFragment__WEBPACK_IMPORTED_MODULE_4__["default"]({
          target: _this5._viewContainer,
          refresh: _this5._syncthingClicked.bind(_this5)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "_commandsClicked",
    value: function _commandsClicked() {
      var _this6 = this;
      this._clearFragment();
      this._fetchViewFragment('/fragment/admin/commands/').then(function () {
        _this6._activeFragment = new _admin_CommandsFragment__WEBPACK_IMPORTED_MODULE_5__["default"]({
          target: _this6._viewContainer,
          refresh: _this6._commandsClicked.bind(_this6)
        });
      })["catch"](function (error) {
        return Logger.raise(error);
      });
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'Administration';
    }
  }]);
  return AdminPageView;
}(_utils_TabView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AdminPageView);

/***/ }),

/***/ "./front/js/view/scene/menupage/MenuPageView.js":
/*!******************************************************!*\
  !*** ./front/js/view/scene/menupage/MenuPageView.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_SceneView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/SceneView */ "./front/js/view/scene/utils/SceneView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MenuPageView = /*#__PURE__*/function (_SceneView) {
  _inherits(MenuPageView, _SceneView);
  var _super = _createSuper(MenuPageView);
  function MenuPageView() {
    var _this;
    _classCallCheck(this, MenuPageView);
    _this = _super.call(this, {
      type: 'menu',
      url: '/fragment/menupage/',
      css: 'static/dist/css/menu.bundle.css'
    });
    _this._adminItem = null;
    _this._userItem = null;
    _this._wishItem = null;
    _this._aboutItem = null;
    _this._evtIds = [];
    _this._fetchWrapper(_this._url).then(_this._fillAttributes.bind(_assertThisInitialized(_this))).then(_this._viewReady)["catch"](function (error) {
      return Logger.raise(error);
    });
    return _this;
  }
  _createClass(MenuPageView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(MenuPageView.prototype), "destroy", this).call(this);
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._adminItem = this.dom.querySelector('#admin-button');
      this._userItem = this.dom.querySelector('#userpage-button');
      this._wishItem = this.dom.querySelector('#wish-button');
      this._aboutItem = this.dom.querySelector('#about-button');
      this._events();
    }
  }, {
    key: "_events",
    value: function _events() {
      this._evtIds.push(Evts.addEvent('click', this._adminItem, mzk.setView.bind(mzk, {
        name: 'AdminPage'
      }), this));
      this._evtIds.push(Evts.addEvent('click', this._userItem, mzk.setView.bind(mzk, {
        name: 'AccountPage'
      }), this));
      this._evtIds.push(Evts.addEvent('click', this._wishItem, mzk.setModal.bind(mzk, {
        name: 'Wish'
      }), this));
      this._evtIds.push(Evts.addEvent('click', this._aboutItem, mzk.setModal.bind(mzk, {
        name: 'About'
      }), this));
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return 'ManaZeak menu';
    }
  }]);
  return MenuPageView;
}(_utils_SceneView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MenuPageView);

/***/ }),

/***/ "./front/js/view/scene/menupage/account/PreferenceFragment.js":
/*!********************************************************************!*\
  !*** ./front/js/view/scene/menupage/account/PreferenceFragment.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var PreferenceFragment = /*#__PURE__*/function () {
  function PreferenceFragment(options) {
    _classCallCheck(this, PreferenceFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._theme = 'DARK';
    this._evtIds = [];
    this._fillAttributes();
  }
  _createClass(PreferenceFragment, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._evtIds.push(Evts.addEvent('click', this._target.querySelector('#theme-switch'), this._switchTheme, this));
    }
  }, {
    key: "_switchTheme",
    value: function _switchTheme() {
      if (this._theme === 'DARK') {
        this._theme = 'LIGHT';
        document.body.classList.remove('dark-theme');
        document.body.classList.add('light-theme');
      } else {
        this._theme = 'DARK';
        document.body.classList.remove('light-theme');
        document.body.classList.add('dark-theme');
      }
    }
  }]);
  return PreferenceFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PreferenceFragment);

/***/ }),

/***/ "./front/js/view/scene/menupage/account/ProfileFragment.js":
/*!*****************************************************************!*\
  !*** ./front/js/view/scene/menupage/account/ProfileFragment.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ProfileFragment = /*#__PURE__*/function () {
  function ProfileFragment(options) {
    _classCallCheck(this, ProfileFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._evtIds = [];
    this._fillAttributes();
  }
  _createClass(ProfileFragment, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      if (this._target.querySelector('#parent-name').innerHTML === '') {
        this._target.querySelector('#user-info').removeChild(this._target.querySelector('#user-parent'));
      }
      var date = new Date(this._target.querySelector('#member-since').innerHTML);
      this._target.querySelector('#member-since').innerHTML = Utils.formatDate(date);
      this._evtIds.push(Evts.addEvent('click', this._target.querySelector('#edit-account'), this._editAccount, this));
      this._evtIds.push(Evts.addEvent('click', this._target.querySelector('#password'), mzk.setModal.bind(mzk, {
        name: 'ResetPassword'
      }), this));
      this._evtIds.push(Evts.addEvent('click', this._target.querySelector('#copy-invite-link'), this._copyInviteLink, this));
    }
  }, {
    key: "_editAccount",
    value: function _editAccount() {
      var userInfo = this._target.querySelector('#user-info');
      mzk.setModal({
        name: 'EditAccount',
        data: {
          email: userInfo.querySelector('#email').textContent,
          name: userInfo.querySelector('#name').textContent,
          surname: userInfo.querySelector('#surname').textContent,
          bio: userInfo.querySelector('#bio').textContent,
          birthDate: userInfo.querySelector('#birthdate').textContent,
          country: userInfo.querySelector('#country').textContent,
          locale: userInfo.querySelector('#locale').textContent
        }
      });
    }
  }, {
    key: "_copyInviteLink",
    value: function _copyInviteLink() {
      var inviteCode = this._target.querySelector('#invite-code').innerHTML;
      var link = "".concat(window.location.origin, "/register/?invite-code=").concat(inviteCode);
      this._saveToClipboard(link).then(function () {
        return Logger.raise('F_INVIT_LINK_CLIPBOARD_SUCCESS');
      })["catch"](function () {
        return Logger.raise('F_INVIT_LINK_CLIPBOARD_ERROR');
      });
    }
  }, {
    key: "_saveToClipboard",
    value: function _saveToClipboard(text) {
      return new Promise(function (resolve, reject) {
        // Standard fallback if clipboard API not available
        if (!navigator.clipboard) {
          var textArea = document.createElement('TEXTAREA');
          textArea.value = text;
          textArea.setAttribute('style', 'position:absolute;top:-100%;left:-100%;');
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();
          // Save fake text area content to clipboard
          try {
            document.execCommand('copy');
            document.body.removeChild(textArea);
            resolve();
          } catch (err) {
            document.body.removeChild(textArea);
            reject();
          }
        }
        // Use clipboard API otherwise
        navigator.clipboard.writeText(text).then(resolve, reject);
      });
    }
  }]);
  return ProfileFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ProfileFragment);

/***/ }),

/***/ "./front/js/view/scene/menupage/admin/CommandsFragment.js":
/*!****************************************************************!*\
  !*** ./front/js/view/scene/menupage/admin/CommandsFragment.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var CommandsFragment = /*#__PURE__*/function () {
  function CommandsFragment(options) {
    _classCallCheck(this, CommandsFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._evtIds = [];
    this._fillAttributes();
  }
  _createClass(CommandsFragment, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      // Saving users and badge from template
      var scanButton = this._target.querySelector('#scan-library');
      this._evtIds.push(Evts.addEvent('click', scanButton, this._scanClicked));
      var regenThumbs = this._target.querySelector('#regen-thumbs');
      this._evtIds.push(Evts.addEvent('click', regenThumbs, this._thumbsClicked));
      var regenMoods = this._target.querySelector('#regen-moods');
      this._evtIds.push(Evts.addEvent('click', regenMoods, this._moodsClicked));
    }
  }, {
    key: "_scanClicked",
    value: function _scanClicked() {
      mzk.kom.get('/admin/library/scan/').then(function (response) {
        response.notifications[0].type = response.notifications[0].severity;
        Notif["new"](response.notifications[0]);
      })["catch"](function (error) {
        Notif["new"](error.notifications[0]);
      });
    }
  }, {
    key: "_thumbsClicked",
    value: function _thumbsClicked() {
      mzk.kom.get('/admin/library/regenThumbs/').then(function (response) {
        response.notifications[0].type = response.notifications[0].severity;
        Notif["new"](response.notifications[0]);
      })["catch"](function () {
        Notif["new"](error.notifications[0]);
      });
    }
  }, {
    key: "_moodsClicked",
    value: function _moodsClicked() {
      mzk.kom.get('/admin/library/genMoods/').then(function (response) {
        response.notifications[0].type = response.notifications[0].severity;
        Notif["new"](response.notifications[0]);
      })["catch"](function () {
        Notif["new"](error.notifications[0]);
      });
    }
  }]);
  return CommandsFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CommandsFragment);

/***/ }),

/***/ "./front/js/view/scene/menupage/admin/SyncThingFragment.js":
/*!*****************************************************************!*\
  !*** ./front/js/view/scene/menupage/admin/SyncThingFragment.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SyncThingFragment = /*#__PURE__*/function () {
  function SyncThingFragment(options) {
    _classCallCheck(this, SyncThingFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._evtIds = [];
    this._fillAttributes();
  }
  _createClass(SyncThingFragment, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      console.log(this._target.querySelector('#syncthing-iframe').contentWindow.document);
    }
  }]);
  return SyncThingFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SyncThingFragment);

/***/ }),

/***/ "./front/js/view/scene/menupage/admin/ThumbsFragment.js":
/*!**************************************************************!*\
  !*** ./front/js/view/scene/menupage/admin/ThumbsFragment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_Pager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../utils/Pager.js */ "./front/js/utils/Pager.js");
/* harmony import */ var _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../navigation/ScrollBar */ "./front/js/view/navigation/ScrollBar.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var ThumbsFragment = /*#__PURE__*/function () {
  function ThumbsFragment(options) {
    _classCallCheck(this, ThumbsFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._pager = null;
    this._totalItems = 0;
    this._page = 1;
    this._evtIds = [];
    this._errEvtIds = [];
    this._scroll = null;
    this._init();
    this._events();
  }
  _createClass(ThumbsFragment, [{
    key: "destroy",
    value: function destroy() {
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_init",
    value: function _init() {
      // Init page with artists that have no cover
      this._updateView();
    }
  }, {
    key: "_events",
    value: function _events() {
      // Search input fields listeners
      var entities = this._target.querySelector('#entity-type');
      for (var i = 0; i < entities.children.length; ++i) {
        entities.children[i].target = this._target;
        entities.children[i].cb = this._updateView.bind(this, true);
        this._evtIds.push(Evts.addEvent('click', entities.children[i], this._entityClicked, entities.children[i]));
      }

      // Search input fields listeners
      var errors = this._target.querySelector('#error-type');
      for (var _i = 0; _i < errors.children.length; ++_i) {
        errors.children[_i].target = this._target;
        errors.children[_i].cb = this._updateView.bind(this, true);
        this._evtIds.push(Evts.addEvent('click', errors.children[_i], this._errorClicked, errors.children[_i]));
      }
    }
  }, {
    key: "_entityClicked",
    value: function _entityClicked(e) {
      var entities = this.target.querySelector('#entity-type');
      for (var i = 0; i < entities.children.length; ++i) {
        entities.children[i].classList.remove('selected');
        if (e.target.dataset.id === entities.children[i].dataset.id) {
          entities.children[i].classList.add('selected');
        }
      }
      this.cb();
    }
  }, {
    key: "_errorClicked",
    value: function _errorClicked(e) {
      var errors = this.target.querySelector('#error-type');
      for (var i = 0; i < errors.children.length; ++i) {
        errors.children[i].classList.remove('selected');
        if (e.target.dataset.id === errors.children[i].dataset.id) {
          errors.children[i].classList.add('selected');
        }
      }
      this.cb();
    }
  }, {
    key: "_updateView",
    value: function _updateView() {
      var _this = this;
      var resetPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (resetPage === true) {
        this._page = 0;
      }
      // Saving users and badge from template
      mzk.kom.postText('/fragment/admin/thumb/list/', this._buildSearchPayload()).then(function (response) {
        // Clear scroll if any
        if (_this._scroll) {
          _this._scroll.destroy();
        }
        // Clear pager if any
        if (_this._pager) {
          _this._pager.destroy();
        }
        // Clear events on error's buttons 
        Utils.clearAllEvents(_this._errEvtIds);
        // Update errors DOM and raf for post-processing
        document.getElementById('errors-wrapper').innerHTML = response;
        requestAnimationFrame(_this._buildCurrentPage.bind(_this));
      });
    }
  }, {
    key: "_buildSearchPayload",
    value: function _buildSearchPayload() {
      var entityTypeId = null;
      var entities = this._target.querySelector('#entity-type');
      for (var i = 0; i < entities.children.length; ++i) {
        if (entities.children[i].classList.contains('selected')) {
          entityTypeId = entities.children[i].dataset.id;
          break;
        }
      }
      var errorType = null;
      var errors = this._target.querySelector('#error-type');
      for (var _i2 = 0; _i2 < errors.children.length; ++_i2) {
        if (errors.children[_i2].classList.contains('selected')) {
          errorType = errors.children[_i2].dataset.id;
          break;
        }
      }
      return {
        entityTypeId: entityTypeId,
        errorType: errorType,
        processed: this._target.querySelector('#processed').checked,
        page: this._page
      };
    }
  }, {
    key: "_buildCurrentPage",
    value: function _buildCurrentPage() {
      var _this2 = this;
      var errors = document.getElementById('errors-container').children;
      var _loop = function _loop(i) {
        var button = errors[i].getElementsByTagName('BUTTON')[0];
        _this2._errEvtIds.push(Evts.addEvent('click', button, function () {
          return _this2._errorSubmitClicked(errors[i].dataset.id);
        }, _this2));
      };
      for (var i = 0; i < errors.length; ++i) {
        _loop(i);
      }
      this._totalItems = document.getElementById('errors-container').dataset.total;
      document.getElementById('errors-amount').innerHTML = this._totalItems;
      this._scroll = new _navigation_ScrollBar__WEBPACK_IMPORTED_MODULE_1__["default"]({
        target: document.getElementById('errors-wrapper'),
        style: {
          color: '#56D45B'
        }
      });
      this._pager = new _utils_Pager_js__WEBPACK_IMPORTED_MODULE_0__["default"]({
        target: document.getElementById('pager-wrapper'),
        size: this._totalItems,
        maxItems: 20,
        active: this._page,
        clicked: function clicked(page) {
          _this2._page = page;
          _this2._updateView();
        }
      });
    }
  }, {
    key: "_errorSubmitClicked",
    value: function _errorSubmitClicked(id) {
      var _this3 = this;
      mzk.kom.post("/admin/thumb/".concat(id, "/processed/"), {}).then(function (response) {
        response.notifications[0].type = response.notifications[0].severity;
        Notif["new"](response.notifications[0]);
        _this3._updateView();
      });
    }
  }]);
  return ThumbsFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ThumbsFragment);

/***/ }),

/***/ "./front/js/view/scene/menupage/admin/UsersFragment.js":
/*!*************************************************************!*\
  !*** ./front/js/view/scene/menupage/admin/UsersFragment.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_DragElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../utils/DragElement */ "./front/js/utils/DragElement.js");
/* harmony import */ var _utils_DropElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../utils/DropElement */ "./front/js/utils/DropElement.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var UsersFragment = /*#__PURE__*/function () {
  function UsersFragment(options) {
    _classCallCheck(this, UsersFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._users = [];
    this._badges = [];
    this._dropElements = [];
    this._dragElements = [];
    this._evtIds = [];
    this._fillAttributes();
  }
  _createClass(UsersFragment, [{
    key: "destroy",
    value: function destroy() {
      for (var i = 0; i < this._dropElements.length; ++i) {
        this._dropElements[i].destroy();
      }
      for (var _i = 0; _i < this._dragElements.length; ++_i) {
        this._dragElements[_i].destroy();
      }
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      // Saving users and badge from template
      var usersWrapper = this._target.querySelector('#users-wrapper');
      for (var i = 0; i < usersWrapper.children.length; ++i) {
        this._users.push(usersWrapper.children[i]);
      }
      var badgesWrapper = this._target.querySelector('#badges-wrapper');
      for (var _i2 = 0; _i2 < badgesWrapper.children.length; ++_i2) {
        this._badges.push(badgesWrapper.children[_i2]);
      }
      // Build drag behavior for badges
      for (var _i3 = 0; _i3 < this._badges.length; ++_i3) {
        var dragElement = new _utils_DragElement__WEBPACK_IMPORTED_MODULE_0__["default"]({
          target: this._badges[_i3],
          data: {
            badgeId: this._badges[_i3].dataset.id
          }
        });
        this._dragElements.push(dragElement);
      }
      // Build drop behavior for users and setup ban/delete events for each
      for (var _i4 = 0; _i4 < this._users.length; ++_i4) {
        var dropElement = new _utils_DropElement__WEBPACK_IMPORTED_MODULE_1__["default"]({
          target: this._users[_i4],
          onDrop: this._dropOnUser.bind(this._users[_i4], this._refreshCB)
        });
        this._dropElements.push(dropElement);
        // Ban/Delete events
        var banUser = this._users[_i4].children[this._users[_i4].children.length - 1].children[0];
        var deleteUser = this._users[_i4].children[this._users[_i4].children.length - 1].children[1];
        this._evtIds.push(Evts.addEvent('click', banUser, this._banUser, {
          element: this._users[_i4],
          scope: this
        }));
        this._evtIds.push(Evts.addEvent('click', deleteUser, this._deleteUser, {
          element: this._users[_i4],
          scope: this
        }));
      }
      // Badge creation event
      this._evtIds.push(Evts.addEvent('click', this._target.querySelector('#new-badge'), mzk.setModal.bind(mzk, {
        name: 'Badge'
      }), this));
    }
  }, {
    key: "_dropOnUser",
    value: function _dropOnUser(refreshCB, data) {
      mzk.kom.post('/badge/associate/', {
        userId: this.dataset.id,
        badgeId: data.badgeId
      }).then(function (response) {
        mzk.ui.processLogFromServer(response.errors);
        refreshCB();
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "_banUser",
    value: function _banUser() {
      var _this = this;
      mzk.kom.post("/admin/user/deactivate/".concat(this.element.dataset.id, "/"), {}).then(function (response) {
        mzk.ui.processLogFromServer(response.errors);
        _this.scope._refreshCB();
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "_deleteUser",
    value: function _deleteUser() {
      var _this2 = this;
      mzk.kom.post("/admin/user/delete/".concat(this.element.dataset.id, "/"), {}).then(function (response) {
        mzk.ui.processLogFromServer(response.errors);
        _this2.scope._refreshCB();
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }]);
  return UsersFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UsersFragment);

/***/ }),

/***/ "./front/js/view/scene/menupage/admin/WishesFragment.js":
/*!**************************************************************!*\
  !*** ./front/js/view/scene/menupage/admin/WishesFragment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_DragElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../utils/DragElement */ "./front/js/utils/DragElement.js");
/* harmony import */ var _utils_DropElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../utils/DropElement */ "./front/js/utils/DropElement.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var WishesFragment = /*#__PURE__*/function () {
  function WishesFragment(options) {
    _classCallCheck(this, WishesFragment);
    this._target = options.target;
    this._refreshCB = options.refresh;
    this._dropElements = [];
    this._dragElements = [];
    this._evtIds = [];
    this._fillAttributes();
  }
  _createClass(WishesFragment, [{
    key: "destroy",
    value: function destroy() {
      for (var i = 0; i < this._dropElements.length; ++i) {
        this._dropElements[i].destroy();
      }
      for (var _i = 0; _i < this._dragElements.length; ++_i) {
        this._dragElements[_i].destroy();
      }
      Utils.clearAllEvents(this._evtIds);
      Utils.removeAllObjectKeys(this);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._setDragDropElements('#pending-wishes', 'reset');
      this._setDragDropElements('#accepted-wishes', 'accept');
      this._setDragDropElements('#refused-wishes', 'reject');
    }
  }, {
    key: "_setDragDropElements",
    value: function _setDragDropElements(selector, type) {
      var wishes = this._target.querySelector(selector);
      // Drop wrapper
      var dropContainer = new _utils_DropElement__WEBPACK_IMPORTED_MODULE_1__["default"]({
        target: wishes,
        onDrop: this._wishDroppedOn.bind(this, type)
      });
      this._dropElements.push(dropContainer);
      for (var i = 0; i < wishes.children.length; ++i) {
        // We ignore the title of each section (Pending/Accepted/Refused)
        if (wishes.children[i].nodeName !== 'H1') {
          // Drag elements
          var dragElement = new _utils_DragElement__WEBPACK_IMPORTED_MODULE_0__["default"]({
            target: wishes.children[i],
            data: {
              wishId: wishes.children[i].dataset.id
            }
          });
          this._dragElements.push(dragElement);
          // Remove wish
          this._evtIds.push(Evts.addEvent('click', wishes.children[i], this._removeWish, {
            element: wishes.children[i],
            scope: this
          }));
        }
      }
    }
  }, {
    key: "_wishDroppedOn",
    value: function _wishDroppedOn(type, data) {
      var _this = this;
      mzk.kom.post("/admin/wish/".concat(type, "/").concat(data.wishId, "/"), {}).then(function (response) {
        mzk.ui.processLogFromServer(response.errors);
        _this._refreshCB();
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }, {
    key: "_removeWish",
    value: function _removeWish() {
      var _this2 = this;
      mzk.kom.post("/admin/wish/delete/".concat(this.element.dataset.id, "/"), {}).then(function (response) {
        mzk.ui.processLogFromServer(response.errors);
        _this2.scope._refreshCB();
      })["catch"](function (error) {
        console.error(error);
      });
    }
  }]);
  return WishesFragment;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WishesFragment);

/***/ }),

/***/ "./front/js/view/scene/utils/ItemViewHelperMixin.js":
/*!**********************************************************!*\
  !*** ./front/js/view/scene/utils/ItemViewHelperMixin.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var ItemViewHelperMixin = function ItemViewHelperMixin(SuperClass) {
  return /*#__PURE__*/function (_SuperClass) {
    _inherits(_class, _SuperClass);
    var _super = _createSuper(_class);
    function _class() {
      _classCallCheck(this, _class);
      return _super.apply(this, arguments);
    }
    _createClass(_class, [{
      key: "_artistClicked",
      value: function _artistClicked(e) {
        e.stopPropagation();
        mzk.setView({
          name: 'ReleaseArtist',
          id: this.dataset.id
        });
      }
    }, {
      key: "_albumClicked",
      value: function _albumClicked(e) {
        e.stopPropagation();
        mzk.setView({
          name: 'Album',
          id: this.dataset.id
        });
      }
    }, {
      key: "_labelClicked",
      value: function _labelClicked(e) {
        e.stopPropagation();
        mzk.setView({
          name: 'Label',
          id: this.dataset.id
        });
      }
    }, {
      key: "_genreClicked",
      value: function _genreClicked(e) {
        e.stopPropagation();
        mzk.setView({
          name: 'Genre',
          id: this.dataset.id
        });
      }
    }]);
    return _class;
  }(SuperClass);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ItemViewHelperMixin);

/***/ }),

/***/ "./front/js/view/scene/utils/PlayableView.js":
/*!***************************************************!*\
  !*** ./front/js/view/scene/utils/PlayableView.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SceneView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SceneView */ "./front/js/view/scene/utils/SceneView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PlayableView = /*#__PURE__*/function (_SceneView) {
  _inherits(PlayableView, _SceneView);
  var _super = _createSuper(PlayableView);
  function PlayableView(options) {
    var _this;
    _classCallCheck(this, PlayableView);
    _this = _super.call(this, options);
    _this._tracks = [];
    _this._trackContext = null;
    _this._changeTrackEvt = null;
    return _this;
  }
  _createClass(PlayableView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(PlayableView.prototype), "destroy", this).call(this);
      if (this._trackContext.destroy) {
        this._trackContext.destroy();
      }
      Evts.unsubscribe(this._changeTrackEvt);
    }
  }, {
    key: "_events",
    value: function _events() {
      for (var i = 0; i < this._tracks.length; ++i) {
        this._tracks[i]._buildPlaybackObject = this._buildPlaybackObject.bind(this);
        this._evtIds.push(Evts.addEvent('click', this._tracks[i], this._trackClicked, this._tracks[i]));
      }
      this._changeTrackEvt = Evts.subscribe('ChangeTrack', this._updatePlaying.bind(this));
    }
  }, {
    key: "_trackClicked",
    value: function _trackClicked(e) {
      var elementHovered = document.elementFromPoint(e.clientX, e.clientY);
      var startTimePercentage = null;
      if (elementHovered.classList.contains('track-moodbar')) {
        var bRect = this.getBoundingClientRect();
        startTimePercentage = (e.clientX - bRect.left) / bRect.width * 100;
      }
      mzk.changeTrack({
        id: this.dataset.id,
        playObject: this._buildPlaybackObject(this.dataset.id),
        startTimePercentage: startTimePercentage
      });
    }
  }, {
    key: "_buildPlaybackObject",
    value: function _buildPlaybackObject() {
      // Must be overriden in child class
    }
  }, {
    key: "_buildTrackObject",
    value: function _buildTrackObject() {
      // Must be overriden in child class    
    }
  }, {
    key: "_updatePlaying",
    value: function _updatePlaying(data) {
      var scrolled = false;
      for (var i = 0; i < this._tracks.length; ++i) {
        this._tracks[i].classList.remove('playing');
        if (this._tracks[i].dataset.id === data.id) {
          var _this$_tracks$i, _this$_tracks$i$scrol, _this$_tracks$i2, _this$_tracks$i2$scro;
          this._tracks[i].classList.add('playing');
          // Only update scroll if visible and not already has been focus
          if ((_this$_tracks$i = this._tracks[i]) !== null && _this$_tracks$i !== void 0 && (_this$_tracks$i$scrol = _this$_tracks$i.scroll) !== null && _this$_tracks$i$scrol !== void 0 && _this$_tracks$i$scrol.isHidden && !((_this$_tracks$i2 = this._tracks[i]) !== null && _this$_tracks$i2 !== void 0 && (_this$_tracks$i2$scro = _this$_tracks$i2.scroll) !== null && _this$_tracks$i2$scro !== void 0 && _this$_tracks$i2$scro.isHidden()) && scrolled === false) {
            scrolled = true;
            this._tracks[i].parentNode.scrollTo({
              top: this._tracks[i].offsetTop - this._tracks[i].parentNode.offsetTop,
              left: 0,
              behavior: 'smooth'
            });
            // Not breaking to properly remove playing on next tracks
          }
        }
      }
    }
  }, {
    key: "stopPlayback",
    value: function stopPlayback() {
      for (var i = 0; i < this._tracks.length; ++i) {
        this._tracks[i].classList.remove('playing');
      }
    }
  }, {
    key: "playFirstTrack",
    value: function playFirstTrack() {
      mzk.changeTrack({
        id: this._tracks[0].dataset.id,
        playObject: this._buildPlaybackObject(this._tracks[0].dataset.id)
      });
    }
  }, {
    key: "getTrackById",
    value: function getTrackById(id) {
      for (var i = 0; i < this._tracks.length; ++i) {
        if (this._tracks[i].dataset.id === id) {
          return this._buildTrackObject(this._tracks[i]);
        }
      }
      return {};
    }
  }]);
  return PlayableView;
}(_SceneView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PlayableView);

/***/ }),

/***/ "./front/js/view/scene/utils/SceneView.js":
/*!************************************************!*\
  !*** ./front/js/view/scene/utils/SceneView.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SceneView = /*#__PURE__*/function () {
  /** @summary <h1>View base class with mandatory methods</h1>
   * @author Arthur Beaulieu
   * @since September 2020
   * @description <blockquote>Scene view base class that must be inherited to match the loading pattern. All views
   * are based on an HTML template, that will be loaded the parsed to be included in the DOM scene. When the view
   * building is done, a <code>SceneViewReady</code> event is fired through the custom event proxy.</blockquote> */
  function SceneView(options) {
    _classCallCheck(this, SceneView);
    /** @public
     * @member {object} - The view wrapper div */
    this.wrapper = null;
    this._type = options.type;
    this._url = options.url;
    this._css = options.css;
    this._evtIds = [];
    Utils.appendLinkInHead(this._css);
  }

  /** @method
   * @name destroy
   * @public
   * @memberof SceneView
   * @description <blockquote>The destroy method will clear the wrapper. A destroy method must be created in child
   * class to properly clean itself. It should also call for <code>super</code> to call this method.</blockquote> */
  _createClass(SceneView, [{
    key: "destroy",
    value: function destroy() {
      this.wrapper = null;
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  -----------------------------------------  BUILDING VIEW PATTERN  --------------------------------------------  */
    /*                                                                                                                  */
    /*  These two methods must be called to properly fetch view wrapper and notify app that the view is ready to use.   */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _fetchWrapper
     * @private
     * @memberof UserInterface
     * @description <blockquote>This method will request the HTML template for the given url. It will then parse it
     * and update the view wrapper to match this newly loaded template.</blockquote>
     * @param {string} url - The template url to load html from
     * @return {promise} - The action promise */
  }, {
    key: "_fetchWrapper",
    value: function _fetchWrapper(url) {
      var _this = this;
      return new Promise(function (resolve, reject) {
        mzk.kom.getText(url).then(function (response) {
          try {
            // If we can parse as a JSON, the server returned an error
            var output = JSON.parse(response);
            reject(output.errors);
          } catch (_unused) {
            // Otherwise, the server returned a HTML template as a string
            _this.dom = Utils.parseHTMLFragment(response);
            resolve();
          }
        })["catch"](reject);
      });
    }

    /** @method
     * @name _viewReady
     * @private
     * @memberof UserInterface
     * @description <blockquote>This method needs to be called last, when all the view initialisation is done. This
     * way, it will notify the UserInterface controller that te view creation is done, and that it should release the
     * UI removing the loading overlay.</blockquote> */
  }, {
    key: "_viewReady",
    value: function _viewReady() {
      return new Promise(function (resolve) {
        Evts.publish('SceneViewReady');
        resolve();
      });
    }
  }, {
    key: "_viewFailed",
    value: function _viewFailed(errors) {
      // No need to return a promise, as it should be called last in failing process
      Evts.publish('SceneViewFailed', errors);
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      // Must be overriden in latest child class
    }
  }, {
    key: "updateScrollbars",
    value: function updateScrollbars() {
      var _this$_scrolls,
        _this2 = this;
      if ((_this$_scrolls = this._scrolls) !== null && _this$_scrolls !== void 0 && _this$_scrolls.length) {
        var _loop = function _loop(i) {
          if (_this2._scrolls[i].updateScrollbar) {
            setTimeout(function () {
              _this2._scrolls[i].updateScrollbar();
            });
          }
        };
        for (var i = 0; i < this._scrolls.length; ++i) {
          _loop(i);
        }
      }
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------------  GETTER / SETTER  -----------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @public
     * @member {object} - The view first DOM child in template */
  }, {
    key: "dom",
    get: function get() {
      return this.wrapper;
    }

    /** @public
     * @member {object} - The view first DOM child in template */,
    set: function set(dom) {
      this.wrapper = dom;
    }
  }]);
  return SceneView;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SceneView);

/***/ }),

/***/ "./front/js/view/scene/utils/TabView.js":
/*!**********************************************!*\
  !*** ./front/js/view/scene/utils/TabView.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _SceneView__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SceneView */ "./front/js/view/scene/utils/SceneView.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TabView = /*#__PURE__*/function (_SceneView) {
  _inherits(TabView, _SceneView);
  var _super = _createSuper(TabView);
  function TabView(options) {
    var _this;
    _classCallCheck(this, TabView);
    _this = _super.call(this, options);
    _this._tabs = null;
    _this._tabClickedEvtIds = [];
    _this._viewContainer = null;
    _this._activeFragment = null;
    /** @private
     * @member {object} - The DOM loading overlay to use in transitions */
    _this._loadingOverlay = null;
    // Build loading overlay and add its style class
    _this._loadingOverlay = document.createElement('DIV');
    _this._loadingOverlay.className = 'mzk-loading-overlay fit-parent';
    return _this;
  }
  _createClass(TabView, [{
    key: "destroy",
    value: function destroy() {
      _get(_getPrototypeOf(TabView.prototype), "destroy", this).call(this);
      Utils.clearAllEvents(this._tabClickedEvtIds);
    }
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      this._tabs = this.dom.querySelector("#".concat(this._type, "-tabs"));
      this._viewContainer = this.dom.querySelector("#".concat(this._type, "-view"));
    }
  }, {
    key: "_events",
    value: function _events() {
      for (var i = 0; i < this._tabs.children.length; ++i) {
        var eventId = Evts.addEvent('click', this._tabs.children[i], this._tabClicked, this);
        this._tabClickedEvtIds.push(eventId);
      }
    }
  }, {
    key: "_tabClicked",
    value: function _tabClicked(event) {
      this._unselectTabs();
      event.target.classList.add('selected');
      // Method needs to be implemented in child class, using data-view as prefix for clicked callback
      this["_".concat(event.target.dataset.view, "Clicked")]();
    }
  }, {
    key: "_unselectTabs",
    value: function _unselectTabs() {
      for (var i = 0; i < this._tabs.children.length; ++i) {
        this._tabs.children[i].classList.remove('selected');
      }
    }
  }, {
    key: "_fetchViewFragment",
    value: function _fetchViewFragment(url) {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        _this2._viewContainer.innerHTML = '';
        _this2.startLoading().then(mzk.ui.getFragment.bind(mzk, url)).then(function (response) {
          _this2._viewContainer.insertAdjacentHTML('beforeend', response);
          requestAnimationFrame(resolve);
        })["catch"](reject)["finally"](_this2.stopLoading.bind(_this2)); // Clear loading overlay whatever happens;
      });
    }
  }, {
    key: "_clearFragment",
    value: function _clearFragment() {
      if (this._activeFragment) {
        this._activeFragment.destroy();
        this._activeFragment = null;
      }
    }
  }, {
    key: "startLoading",
    value: function startLoading() {
      var _this3 = this;
      return new Promise(function (resolve) {
        _this3._viewContainer.appendChild(_this3._loadingOverlay);
        requestAnimationFrame(resolve);
      });
    }
  }, {
    key: "stopLoading",
    value: function stopLoading() {
      var _this4 = this;
      return new Promise(function (resolve) {
        _this4._viewContainer.removeChild(_this4._loadingOverlay);
        requestAnimationFrame(resolve);
      });
    }
  }]);
  return TabView;
}(_SceneView__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TabView);

/***/ }),

/***/ "./front/js/view/scene/utils/ViewHistory.js":
/*!**************************************************!*\
  !*** ./front/js/view/scene/utils/ViewHistory.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ViewHistory = /*#__PURE__*/function () {
  function ViewHistory() {
    _classCallCheck(this, ViewHistory);
    this._previousView = [];
    this._nextView = [];
    this._abortNextAdd = false;
    this._fromPreviousClicked = false;
    this._previousButton = null;
    this._nextButton = null;
    this._init().then(this._events.bind(this))["catch"](function (err) {
      return console.error(err);
    });
  }
  _createClass(ViewHistory, [{
    key: "_init",
    value: function _init() {
      var _this = this;
      return new Promise(function (resolve) {
        _this._previousButton = document.getElementById('topbar-view-previous');
        _this._nextButton = document.getElementById('topbar-view-next');
        // New navigation, create baseline states
        if (window.history.state === null) {
          // Back history entry
          window.history.replaceState({
            isBackPage: true
          }, '', '');
          // MainPage history entry
          window.history.pushState({
            isBackPage: false
          }, '', '');
          // Push baseline view
          _this._previousView.push({
            name: 'MainPage'
          });
          resolve();
          return;
        }
        // User arrived from back button
        if (window.history.state.isBackPage) {
          window.history.pushState({
            isBackPage: false
          }, '', '');
        }
        resolve();
      });
    }
  }, {
    key: "_events",
    value: function _events() {
      window.addEventListener('popstate', this._popState.bind(this));
      this._previousButton.addEventListener('click', this._previousClicked.bind(this));
      this._nextButton.addEventListener('click', this._nextClicked.bind(this));
    }
  }, {
    key: "_popState",
    value: function _popState(e) {
      if (e.state !== null) {
        if (e.state.isBackPage) {
          if (this._previousView.length > 0) {
            mzk.ui.previousHistoryView();
          }
        } else {
          mzk.ui.nextHistoryView();
        }
      }
    }
  }, {
    key: "_previousClicked",
    value: function _previousClicked() {
      // Init a previous clicked state for further addView to properly handle next view reset
      this._nextButton.classList.remove('disabled');
      this._fromPreviousClicked = true;
      mzk.ui.previousHistoryView();
    }
  }, {
    key: "_nextClicked",
    value: function _nextClicked() {
      mzk.ui.nextHistoryView();
    }
  }, {
    key: "addView",
    value: function addView(options) {
      // We must know when to reset next array (clicking on a view different than next one in nextView)
      if (!this._fromPreviousClicked && this._nextView.length && this._nextView[this._nextView.length - 1] !== options) {
        this._nextView = [];
      }
      // reset bu default the from previous clicked flag
      this._fromPreviousClicked = false;
      if (this._abortNextAdd === false) {
        window.history.pushState({
          isBackPage: true
        }, '', '');
        this._previousView.push(options);
      } else {
        // Restore abort next add flag to initial state 
        this._abortNextAdd = false;
      }
      if (this._previousView.length > 1) {
        this._previousButton.classList.remove('disabled');
      } else {
        this._previousButton.classList.add('disabled');
      }
      if (this._nextView.length === 0) {
        this._nextButton.classList.add('disabled');
      } else {
        this._nextButton.classList.remove('disabled');
      }
    }
  }, {
    key: "getPreviousView",
    value: function getPreviousView() {
      if (this._previousView.length > 0) {
        // Removing last view from previous, adding it in next
        this._nextView.push(this._previousView.pop());
        // Ensure the next setView isn't save (snake eating its tail, no thx)
        this._abortNextAdd = true;
        return this._previousView[this._previousView.length - 1];
      }
      return null;
    }
  }, {
    key: "getNextView",
    value: function getNextView() {
      if (this._nextView.length > 0) {
        var view = this._nextView.pop();
        return view;
      }
      return null;
    }
  }]);
  return ViewHistory;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ViewHistory);

/***/ }),

/***/ "./front/js/view/visu/AudioVisualizer.js":
/*!***********************************************!*\
  !*** ./front/js/view/visu/AudioVisualizer.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _scss_visu_audiovisualizer_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../scss/visu/audiovisualizer.scss */ "./front/scss/visu/audiovisualizer.scss");
/* harmony import */ var _components_FrequencyBars_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/FrequencyBars.js */ "./front/js/view/visu/components/FrequencyBars.js");
/* harmony import */ var _components_FrequencyCircle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/FrequencyCircle.js */ "./front/js/view/visu/components/FrequencyCircle.js");
/* harmony import */ var _components_Oscilloscope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/Oscilloscope.js */ "./front/js/view/visu/components/Oscilloscope.js");
/* harmony import */ var _components_PeakMeter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/PeakMeter.js */ "./front/js/view/visu/components/PeakMeter.js");
/* harmony import */ var _components_Spectrum_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/Spectrum.js */ "./front/js/view/visu/components/Spectrum.js");
/* harmony import */ var _components_Timeline_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/Timeline.js */ "./front/js/view/visu/components/Timeline.js");
/* harmony import */ var _components_Waveform_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Waveform.js */ "./front/js/view/visu/components/Waveform.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }








var AudioVisualizerVersion = '1.0.0';
window.AudioContext = window.AudioContext || window.webkitAudioContext;
var AudioVisualizer = /*#__PURE__*/function () {
  /** @summary AudioVisualizer factory class to build all supported visualisation
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>This factory will return an <code>AudioVisualizer</code> component. It is
   * automatically rendered, and will also be automatically linked to given audio source. No further manipulation
   * are required (except destroy when done using) on runtime.<br><br>Each components have shared properties,
   * and unique properties, as described in components class themselves. Refer to the components documentation for
   * specific options.<br><br>Multi visualisation can have an impact on CPU load that mostly depends on client configuration.
   * Keep that in mind if you develop your project with a battle station. When done using a component, please call its
   * <code>destroy</code> method to remove listeners and audio processing to avoid memory leaks in your app.</blockquote>
   * @param {object} options - The audio visualisation definition
   * @param {string} options.type - The visualisation type, can be <code>bars</code>/<code>circle</code>/<code>oscilloscope</code>/<code>peakmeter</code>/<code>spectrum</code>/<code>timeline</code>/<code>waveform</code>
   * @param {object} options.player - A DOM audio player to be the audio source for processing
   * @param {object} options.renderTo - A DOM element to render the visualisation in. It will automatically scale content to this element's dimension
   * @param {object} [options.audioContext=null] - A WebAudioAPI audio context to chain the processing nodes in your audio routing.
   * @param {object} [options.inputNode=null] - The WebAudioAPI audio node to be the audio source for processing, You must provide an audioContext
   * @param {number} [options.fftSize=1024] - The FFT size to use in processing, must be a power of 2. High values cost more CPU
   * @returns {object|null} - The custom visualisation component according to given options, <code>null</code> for unknown type */
  function AudioVisualizer(options) {
    _classCallCheck(this, AudioVisualizer);
    if (options.type === 'bars') {
      return new _components_FrequencyBars_js__WEBPACK_IMPORTED_MODULE_1__["default"](options);
    } else if (options.type === 'circle') {
      return new _components_FrequencyCircle_js__WEBPACK_IMPORTED_MODULE_2__["default"](options);
    } else if (options.type === 'oscilloscope') {
      return new _components_Oscilloscope_js__WEBPACK_IMPORTED_MODULE_3__["default"](options);
    } else if (options.type === 'peakmeter') {
      return new _components_PeakMeter_js__WEBPACK_IMPORTED_MODULE_4__["default"](options);
    } else if (options.type === 'spectrum') {
      return new _components_Spectrum_js__WEBPACK_IMPORTED_MODULE_5__["default"](options);
    } else if (options.type === 'timeline') {
      return new _components_Timeline_js__WEBPACK_IMPORTED_MODULE_6__["default"](options);
    } else if (options.type === 'waveform') {
      return new _components_Waveform_js__WEBPACK_IMPORTED_MODULE_7__["default"](options);
    }
    // Visualizer factory return null by default (unknown component name)
    return null;
  }

  /** @public
   * @member {string} - The AudioVisualizer component version */
  _createClass(AudioVisualizer, null, [{
    key: "version",
    get: function get() {
      return AudioVisualizerVersion;
    }
  }]);
  return AudioVisualizer;
}(); // Global scope attachment will be made when bundling this file
window.AudioVisualizer = AudioVisualizer;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AudioVisualizer);

/***/ }),

/***/ "./front/js/view/visu/components/FrequencyBars.js":
/*!********************************************************!*\
  !*** ./front/js/view/visu/components/FrequencyBars.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentMono.js */ "./front/js/view/visu/utils/VisuComponentMono.js");
/* harmony import */ var _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CanvasUtils.js */ "./front/js/view/visu/utils/CanvasUtils.js");
/* harmony import */ var _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var FrequencyBars = /*#__PURE__*/function (_VisuComponentMono) {
  _inherits(FrequencyBars, _VisuComponentMono);
  var _super = _createSuper(FrequencyBars);
  /** @summary FrequencyBars displays the audio spectrum as frequency bars in real time.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentMono
   * @description <blockquote>This will display a single canvas with frequency from left to right be bass to high. The bar
   * height depends on audio bin intensity. The audio graph is then draw with a gradient from bottom to top that is from
   * green to red. Those color can be custom ones (see constructor options).</blockquote>
   * @param {object} options - The frequency bars options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {object[]} [options.colors] - The peak meter gradient colors, must be objects with color (in Hex/RGB/HSL) and index (in Float[0,1]) properties **/
  function FrequencyBars(options) {
    var _options$colors;
    var _this;
    _classCallCheck(this, FrequencyBars);
    _this = _super.call(this, options);
    // Peak gradient
    if (!((_options$colors = options.colors) !== null && _options$colors !== void 0 && _options$colors.gradient)) {
      _this._barGradient = _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultAudioGradient;
    } else {
      _this._barGradient = options.colors.gradient;
    }
    // Update canvas CSS background color
    _this._canvas.style.backgroundColor = options.colors ? options.colors.background || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor;
    return _this;
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  --------------------------------------  VISUCOMPONENTMONO OVERRIDES  -----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _processAudioBin
   * @private
   * @override
   * @memberof FrequencyBars
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit frequency
   * analysis. Then we use utils method to draw bar for each audio bin in studied audio spectrum.</blockquote> **/
  _createClass(FrequencyBars, [{
    key: "_processAudioBin",
    value: function _processAudioBin() {
      // Only fill again the canvas if player is playing
      if (this._isPlaying === true) {
        this._clearCanvas();
        // Get frequency data for current bin in node analyser
        var frequencyData = new Uint8Array(this._nodes.analyser.frequencyBinCount);
        this._nodes.analyser.getByteFrequencyData(frequencyData);
        // Compute single frequency width according to analyser node
        var frequencyWidth = this._canvas.width / this._nodes.analyser.frequencyBinCount;
        // Iterate over data to build each bar
        var cursorX = 0; // X origin for items in loop
        for (var i = 0; i < this._nodes.analyser.frequencyBinCount; ++i) {
          // Compute frequency height in px, relative to the canvas height
          var frequencyHeight = frequencyData[i] / 255 * this._canvas.height;
          _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawVerticalBar(this._canvas, {
            height: frequencyHeight,
            width: frequencyWidth,
            colors: this._barGradient,
            originX: cursorX
          });
          // Update cursor position
          cursorX += frequencyWidth;
        }
        // Draw next frame
        requestAnimationFrame(this._processAudioBin);
      }
    }
  }]);
  return FrequencyBars;
}(_utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FrequencyBars);

/***/ }),

/***/ "./front/js/view/visu/components/FrequencyCircle.js":
/*!**********************************************************!*\
  !*** ./front/js/view/visu/components/FrequencyCircle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentMono.js */ "./front/js/view/visu/utils/VisuComponentMono.js");
/* harmony import */ var _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CanvasUtils.js */ "./front/js/view/visu/utils/CanvasUtils.js");
/* harmony import */ var _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var FrequencyCircle = /*#__PURE__*/function (_VisuComponentMono) {
  _inherits(FrequencyCircle, _VisuComponentMono);
  var _super = _createSuper(FrequencyCircle);
  /** @summary FrequencyCircle displays a stylistic radial view in real time.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentMono
   * @description <blockquote>This will display a single canvas with frequency displayed in. Inspired from
   * https://www.kkhaydarov.com/audio-visualizer/ and https://codepen.io/noeldelgado/pen/EaNjBy aka real mvps
   * that helped going through WebAudioAPI. It will combine a radial gradient in the background, a spinning logo
   * in the canvas center, radial frequency bars, radial oscilloscope, linear oscilloscope with it visibility handled
   * by real time audio intensity, as well as circular pulsing and glowing circle around the logo.</blockquote>
   * @param {object} options - The frequency circle options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one **/
  function FrequencyCircle(options) {
    _classCallCheck(this, FrequencyCircle);
    return _super.call(this, options);
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  --------------------------------------  VISUCOMPONENTMONO OVERRIDES  -----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof FrequencyCircle
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The frequency circle options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {string} [options.image] - The image to put in center of canvas with a spinning animation **/
  _createClass(FrequencyCircle, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      _get(_getPrototypeOf(FrequencyCircle.prototype), "_fillAttributes", this).call(this, options);
      // Frequency circle specific attributes
      this._imageSrc = null;
      this._centerX = null;
      this._centerY = null;
      this._radius = null;
      this._radialSection = null;
      this._barCount = null;
      this._barMaxHeight = null;
      this._circleStrokeWidth = null;
      this._stars = [];
      this._points = [];
      this._oscilloscopeRotation = null;
      // Dom specific elements for frequency circle
      this._dom.logo = null;
      // Intensity modifier
      this._averageBreakpoint = 132; // Putting breakpoint on mid amplitude [0, 255]
      this._averageHit = false;
      this._imageSrc = options.image;
      this._dom.logo = document.createElement('IMG');
      this._dom.logo.classList.add('paused');
      this._dom.logo.src = this._imageSrc;
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      _get(_getPrototypeOf(FrequencyCircle.prototype), "_buildUI", this).call(this);
      if (this._imageSrc) {
        this._dom.container.appendChild(this._dom.logo);
      }
      this._buildBackgroundBase();
    }

    /** @method
     * @name _play
     * @private
     * @override
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On play event callback.</blockquote> **/
  }, {
    key: "_play",
    value: function _play() {
      _get(_getPrototypeOf(FrequencyCircle.prototype), "_play", this).call(this);
      this._dom.logo.classList.remove('paused'); // Resume scss animation
    }

    /** @method
     * @name _pause
     * @private
     * @override
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On pause event callback.</blockquote> **/
  }, {
    key: "_pause",
    value: function _pause() {
      _get(_getPrototypeOf(FrequencyCircle.prototype), "_pause", this).call(this);
      this._dom.logo.classList.add('paused'); // Pause scss animation
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      _get(_getPrototypeOf(FrequencyCircle.prototype), "_onResize", this).call(this);
      this._circleStrokeWidth = 2;
      this._barCount = this._nodes.analyser.frequencyBinCount;
      this._centerX = this._canvas.width / 2;
      this._centerY = this._canvas.height / 2;
      this._barMaxHeight = this._canvas.height / 8;
      this._radius = this._canvas.height / 4 - this._canvas.height / 16;
      this._radialSection = Math.PI * 2 / this._barCount;
      // Populating stars
      this._stars = [];
      for (var i = 0; i < 1500; ++i) {
        this._stars.push(new BackgroundStar(this._centerX, this._centerY, null, this._averageBreakpoint));
      }
      // Populating circular oscilloscope points
      this._points = [];
      for (var _i = 0; _i < this._fftSize / 2; ++_i) {
        this._points.push(new OscilloscopeRadialPoint({
          index: _i,
          height: this._canvas.height,
          width: this._canvas.width,
          total: this._fftSize / 2
        }));
      }
      // Build canvas fixed base
      this._buildBackgroundBase();
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @override
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit frequency
     * and time analysis. Then we use utils method to draw radial oscilloscope, linear point oscilloscope, background points
     * and radial frequency bars.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      if (this._isPlaying === true) {
        this._clearCanvas();
        this._buildBackgroundBase();
        // Extract frequencies and times data
        var frequencies = new Uint8Array(this._nodes.analyser.frequencyBinCount);
        var times = new Uint8Array(this._nodes.analyser.frequencyBinCount);
        this._nodes.analyser.getByteFrequencyData(frequencies);
        this._nodes.analyser.getByteTimeDomainData(times);
        // Get average frequency for proccessed bin
        var average = this._getAverageFrequency(frequencies);
        this._averageHit = average > this._averageBreakpoint;
        // Draw circle bars while retrieving aaverage amplitude
        this._animateCircleBars(frequencies);
        // Animate each star
        this._animateStars(average);
        // Draw average circle with its glow effect around center
        this._animateCircleGlow(average);
        // Draw circular oscilloscope and horizontal one if average hit
        this._animateOscilloscopes(times);
        // Request for next frame
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /*  ----------  FrequencyCircle internal methods  ----------  */

    /** @method
     * @name _processAudioBin
     * @private
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw radial gradient background and circle that surround image.</blockquote> **/
  }, {
    key: "_buildBackgroundBase",
    value: function _buildBackgroundBase() {
      // Build background radial gradient
      // Color value according to ManaZeak's linear background colors
      _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].drawRadialGradient(this._canvas, {
        x0: this._centerX,
        y0: this._centerY,
        r0: this._radius,
        x1: this._centerX,
        y1: this._centerY,
        r1: this._canvas.width / 2.66,
        colors: [{
          color: '#3C405D',
          index: 0
        }, {
          color: '#060609',
          index: 1
        }]
      });
      // Build logo circle border
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawCircle(this._canvas, {
        centerX: this._centerX,
        centerY: this._centerY,
        radius: this._radius,
        radStart: 0,
        radEnd: Math.PI * 2,
        width: this._circleStrokeWidth * 2 // Times two because stroke is centered on circle
      });
    }

    /** @method
     * @name _animateCircleBars
     * @private
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Compute the frequency circle shape according to audio BIN frequency array.</blockquote>
     * @param {number[]} frequencies - The frequency array for a given audio bin **/
  }, {
    key: "_animateCircleBars",
    value: function _animateCircleBars(frequencies) {
      // Compute radial width for each circular bar
      var barWidth = Math.round(this._radialSection * this._radius);
      // Iterate over frequencies to draw each matching frequency bin
      for (var i = 0; i < frequencies.length; ++i) {
        // Compute current bar height depending on intensity
        var barHeight = frequencies[i] / 255 * this._barMaxHeight;
        // Use CanvasUtils to draw bar
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawRadialBar(this._canvas, {
          frequencyValue: frequencies[i],
          x0: this._centerX + Math.cos(this._radialSection * i - Math.PI / 2) * (this._radius + this._circleStrokeWidth),
          y0: this._centerY + Math.sin(this._radialSection * i - Math.PI / 2) * (this._radius + this._circleStrokeWidth),
          x1: this._centerX + Math.cos(this._radialSection * i - Math.PI / 2) * (this._radius + this._circleStrokeWidth + barHeight),
          y1: this._centerY + Math.sin(this._radialSection * i - Math.PI / 2) * (this._radius + this._circleStrokeWidth + barHeight),
          width: barWidth,
          color: this._averageHit ? '#56D45B' : '#37C340'
        });
      }
    }

    /** @method
     * @name _animateStars
     * @private
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Animate background points to match intensity with color and radius.</blockquote>
     * @param {number} average - The average value that acts like a breakpoint for intensity **/
  }, {
    key: "_animateStars",
    value: function _animateStars(average) {
      var tick = this._averageHit ? average / 20 : average / 60;
      for (var i = 0; i < this._stars.length; ++i) {
        var star = this._stars[i];
        // Update star position and variation
        star.updatePosition(tick, 0.6);
        // Replace star with new one if it went out canvas
        if (star.x < -this._centerX || star.x > this._centerX || star.y < -this._centerY || star.y > this._centerY) {
          star = new BackgroundStar(this._centerX, this._centerY, average, this._averageBreakpoint); // Update local variable
          this._stars[i] = star; // Save new reference
        }
        // Use CanvasUtils to draw star disc
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawDisc(this._canvas, {
          centerX: star.x + this._centerX,
          centerY: star.y + this._centerY,
          radius: star.radius,
          radStart: Math.PI * 2,
          radEnd: false,
          color: star.color
        });
      }
    }

    /** @method
     * @name _animateCircleGlow
     * @private
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Animate the glowing circle around centred logo.</blockquote>
     * @param {number} average - The average value that acts like a breakpoint for intensity **/
  }, {
    key: "_animateCircleGlow",
    value: function _animateCircleGlow(average) {
      // Build average amplitude glow with color change when average breakpoint is hit
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawCircleGlow(this._canvas, {
        centerX: this._centerX,
        centerY: this._centerY,
        radius: (this._radius * 1.33 + average) * 2,
        // Glow need twice radius to properly display gradient
        radStart: 0,
        radEnd: Math.PI * 2,
        colors: [{
          color: 'rgba(0, 0, 0, 0)',
          index: 0.48
        }, {
          color: this._averageHit ? /* Green */'#56D45B' : /* Blue */'#48ABAF',
          index: 0.5
        }, {
          color: 'rgba(0, 0, 0, 0)',
          index: 0.52
        }]
      });
    }

    /** @method
     * @name _animateOscilloscopes
     * @private
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw both radial and linear point oscilloscopes.</blockquote>
     * @param {number[]} times - The time domain for a given audio bin **/
  }, {
    key: "_animateOscilloscopes",
    value: function _animateOscilloscopes(times) {
      var tick = 0.05;
      var color = '#FFF';
      if (this._averageHit) {
        this._oscilloscopeRotation += tick;
        color = 'rgba(255, 193, 140, .7)'; // Orange
      } else {
        this._oscilloscopeRotation += -tick;
        color = 'rgba(125, 228, 132, 0.25)'; // Green
      }
      // Update radial oscilloscope with time values
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawRadialOscilloscope(this._canvas, {
        points: this._points,
        times: times,
        length: this._fftSize / 2,
        centerX: this._centerX,
        centerY: this._centerY,
        rotation: this._oscilloscopeRotation,
        color: color
      });
      // If breakpoint is reached, we draw stillized horizontal oscilloscope
      if (this._averageHit) {
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawPointsOscilloscope(this._canvas, {
          times: times,
          length: this._fftSize / 2,
          color: 'rgba(113, 201, 205, .7)'
        });
      }
    }

    /** @method
     * @name _getAverageFrequency
     * @private
     * @memberof FrequencyCircle
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Compute the average value for a given audio bin.</blockquote>
     * @param {number[]} frequencies - The frequency array for a given audio bin
     * @return {number} - The average value for a frequency bin **/
  }, {
    key: "_getAverageFrequency",
    value: function _getAverageFrequency(frequencies) {
      var average = 0; // Output average value
      for (var i = 0; i < frequencies.length; ++i) {
        // Update average amplitude value
        average += frequencies[i];
      }
      // Return average value of frequencies
      return average / frequencies.length;
    }
  }]);
  return FrequencyCircle;
}(_utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/*  ----------  Utils class for this visualisation  ----------  */
var BackgroundStar = /*#__PURE__*/function () {
  /** @summary BackgroundStar handle stars in frequency circle.
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>This will display a single canvas with frequency displayed with.</blockquote>
   * @param {number} centerX - The start x origin
   * @param {number} centerY - The start y origin
   * @param {number} [average=0] - The audio bin average value
   * @param {number} [breakpoint=132] - The size and color breakpoint value to be compared with average **/
  function BackgroundStar(centerX, centerY) {
    var average = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var breakpoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 132;
    _classCallCheck(this, BackgroundStar);
    // Public attributes
    this.radius = 0.4;
    this.color = '#0F8489'; // Dark blue
    this.x = Math.random() * (centerX * 2) - centerX;
    this.y = Math.random() * (centerY * 2) - centerY;
    // Private attributes
    this._z = Math.max(centerX * 2 / (centerY * 2));
    this._maxDepth = Math.max(centerX * 2 / (centerY * 2));
    // Set star variation in space
    if (Math.abs(this.x) > Math.abs(this.y)) {
      this._dx = 1.0;
      this._dy = Math.abs(this.y / this.x);
    } else {
      this._dx = Math.abs(this.x / this.y);
      this._dy = 1.0;
    }
    // Set variation relative to center
    this._dx *= this.x > 0 ? 1 : -1;
    this._dy *= this.y > 0 ? 1 : -1;
    this._dz = -0.1;
    // Determine color according to center or average intensity
    if (this.y > centerY / 2) {
      this.color = '#71C9CD'; // Light Blue
    } else if (average > breakpoint) {
      this.color = '#FF6B67'; // Red
    }
  }

  /** @method
   * @name updatePosition
   * @public
   * @memberof BackgroundStar
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Update the background star position.</blockquote>
   * @param {number} tick - The multiplier value for position variation
   * @param {number} radiusFactor - The star radius variation factor **/
  _createClass(BackgroundStar, [{
    key: "updatePosition",
    value: function updatePosition(tick, radiusFactor) {
      // Update position
      this.x += this._dx * tick;
      this.y += this._dy * tick;
      this._z += this._dz; // Constant z variation
      // Update variation
      this._dx += this._dx * .001;
      this._dy += this._dy * .001;
      this.radius = radiusFactor + (this._maxDepth - this._z) * .1;
    }
  }]);
  return BackgroundStar;
}();
var OscilloscopeRadialPoint = /*#__PURE__*/function () {
  /** @summary OscilloscopeRadialPoint handle each point in circular oscilloscope.
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Create a container for oscilloscope point. Edit radius, x and y public attributes.</blockquote>
   * @param {object} options - The oscilloscope radial point option
   * @param {number} options.height - The point height
   * @param {number} options.width - The point width
   * @param {number} options.total - The divider value for angle
   * @param {number} options.index - The numerator value for angle **/
  function OscilloscopeRadialPoint(options) {
    _classCallCheck(this, OscilloscopeRadialPoint);
    this._height = options.height;
    this._width = options.width;
    this._total = options.total;
    this._index = options.index;
    this._value = 0;
    this._radius = 0;
    this.angle = 0;
    this.x = 0;
    this.y = 0;
    this.dx = 0;
    this.dy = 0;
    this._init();
  }
  _createClass(OscilloscopeRadialPoint, [{
    key: "_init",
    value: function _init() {
      this._value = Math.random() * 256;
      this._radius = Math.abs(this._width) / 8;
      // Public attributes
      this.angle = this._index * 360 / this._total;
      this.x = this._width / 2 + this._radius * Math.sin(Math.PI / 180 * this.angle);
      this.y = this._height / 2 + this._radius * Math.cos(Math.PI / 180 * this.angle);
      this.dx = this.x + this._value * Math.sin(Math.PI / 180 * this.angle);
      this.dy = this.y + this._value * Math.cos(Math.PI / 180 * this.angle);
    }
  }]);
  return OscilloscopeRadialPoint;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FrequencyCircle);

/***/ }),

/***/ "./front/js/view/visu/components/Oscilloscope.js":
/*!*******************************************************!*\
  !*** ./front/js/view/visu/components/Oscilloscope.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentStereo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentStereo.js */ "./front/js/view/visu/utils/VisuComponentStereo.js");
/* harmony import */ var _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CanvasUtils.js */ "./front/js/view/visu/utils/CanvasUtils.js");
/* harmony import */ var _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Oscilloscope = /*#__PURE__*/function (_VisuComponentStereo) {
  _inherits(Oscilloscope, _VisuComponentStereo);
  var _super = _createSuper(Oscilloscope);
  /** @summary Oscilloscope displays a merged or L/R oscilloscope in real time.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentStereo
   * @description <blockquote>This will display a single/dual canvas with frequency displayed with.</blockquote>
   * @param {object} options - The oscilloscope options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {boolean} [options.merged=false] - Merge left and right channel into one output
   * @param {string} [options.colors] - The oscilloscope background and signal color
   * @param {string} [options.colors.signal=ColorUtils.defaultPrimaryColor] - The signal color
   * @param {string} [options.colors.background=ColorUtils.defaultPrimaryColor] - The background color **/
  function Oscilloscope(options) {
    var _options$colors;
    var _this;
    _classCallCheck(this, Oscilloscope);
    _this = _super.call(this, options);
    // Define default oscillo color
    _this._colors = {
      signal: _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultPrimaryColor
    };
    // Save color sent by caller if any
    if ((_options$colors = options.colors) !== null && _options$colors !== void 0 && _options$colors.signal) {
      _this._colors.signal = options.colors.signal;
    }
    // Update canvas CSS background color
    var bgColor = options.colors ? options.colors.background || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor;
    if (_this._merged === true) {
      _this._canvas.style.backgroundColor = bgColor;
    } else {
      _this._canvasL.style.backgroundColor = bgColor;
      _this._canvasR.style.backgroundColor = bgColor;
    }
    // Init oscilloscope dimensions
    _this._updateDimensions();
    return _this;
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  -------------------------------------  VISUCOMPONENTSTEREO OVERRIDES  ----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof Oscilloscope
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The oscilloscope options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one **/
  _createClass(Oscilloscope, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      _get(_getPrototypeOf(Oscilloscope.prototype), "_fillAttributes", this).call(this, options);

      // Dimensions will be computed when canvas have been created
      this._dimension = {
        height: null,
        canvasHeight: null,
        width: null
      };
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof Oscilloscope
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      _get(_getPrototypeOf(Oscilloscope.prototype), "_buildUI", this).call(this);
      if (this._merged === true) {
        this._dom.container.removeChild(this._canvasR);
      }
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof Oscilloscope
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      _get(_getPrototypeOf(Oscilloscope.prototype), "_onResize", this).call(this);
      this._updateDimensions();
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @override
     * @memberof Oscilloscope
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit time
     * analysis.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      if (this._isPlaying === true) {
        this._clearCanvas();
        if (this._merged === true) {
          this._mergedStereoAnalysis();
        } else {
          this._stereoAnalysis();
        }
        // Draw next frame
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /*  ----------  Oscilloscope internal methods  ----------  */

    /** @method
     * @name _mergedStereoAnalysis
     * @private
     * @memberof Oscilloscope
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform a merged Left and Right analysis with 8 bit time domain data.</blockquote> **/
  }, {
    key: "_mergedStereoAnalysis",
    value: function _mergedStereoAnalysis() {
      // Create TimeDomain array with frequency bin length
      var timeDomain = new Uint8Array(this._nodes.analyser.frequencyBinCount);
      // Left/Right channel
      this._nodes.analyser.getByteTimeDomainData(timeDomain);
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawOscilloscope(this._canvasL, {
        samples: this._nodes.analyser.frequencyBinCount,
        timeDomain: timeDomain,
        colors: this._colors.signal
      });
    }

    /** @method
     * @name _stereoAnalysis
     * @private
     * @memberof Oscilloscope
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform a separated Left and Right analysis with 8 bit time domain data.</blockquote> **/
  }, {
    key: "_stereoAnalysis",
    value: function _stereoAnalysis() {
      // Create TimeDomain array with freqency bin length
      var timeDomain = new Uint8Array(this._nodes.analyserL.frequencyBinCount);
      // Left channel
      this._nodes.analyserL.getByteTimeDomainData(timeDomain);
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawOscilloscope(this._canvasL, {
        samples: this._nodes.analyserL.frequencyBinCount,
        timeDomain: timeDomain,
        colors: this._colors.signal
      });
      // Right channel
      this._nodes.analyserR.getByteTimeDomainData(timeDomain);
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawOscilloscope(this._canvasR, {
        samples: this._nodes.analyserR.frequencyBinCount,
        timeDomain: timeDomain,
        colors: this._colors.signal
      });
    }

    /** @method
     * @name _updateDimensions
     * @private
     * @memberof Oscilloscope
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Usually called on resize event, update canvas dimension to fit render to DOM object.</blockquote> **/
  }, {
    key: "_updateDimensions",
    value: function _updateDimensions() {
      this._dimension.height = this._renderTo.offsetHeight - 4; // 2px borders times two channels
      this._dimension.width = this._renderTo.offsetWidth - 2; // 2px borders
      this._dimension.canvasHeight = this._dimension.height / 2;
      if (this._merged === true) {
        this._canvasL.width = this._dimension.width;
        this._canvasL.height = this._dimension.canvasHeight * 2;
      } else {
        this._canvasL.width = this._dimension.width;
        this._canvasL.height = this._dimension.canvasHeight;
        this._canvasR.width = this._dimension.width;
        this._canvasR.height = this._dimension.canvasHeight;
      }
    }
  }]);
  return Oscilloscope;
}(_utils_VisuComponentStereo_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Oscilloscope);

/***/ }),

/***/ "./front/js/view/visu/components/PeakMeter.js":
/*!****************************************************!*\
  !*** ./front/js/view/visu/components/PeakMeter.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentStereo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentStereo.js */ "./front/js/view/visu/utils/VisuComponentStereo.js");
/* harmony import */ var _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CanvasUtils.js */ "./front/js/view/visu/utils/CanvasUtils.js");
/* harmony import */ var _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var PeakMeter = /*#__PURE__*/function (_VisuComponentStereo) {
  _inherits(PeakMeter, _VisuComponentStereo);
  var _super = _createSuper(PeakMeter);
  /** @summary PeakMeter displays a splited or merged peak meter for audio signal
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentStereo
   * @description <blockquote>This component display a peak meter in several configuration. It can include a scale and its legend
   * and be oriented vertically or horizontally. Modified https://github.com/esonderegger/web-audio-peak-meter</blockquote>
   * @param {object} options - The peak meter options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {boolean} [options.merged=false] - Merge left and right channel into one output
   * @param {object} [options.legend] - The peak meter legend options
   * @param {number} [options.legend.dbScaleMin=60] - The min scale value
   * @param {number} [options.legend.dbScaleTicks=6] - The tick distance, must be a multiple of scale min
   * @param {object} [options.colors] - The oscilloscope background and signal color
   * @param {string} [options.colors.background=ColorUtils.defaultPrimaryColor] - The background color
   * @param {string} [options.colors.min=#56D45B] - The gradient min value
   * @param {string} [options.colors.step0=#AFF2B3] - The gradient second value
   * @param {string} [options.colors.step1=#FFAD67] - The gradient third value
   * @param {string} [options.colors.step2=#FF6B67] - The gradient fourth value
   * @param {string} [options.colors.max=#FFBAB8] - The gradient max value **/
  function PeakMeter(options) {
    var _options$colors;
    var _this;
    _classCallCheck(this, PeakMeter);
    _this = _super.call(this, options);
    // Peak gradient
    if (!((_options$colors = options.colors) !== null && _options$colors !== void 0 && _options$colors.gradient)) {
      _this._peakGradient = _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultAudioGradient;
    } else {
      _this._peakGradient = options.colors.gradient;
    }
    // Update canvas CSS background color
    var bgColor = options.colors ? options.colors.background || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor;
    if (_this._merged === true) {
      _this._canvasL.style.backgroundColor = bgColor;
    } else {
      _this._canvasL.style.backgroundColor = bgColor;
      _this._canvasR.style.backgroundColor = bgColor;
    }
    return _this;
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  -------------------------------------  VISUCOMPONENTSTEREO OVERRIDES  ----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof PeakMeter
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The frequency circle options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one **/
  _createClass(PeakMeter, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      _get(_getPrototypeOf(PeakMeter.prototype), "_fillAttributes", this).call(this, options);
      this._orientation = options.orientation || 'horizontal';
      this._legend = options.legend || null;
      if (this._legend) {
        this._dbScaleMin = options.legend.dbScaleMin || 60;
        this._dbScaleTicks = options.legend.dbScaleTicks || 15;
      } else {
        this._dbScaleMin = 60;
        this._dbScaleTicks = 15;
      }
      this._amplitudeL = 0;
      this._amplitudeR = 0;
      this._peakL = 0;
      this._peakR = 0;
      this._peakSetTimeL = null;
      this._peakSetTimeR = null;
      this._dom.scaleContainer = null;
      this._dom.labels = [];
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      _get(_getPrototypeOf(PeakMeter.prototype), "_buildUI", this).call(this);
      if (this._orientation === 'horizontal') {
        this._dom.container.classList.add('horizontal-peakmeter');
      }
      if (this._legend) {
        this._dom.scaleContainer = document.createElement('DIV');
        this._dom.scaleContainer.classList.add('scale-container');
        this._dom.container.insertBefore(this._dom.scaleContainer, this._dom.container.firstChild);
      }
      if (this._merged === true) {
        this._dom.container.removeChild(this._canvasR);
      }
      this._updateDimensions();
      if (this._legend) {
        this._createPeakLabel();
        this._createScaleTicks();
      }
    }

    /** @method
     * @name _setAudioNodes
     * @private
     * @override
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build audio chain with source.</blockquote> **/
  }, {
    key: "_setAudioNodes",
    value: function _setAudioNodes() {
      _get(_getPrototypeOf(PeakMeter.prototype), "_setAudioNodes", this).call(this);
      this._peakSetTimeL = this._audioCtx.currentTime;
      this._peakSetTimeR = this._audioCtx.currentTime;
    }

    /** @method
     * @name _pause
     * @private
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On pause event callback.</blockquote> **/
  }, {
    key: "_pause",
    value: function _pause() {
      _get(_getPrototypeOf(PeakMeter.prototype), "_pause", this).call(this);
      if (this._legend) {
        this._dom.labels[0].textContent = '-∞';
        this._dom.labels[1].textContent = '-∞';
      }
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      _get(_getPrototypeOf(PeakMeter.prototype), "_onResize", this).call(this);
      this._updateDimensions();
      if (this._legend) {
        this._createPeakLabel();
        this._createScaleTicks();
      }
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @override
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit frequency
     * and time analysis. Then we use utils method to draw radial oscilloscope, linear point oscilloscope, background points
     * and radial frequency bars.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      if (this._isPlaying === true) {
        this._clearCanvas();
        if (this._merged === true) {
          this._mergedStereoAnalysis();
        } else {
          this._stereoAnalysis();
        }
        // Draw next frame
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /*  ----------  PeakMeter internal methods  ----------  */

    /** @method
     * @name _mergedStereoAnalysis
     * @private
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform a merged Left and Right analysis with 32 bit time domain data.</blockquote> **/
  }, {
    key: "_mergedStereoAnalysis",
    value: function _mergedStereoAnalysis() {
      var data = new Float32Array(this._fftSize);
      this._nodes.analyser.getFloatTimeDomainData(data);
      // Compute average power over the interval and average power attenuation in DB
      var sumOfSquares = 0;
      for (var i = 0; i < data.length; i++) {
        sumOfSquares += data[i] * data[i];
      }
      var avgPowerDecibels = 10 * Math.log10(sumOfSquares / data.length);
      // Compure amplitude from width or height depending on orientation
      var dbScaleBound = this._dbScaleMin * -1;
      if (this._orientation === 'horizontal') {
        this._amplitudeL = Math.floor(avgPowerDecibels * this._canvasL.width / dbScaleBound);
      } else if (this._orientation === 'vertical') {
        this._amplitudeL = Math.floor(avgPowerDecibels * this._canvasL.height / dbScaleBound);
      }
      // Left channel
      // Found a new max value (peak) [-this._dbScaleMin, 0] interval
      if (this._peakL > this._amplitudeL) {
        this._peakL = this._amplitudeL;
        this._peakSetTimeL = this._audioCtx.currentTime;
        // Update peak label
        if (this._legend && avgPowerDecibels !== -Infinity) {
          this._dom.labels[0].textContent = _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].precisionRound(avgPowerDecibels, 1);
        }
      } else if (this._audioCtx.currentTime - this._peakSetTimeL > 1) {
        this._peakL = this._amplitudeL;
        this._peakSetTimeL = this._audioCtx.currentTime;
        // Update peak label
        if (this._legend && avgPowerDecibels !== -Infinity) {
          this._dom.labels[0].textContent = _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].precisionRound(avgPowerDecibels, 1);
        }
      }
      // Draw left and right peak meters
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawPeakMeter(this._canvasL, {
        amplitude: this._amplitudeL,
        peak: this._peakL,
        orientation: this._orientation,
        colors: this._peakGradient
      });
    }

    /** @method
     * @name _stereoAnalysis
     * @private
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform a separated Left and Right analysis with 32 bit time domain data.</blockquote> **/
  }, {
    key: "_stereoAnalysis",
    value: function _stereoAnalysis() {
      var dataL = new Float32Array(this._fftSize);
      var dataR = new Float32Array(this._fftSize);
      this._nodes.analyserL.getFloatTimeDomainData(dataL);
      this._nodes.analyserR.getFloatTimeDomainData(dataR);
      // Compute average power over the interval and average power attenuation in DB
      var sumOfSquaresL = 0;
      var sumOfSquaresR = 0;
      for (var i = 0; i < dataL.length; i++) {
        sumOfSquaresL += dataL[i] * dataL[i];
        sumOfSquaresR += dataR[i] * dataR[i];
      }
      var avgPowerDecibelsL = 10 * Math.log10(sumOfSquaresL / dataL.length);
      var avgPowerDecibelsR = 10 * Math.log10(sumOfSquaresR / dataR.length);
      // Compute amplitude from width or height depending on orientation
      var dbScaleBound = this._dbScaleMin * -1;
      if (this._orientation === 'horizontal') {
        this._amplitudeL = Math.floor(avgPowerDecibelsL * this._canvasL.width / dbScaleBound);
        this._amplitudeR = Math.floor(avgPowerDecibelsR * this._canvasR.width / dbScaleBound);
      } else if (this._orientation === 'vertical') {
        this._amplitudeL = Math.floor(avgPowerDecibelsL * this._canvasL.height / dbScaleBound);
        this._amplitudeR = Math.floor(avgPowerDecibelsR * this._canvasR.height / dbScaleBound);
      }
      // Left channel
      this.__stereoLeft(avgPowerDecibelsL);
      // Right channel
      this.__stereoRight();
      // Draw left and right peak meters
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawPeakMeter(this._canvasL, {
        amplitude: this._amplitudeL,
        peak: this._peakL,
        orientation: this._orientation,
        colors: this._peakGradient
      });
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawPeakMeter(this._canvasR, {
        amplitude: this._amplitudeR,
        peak: this._peakR,
        orientation: this._orientation,
        colors: this._peakGradient
      });
    }
  }, {
    key: "__stereoLeft",
    value: function __stereoLeft(avgPowerDecibelsL) {
      // Found a new max value (peak) [-this._dbScaleMin, 0] interval
      if (this._peakL > this._amplitudeL) {
        this._peakL = this._amplitudeL;
        this._peakSetTimeL = this._audioCtx.currentTime;
        // Update peak label
        if (this._legend && avgPowerDecibelsL !== -Infinity) {
          this._dom.labels[0].textContent = _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].precisionRound(avgPowerDecibelsL, 1);
        }
      } else if (this._audioCtx.currentTime - this._peakSetTimeL > 1) {
        this._peakL = this._amplitudeL;
        this._peakSetTimeL = this._audioCtx.currentTime;
        // Update peak label
        if (this._legend && avgPowerDecibelsL !== -Infinity) {
          this._dom.labels[0].textContent = _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].precisionRound(avgPowerDecibelsL, 1);
        }
      }
    }
  }, {
    key: "__stereoRight",
    value: function __stereoRight(avgPowerDecibelsR) {
      // Found a new max value (peak) [-this._dbScaleMin, 0] interval
      if (this._peakR > this._amplitudeR) {
        this._peakR = this._amplitudeR;
        this._peakSetTimeR = this._audioCtx.currentTime;
        // Update peak label
        if (this._legend && avgPowerDecibelsR !== -Infinity) {
          this._dom.labels[1].textContent = _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].precisionRound(avgPowerDecibelsR, 1);
        }
      } else if (this._audioCtx.currentTime - this._peakSetTimeR > 1) {
        this._peakR = this._amplitudeL;
        this._peakSetTimeR = this._audioCtx.currentTime;
        // Update peak label
        if (this._legend && avgPowerDecibelsR !== -Infinity) {
          this._dom.labels[1].textContent = _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].precisionRound(avgPowerDecibelsR, 1);
        }
      }
    }

    /** @method
     * @name _createScaleTicks
     * @private
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build the scale tick depending on component orientation.</blockquote> **/
  }, {
    key: "_createScaleTicks",
    value: function _createScaleTicks() {
      var numTicks = Math.floor(this._dbScaleMin / this._dbScaleTicks);
      var dbTickLabel = 0;
      this._dom.scaleContainer.innerHTML = '';
      if (this._orientation === 'horizontal') {
        var tickWidth = this._canvasL.width / numTicks;
        for (var i = 0; i < numTicks; ++i) {
          var dbTick = document.createElement('DIV');
          this._dom.scaleContainer.appendChild(dbTick);
          dbTick.style.width = "".concat(tickWidth, "px");
          dbTick.textContent = "".concat(dbTickLabel);
          dbTickLabel -= this._dbScaleTicks;
        }
      } else {
        var tickHeight = this._canvasL.height / numTicks;
        for (var _i = 0; _i < numTicks; ++_i) {
          var _dbTick = document.createElement('DIV');
          this._dom.scaleContainer.appendChild(_dbTick);
          _dbTick.style.height = "".concat(tickHeight, "px");
          _dbTick.textContent = "".concat(dbTickLabel);
          dbTickLabel -= this._dbScaleTicks;
        }
      }
    }

    /** @method
     * @name _createPeakLabel
     * @private
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build the scale legend depending on component orientation.</blockquote> **/
  }, {
    key: "_createPeakLabel",
    value: function _createPeakLabel() {
      if (this._dom.labels.length === 2) {
        this._dom.container.removeChild(this._dom.labels[0]);
        this._dom.container.removeChild(this._dom.labels[1]);
        this._dom.labels = [];
      }
      var peakLabelL = document.createElement('DIV');
      var peakLabelR = document.createElement('DIV');
      peakLabelL.classList.add('peak-value-container');
      peakLabelR.classList.add('peak-value-container');
      peakLabelL.textContent = '-∞';
      peakLabelR.textContent = '-∞';
      if (this._orientation === 'horizontal') {
        peakLabelL.style.width = '28px';
        peakLabelL.style.height = "".concat(this._canvasL.height + 2, "px"); // 2 px borders
        peakLabelL.style.top = '14px';
        peakLabelR.style.width = '28px';
        peakLabelR.style.height = "".concat(this._canvasL.height + 2, "px"); // 2 px borders
        peakLabelR.style.top = "".concat(this._canvasL.height + 16, "px"); // 2px borders + 14px height
      } else {
        peakLabelL.style.width = "".concat(this._canvasL.width + 2, "px"); // 2 px borders
        peakLabelL.style.left = '18px';
        peakLabelR.style.width = "".concat(this._canvasL.width + 2, "px"); // 2 px borders
        peakLabelR.style.left = "".concat(this._canvasL.width + 20, "px"); // 2px borders + 18px width
      }

      this._dom.labels.push(peakLabelL);
      this._dom.labels.push(peakLabelR);
      this._dom.container.appendChild(this._dom.labels[0]);
      this._dom.container.appendChild(this._dom.labels[1]);
    }

    /** @method
     * @name _updateDimensions
     * @private
     * @memberof PeakMeter
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Usually called on resize event, update canvas dimension to fit render to DOM object.</blockquote> **/
  }, {
    key: "_updateDimensions",
    value: function _updateDimensions() {
      var widthOffset = 0;
      var heightOffset = 0;
      if (this._orientation === 'horizontal') {
        this.__updateHorizontal(heightOffset, widthOffset);
      } else if (this._orientation === 'vertical') {
        this.__updateVertical(heightOffset, widthOffset);
      }
    }
  }, {
    key: "__updateHorizontal",
    value: function __updateHorizontal(heightOffset, widthOffset) {
      if (this._legend) {
        widthOffset = 30;
        heightOffset = 14;
      }
      this._canvasL.width = this._renderTo.offsetWidth - widthOffset; // 2px borders + 28 px with for label

      if (this._merged === true) {
        this._canvasL.height = this._renderTo.offsetHeight - heightOffset - 2; // 2px border + scale height 14px
        this._canvasR.height = this._renderTo.offsetHeight - heightOffset - 2; // 2px border + scale height 14px
      } else {
        this._canvasR.width = this._renderTo.offsetWidth - widthOffset; // 2px borders + 28 px with for label
        this._canvasL.height = (this._renderTo.offsetHeight - heightOffset) / 2 - 2; // 2px border + scale height 14px
        this._canvasR.height = (this._renderTo.offsetHeight - heightOffset) / 2 - 2; // 2px border + scale height 14px
      }

      if (this._legend) {
        this._dom.scaleContainer.style.width = "".concat(this._canvasL.width, "px");
      }
    }
  }, {
    key: "__updateVertical",
    value: function __updateVertical(heightOffset, widthOffset) {
      if (this._legend) {
        widthOffset = 18;
        heightOffset = 16;
      } else {
        this._canvasL.style.left = '0'; // Remove left offset for legend
      }

      this._canvasL.height = this._renderTo.offsetHeight - heightOffset - 2; // 2px borders + 16px height for label

      if (this._merged === true) {
        this._canvasL.width = this._renderTo.offsetWidth - widthOffset - 2; // 2px border + scale width 18px
        this._canvasR.width = this._renderTo.offsetWidth - widthOffset - 2; // 2px border + scale width 18px
      } else {
        this._canvasR.height = this._renderTo.offsetHeight - heightOffset - 2; // 2px borders + 16px height for label
        this._canvasL.width = (this._renderTo.offsetWidth - widthOffset) / 2 - 2; // 2px border + scale width 18px
        this._canvasR.width = (this._renderTo.offsetWidth - widthOffset) / 2 - 2; // 2px border + scale width 18px
      }

      if (this._legend) {
        this._dom.scaleContainer.style.height = "".concat(this._canvasL.height, "px");
        this._dom.scaleContainer.style.width = '18px';
      }
    }
  }]);
  return PeakMeter;
}(_utils_VisuComponentStereo_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PeakMeter);

/***/ }),

/***/ "./front/js/view/visu/components/Spectrum.js":
/*!***************************************************!*\
  !*** ./front/js/view/visu/components/Spectrum.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentStereo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentStereo.js */ "./front/js/view/visu/utils/VisuComponentStereo.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Spectrum = /*#__PURE__*/function (_VisuComponentStereo) {
  _inherits(Spectrum, _VisuComponentStereo);
  var _super = _createSuper(Spectrum);
  /** @summary Spectrum displays real time audio frequencies as vertical bars that scroll over time
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentStereo
   * @description <blockquote>.</blockquote>
   * @param {object} options - The spectrum options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {boolean} [options.merged=false] - Merge left and right channel into one output
   * @param {boolean} [options.scale=false] - The peak meter legend
   * @param {boolean} [options.colorSmoothing=false] - Display color intensity with a gradient to next sample value **/
  function Spectrum(options) {
    var _this;
    _classCallCheck(this, Spectrum);
    _this = _super.call(this, options);
    _this._updateDimensions();
    _this._createLogarithmicScaleHeights().then(function () {
      // Update canvas CSS background color
      var bgColor = 'black';
      if (_this._merged === true) {
        _this._canvasL.style.backgroundColor = bgColor;
      } else {
        _this._canvasL.style.backgroundColor = bgColor;
        _this._canvasR.style.backgroundColor = bgColor;
      }
    })["catch"](function (err) {
      return console.error(err);
    });
    return _this;
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  -------------------------------------  VISUCOMPONENTSTEREO OVERRIDES  ----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof Spectrum
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The frequency circle options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {boolean} [options.scale=false] - The peak meter legend
   * @param {boolean} [options.colorSmoothing=false] - Display color intensity with a gradient to next sample value **/
  _createClass(Spectrum, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      _get(_getPrototypeOf(Spectrum.prototype), "_fillAttributes", this).call(this, options);
      // Spectrum specific attributes
      this._scaleType = options.scale || 'linear';
      this._colorSmoothing = options.colorSmoothing || false;
      this._canvasSpeed = 1; // Canvas offset per bin
      // Used to animate canvas on audio bins analysis
      this._bufferCanvas = null;
      this._bufferCtx = null;
      // Display utils
      this._dom.settings = null;
      this._dom.settingsPanel = null;
      this._dimension = {
        height: null,
        canvasHeight: null,
        width: null
      };
      this._logScale = [];
      // Event binding
      this._settingsClicked = this._settingsClicked.bind(this);
      this._clickedElsewhere = this._clickedElsewhere.bind(this);
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      var _this2 = this;
      _get(_getPrototypeOf(Spectrum.prototype), "_buildUI", this).call(this);
      this._bufferCanvas = document.createElement('CANVAS');
      this._bufferCtx = this._bufferCanvas.getContext('2d');
      if (this._merged === true) {
        this._dom.container.removeChild(this._canvasR);
      }
      // Update canvas dimensions
      this._canvasL.width = this._dimension.width;
      this._canvasL.height = this._dimension.canvasHeight;
      this._canvasR.width = this._dimension.width;
      this._canvasR.height = this._dimension.canvasHeight;
      this._bufferCanvas.width = this._dimension.width;
      this._bufferCanvas.height = this._dimension.canvasHeight;
      // Create option button
      var parser = new DOMParser();
      this._dom.settings = parser.parseFromString("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M24 13.616v-3.232c-1.651-.587-2.694-.752-3.219-2.019v-.001c-.527-1.271.1-2.134.847-3.707l-2.285-2.285c-1.561.742-2.433 1.375-3.707.847h-.001c-1.269-.526-1.435-1.576-2.019-3.219h-3.232c-.582 1.635-.749 2.692-2.019 3.219h-.001c-1.271.528-2.132-.098-3.707-.847l-2.285 2.285c.745 1.568 1.375 2.434.847 3.707-.527 1.271-1.584 1.438-3.219 2.02v3.232c1.632.58 2.692.749 3.219 2.019.53 1.282-.114 2.166-.847 3.707l2.285 2.286c1.562-.743 2.434-1.375 3.707-.847h.001c1.27.526 1.436 1.579 2.019 3.219h3.232c.582-1.636.75-2.69 2.027-3.222h.001c1.262-.524 2.12.101 3.698.851l2.285-2.286c-.744-1.563-1.375-2.433-.848-3.706.527-1.271 1.588-1.44 3.221-2.021zm-12 2.384c-2.209 0-4-1.791-4-4s1.791-4 4-4 4 1.791 4 4-1.791 4-4 4z\"/></svg>", 'image/svg+xml').documentElement;
      this._dom.settings.classList.add('audio-spectrum-settings');
      this._dom.settingsPanel = document.createElement('DIV');
      this._dom.settingsPanel.classList.add('audio-spectrum-settings-panel');
      this._dom.settingsPanel.innerHTML = "\n      <h3>Settings</h3>\n      <form>\n        <p class=\"legend\">Scale:</p>\n        <label for=\"linear\">Linear</label>\n        <input type=\"radio\" id=\"id-linear\" name=\"scale\" value=\"linear\" ".concat(this._scaleType === 'linear' ? 'checked' : '', ">\n        <label for=\"logarithmic\">Logarithmic</label>\n        <input type=\"radio\" id=\"id-logarithmic\" name=\"scale\" value=\"logarithmic\" ").concat(this._scaleType === 'logarithmic' ? 'checked' : '', ">\n        <p class=\"smooth-color\">\n          <label for=\"smoothColor\">Smooth colors</label>\n          <input type=\"checkbox\" id=\"smoothColor\" name=\"smoothColor\" ").concat(this._colorSmoothing ? 'checked' : '', ">\n        </p>\n      </form>\n    ");
      var form = this._dom.settingsPanel.querySelector('form');
      form.addEventListener('change', function (event) {
        event.preventDefault(); // Prevent location redirection with params
        var data = new FormData(form);
        var output = [];
        // Iterate over radios to extract values
        var _iterator = _createForOfIteratorHelper(data),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;
            output.push(entry[1]);
          }
          // Update canvas scale
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        _this2._scaleType = output[0];
        // Set color smoothing from checkbox
        _this2._colorSmoothing = output[1] === 'on';
      }, false);
      // Add display canvas to renderTo parent
      this._dom.container.appendChild(this._dom.settingsPanel); // Append panel before to emulate z-index under settings button w/ no scss rules of z-index
      this._dom.container.appendChild(this._dom.settings);
      this._dom.settings.addEventListener('click', this._settingsClicked, false);
    }

    /** @method
     * @name _removeEvents
     * @private
     * @override
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Add component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      _get(_getPrototypeOf(Spectrum.prototype), "_removeEvents", this).call(this);
      document.body.removeEventListener('click', this._clickedElsewhere, false);
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      var _this3 = this;
      _get(_getPrototypeOf(Spectrum.prototype), "_onResize", this).call(this);
      this._updateDimensions();
      this._createLogarithmicScaleHeights().then(function () {
        // Update canvas dimensions
        _this3._canvasL.width = _this3._dimension.width;
        _this3._canvasL.height = _this3._dimension.canvasHeight;
        if (_this3._merged === false) {
          _this3._canvasR.width = _this3._dimension.width;
          _this3._canvasR.height = _this3._dimension.canvasHeight;
        }
        _this3._bufferCanvas.width = _this3._dimension.width;
        _this3._bufferCanvas.height = _this3._dimension.canvasHeight;
      })["catch"](function (err) {
        return console.error(err);
      });
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @override
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit frequency
     * and time analysis.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      if (this._isPlaying === true) {
        if (this._merged === true) {
          this._mergedStereoAnalysis();
        } else {
          this._stereoAnalysis();
        }
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /*  ----------  Spectrum internal methods  ----------  */

    /** @method
     * @name _mergedStereoAnalysis
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform a merged Left and Right analysis with 32 bit time domain data.</blockquote> **/
  }, {
    key: "_mergedStereoAnalysis",
    value: function _mergedStereoAnalysis() {
      var frequencies = new Uint8Array(this._nodes.analyser.frequencyBinCount);
      this._nodes.analyser.getByteFrequencyData(frequencies);
      this._drawSpectrogramForFrequencyBin(this._canvasL, frequencies);
    }

    /** @method
     * @name _stereoAnalysis
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform a separated Left and Right analysis with 32 bit time domain data.</blockquote> **/
  }, {
    key: "_stereoAnalysis",
    value: function _stereoAnalysis() {
      var frequenciesL = new Uint8Array(this._nodes.analyserL.frequencyBinCount);
      var frequenciesR = new Uint8Array(this._nodes.analyserR.frequencyBinCount);
      this._nodes.analyserL.getByteFrequencyData(frequenciesL);
      this._nodes.analyserR.getByteFrequencyData(frequenciesR);
      this._drawSpectrogramForFrequencyBin(this._canvasL, frequenciesL);
      this._drawSpectrogramForFrequencyBin(this._canvasR, frequenciesR);
    }

    /** @method
     * @name _updateDimensions
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Usually called on resize event, update canvas dimension to fit render to DOM object.</blockquote> **/
  }, {
    key: "_updateDimensions",
    value: function _updateDimensions() {
      this._dimension.width = this._renderTo.offsetWidth - 2; // 2px borders

      if (this._merged === true) {
        this._dimension.height = this._renderTo.offsetHeight - 2; // 2px borders
        this._dimension.canvasHeight = this._dimension.height;
      } else {
        this._dimension.height = this._renderTo.offsetHeight - 4; // 2px borders times two channels
        this._dimension.canvasHeight = this._dimension.height / 2;
      }
    }

    /** @method
     * @name _settingsClicked
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Spectrum settings button callback.</blockquote> **/
  }, {
    key: "_settingsClicked",
    value: function _settingsClicked() {
      var opened = this._dom.settingsPanel.classList.contains('opened');
      if (opened === false) {
        // If opened, settings closure will be handled in clickedElsewhere
        this._dom.settings.classList.add('opened');
        this._dom.settingsPanel.classList.add('opened');
        document.body.addEventListener('click', this._clickedElsewhere, false);
      }
    }

    /** @method
     * @name _clickedElsewhere
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Callback when a clicked is detected and settings context is open.</blockquote>
     * @param {object} event - The click event **/
  }, {
    key: "_clickedElsewhere",
    value: function _clickedElsewhere(event) {
      if (!event.target.closest('.audio-spectrum-settings') && !event.target.closest('.audio-spectrum-settings-panel')) {
        this._dom.settings.classList.remove('opened');
        this._dom.settingsPanel.classList.remove('opened');
        document.body.removeEventListener('click', this._clickedElsewhere, false);
      }
    }

    /** @method
     * @name _drawSpectrogramForFrequencyBin
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a vertical ray representing the audio frequencies at process time.</blockquote>
     * @param {object} canvas - The canvas to draw spectrum ray into
     * @param {Uint8Array} frequencies - The frequencies for a given audio bin **/
  }, {
    key: "_drawSpectrogramForFrequencyBin",
    value: function _drawSpectrogramForFrequencyBin(canvas, frequencies) {
      var ctx = canvas.getContext('2d');
      // Copy previous image
      this._bufferCtx.drawImage(canvas, 0, 0, this._dimension.width, this._dimension.canvasHeight);
      // Array length is always (fftSize / 2)
      for (var i = 0; i < frequencies.length; ++i) {
        if (this._scaleType === 'linear') {
          this._fillRectLinear(ctx, frequencies, i);
        } else {
          this._fillRectLogarithm(ctx, frequencies, i);
        }
      }
      // Offset canvas to the left and paste stored image
      ctx.translate(-this._canvasSpeed, 0);
      ctx.drawImage(this._bufferCanvas, 0, 0, this._dimension.width, this._dimension.canvasHeight, 0, 0, this._dimension.width, this._dimension.canvasHeight);
      ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset the transformation matrix
    }

    /** @method
     * @name _drawSpectrogramForFrequencyBin
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw the vertical ray with a linear scale.</blockquote>
     * @param {object} ctx - The canvas context
     * @param {Uint8Array} frequencies - The frequencies for a given audio bin
     * @param {number} i - The index to scale linearly **/
  }, {
    key: "_fillRectLinear",
    value: function _fillRectLinear(ctx, frequencies, i) {
      var scaledHeight = this._scaleLinearIndexToHeight(i);
      var frequencyHeight = this._dimension.canvasHeight / frequencies.length;
      if (i === 0 || !this._colorSmoothing) {
        ctx.fillStyle = "rgb(".concat(frequencies[i], ", ").concat(frequencies[i], ", ").concat(frequencies[i], ")");
      } else {
        var gradient = ctx.createLinearGradient(0, this._dimension.canvasHeight - scaledHeight - frequencyHeight,
        // X0/Y0
        0, this._dimension.canvasHeight - scaledHeight // X1/Y1
        );
        // Add color stops from current color to previous sample color
        gradient.addColorStop(0, "rgb(".concat(frequencies[i], ", ").concat(frequencies[i], ", ").concat(frequencies[i], ")"));
        gradient.addColorStop(1, "rgb(".concat(frequencies[i - 1], ", ").concat(frequencies[i - 1], ", ").concat(frequencies[i - 1], ")"));
        ctx.fillStyle = gradient;
      }
      // Linear scale
      ctx.fillRect(this._dimension.width - this._canvasSpeed,
      // X pos
      this._dimension.canvasHeight - scaledHeight - frequencyHeight,
      // Y pos
      this._canvasSpeed,
      // Width is speed value
      frequencyHeight // Height depends on canvas height
      );
    }

    /** @method
     * @name _drawSpectrogramForFrequencyBin
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw the vertical ray with a logarithm scale.</blockquote>
     * @param {object} ctx - The canvas context
     * @param {Uint8Array} frequencies - The frequencies for a given audio bin
     * @param {number} i - The index to scale logarithmically **/
  }, {
    key: "_fillRectLogarithm",
    value: function _fillRectLogarithm(ctx, frequencies, i) {
      if (i === 0 || i === frequencies.length - 1 || !this._colorSmoothing) {
        ctx.fillStyle = "rgb(".concat(frequencies[i], ", ").concat(frequencies[i], ", ").concat(frequencies[i], ")");
      } else {
        var gradient = ctx.createLinearGradient(0, this._logScale[i],
        // X0/Y0
        0, this._logScale[i - 1] // X1/Y1
        );
        // Add color stops from current color to previous sample color
        gradient.addColorStop(0, "rgb(".concat(frequencies[i], ", ").concat(frequencies[i], ", ").concat(frequencies[i], ")"));
        gradient.addColorStop(1, "rgb(".concat(frequencies[i - 1], ", ").concat(frequencies[i - 1], ", ").concat(frequencies[i - 1], ")"));
        ctx.fillStyle = gradient;
      }
      // Log scale
      ctx.fillRect(this._dimension.width - this._canvasSpeed,
      // X pos
      this._logScale[i - 1],
      // Y pos
      this._canvasSpeed,
      // Width is speed value
      this._logScale[i] - this._logScale[i - 1] // Height is computed with previous sample offset
      );
    }

    /** @method
     * @name _scaleLinearIndexToHeight
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Convert linear value to logarithmic value.</blockquote>
     * @param {number} index - The canvas context **/
  }, {
    key: "_scaleLinearIndexToHeight",
    value: function _scaleLinearIndexToHeight(index) {
      // Convert a range to another, maintaining ratio
      // oldRange = (oldMax - oldMin)
      // newRange = (newMax - newMin)
      // newValue = (((oldValue - oldMin) * newRange) / oldRange) + NewMin */
      // Convert from [0, (this._fftSize / 2)] to [0, this._dimension.canvasHeight] (frequency array length scale to canvas height scale)
      var oldRange = this._fftSize / 2;
      var newRange = this._dimension.canvasHeight;
      return index * newRange / oldRange;
    }

    /** @method
     * @name _createLogarithmicScaleHeights
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Pre-compute samples height on a logarithmic scale to avoid computation on render process.</blockquote> **/
  }, {
    key: "_createLogarithmicScaleHeights",
    value: function _createLogarithmicScaleHeights() {
      var _this4 = this;
      return new Promise(function (resolve) {
        _this4._logScale = [_this4._dimension.canvasHeight]; // Reset previously made scale
        for (var i = 1; i < _this4._fftSize / 2; ++i) {
          // Log(0) forbidden, we offset
          _this4._logScale.push(_this4._computeLogSampleHeight(i)); // For each frequency sample, compute its log height offset from origin
        }

        resolve();
      });
    }

    /** @method
     * @name _computeLogSampleHeight
     * @private
     * @memberof Spectrum
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Compute log sample height in canvas.</blockquote>
     * @param {number} sample - The sample to compute its log height **/
  }, {
    key: "_computeLogSampleHeight",
    value: function _computeLogSampleHeight(sample) {
      return this._dimension.canvasHeight - Math.log(sample) / Math.log(10) / (Math.log(this._fftSize / 2) / Math.log(10)) * this._dimension.canvasHeight;
    }
  }]);
  return Spectrum;
}(_utils_VisuComponentStereo_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Spectrum);

/***/ }),

/***/ "./front/js/view/visu/components/Timeline.js":
/*!***************************************************!*\
  !*** ./front/js/view/visu/components/Timeline.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentMono.js */ "./front/js/view/visu/utils/VisuComponentMono.js");
/* harmony import */ var _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CanvasUtils.js */ "./front/js/view/visu/utils/CanvasUtils.js");
/* harmony import */ var _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var MAX_CANVAS_WIDTH = 32000;
var Timeline = /*#__PURE__*/function (_VisuComponentMono) {
  _inherits(Timeline, _VisuComponentMono);
  var _super = _createSuper(Timeline);
  /** @summary Timeline displays a scrolling audio waveform.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentMono
   * @description <blockquote>Will display a waveform that scrolls over playback. If provided, BPM is visualised as
   * vertical bars with emphasis on main beats according to time signature. It is interactive and will update the player's
   * current time value to match the dragged one. This class extends VisuComponentMono only because it performs an offline
   * analysis on audio and the stereo information are already held in audio buffer.</blockquote>
   * @param {object} options - The timeline options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {object} [options.beat=null] - The beat configuration
   * @param {object} [options.beat.offset=null] - offset before first beat
   * @param {object} [options.beat.bpm=null] - The track bpm
   * @param {object} [options.beat.timeSignature=null] - The track time signature to put emphasis on main beats
   * @param {object} [options.wave] - The wave options
   * @param {object} [options.wave.align='center'] - The alignment of the wave, can be either 'top', 'center' or 'bottom'
   * @param {object} [options.colors] - Timeline color potions
   * @param {object} [options.colors.background='#1D1E25'] - Canvas background color in Hex/RGB/HSL
   * @param {object} [options.colors.track='#12B31D'] - The timeline color in Hex/RGB/HSL
   * @param {object} [options.colors.mainBeat='#56D45B'] - The main beat triangles color in Hex/RGB/HSL
   * @param {object} [options.colors.subBeat='#FF6B67'] - The sub beat triangles color in Hex/RGB/HSL
   * @param {object[]} [options.hotCues=[]] - Hotcues sorted array to load waveform with. Each array item must contain a time key with its value **/
  function Timeline(options) {
    var _this;
    _classCallCheck(this, Timeline);
    _this = _super.call(this, options);
    _this._colors = {};
    _this.__defaultColors(options);
    _this._canvas.style.backgroundColor = _this._colors.background;
    _this._canvasSpeed = options.speed ? options.speed : 5.0; // Time in seconds

    _this._beat = {
      offset: options.beat ? options.beat.offset : null,
      bpm: options.beat ? options.beat.bpm : null,
      timeSignature: options.beat ? options.beat.timeSignature : null
    };
    _this._wave = {
      align: options.wave ? options.wave.align || 'center' : 'center',
      scale: options.wave ? options.wave.scale || .95 : .95
    };
    // HotCues and beats arrays
    _this._hotCues = options && options.hotCues ? _toConsumableArray(options.hotCues) : [];
    _this._beatsArray = [];
    _this._beatCount = '0.0';
    // Loop utils
    _this._loopEntry = null;
    _this._loopEnd = null;
    _this._loopBuffer = null;
    _this._isLooping = false;
    _this._loopStartedAt = 0;
    _this._playerPausedAt = 0;
    _this._audioBuffer = null; // Store audio buffer to avoid multiple loading of file during loop process
    // Offline canvas -> main canvas is divided with 32k px wide canvases
    _this._canvases = [];
    _this._cueCanvases = [];
    _this._beatCanvases = [];
    _this._loopCanvases = [];
    // Drag canvas utils
    _this._isDragging = false;
    _this._wasPlaying = false;
    _this._draggedTime = 0;
    _this._startDrag = {
      x: 0,
      y: 0
    };
    if (_this._player.src !== '') {
      _this._getPlayerSourceFile();
    }
    return _this;
  }
  _createClass(Timeline, [{
    key: "__defaultColors",
    value: function __defaultColors(options) {
      this._colors = {
        background: options.colors ? options.colors.background || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor,
        track: options.colors ? options.colors.track || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultDarkPrimaryColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultDarkPrimaryColor,
        mainBeat: options.colors ? options.colors.mainBeat || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultPrimaryColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultPrimaryColor,
        subBeat: options.colors ? options.colors.subBeat || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultAntiPrimaryColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultAntiPrimaryColor,
        loop: options.colors ? options.colors.loop || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultLoopColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultLoopColor,
        loopAlpha: options.colors ? options.colors.loopAlpha || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultLoopAlphaColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultLoopAlphaColor
      };
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  --------------------------------------  VISUCOMPONENTMONO OVERRIDES  -----------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name _fillAttributes
     * @private
     * @override
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
     * @param {object} options - The frequency circle options
     * @param {string} options.type - The component type as string
     * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
     * @param {object} options.renderTo - The DOM element to render canvas in
     * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
     * @param {object} [options.audioContext=null] - The audio context to base analysis from
     * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      _get(_getPrototypeOf(Timeline.prototype), "_fillAttributes", this).call(this, options);
      this._offlineCtx = null;
      this._offlineBuffer = null;
      // Local event binding
      this._trackLoaded = this._trackLoaded.bind(this);
      this._onProgress = this._onProgress.bind(this);
      this._mouseDown = this._mouseDown.bind(this);
      this._mouseMove = this._mouseMove.bind(this);
      this._mouseUp = this._mouseUp.bind(this);
    }

    /** @method
     * @name _addEvents
     * @private
     * @override
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Add component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_addEvents",
    value: function _addEvents() {
      _get(_getPrototypeOf(Timeline.prototype), "_addEvents", this).call(this);
      this._player.addEventListener('loadedmetadata', this._trackLoaded, false);
      this._player.addEventListener('timeupdate', this._onProgress, false);
      this._canvas.addEventListener('mousedown', this._mouseDown, false);
      if (!this._player.paused) {
        this._isPlaying = true;
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /** @method
     * @name _removeEvents
     * @private
     * @override
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Remove component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      _get(_getPrototypeOf(Timeline.prototype), "_removeEvents", this).call(this);
      this._player.removeEventListener('loadedmetadata', this._trackLoaded, false);
      this._player.removeEventListener('timeupdate', this._onProgress, false);
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      _get(_getPrototypeOf(Timeline.prototype), "_onResize", this).call(this);
      this._fillData();
      this._clearCanvas();
      this._drawTimeline(this._player.currentTime);
    }
  }, {
    key: "_clearCanvas",
    value: function _clearCanvas(clearBeat, clearHotCue, clearLoop) {
      _get(_getPrototypeOf(Timeline.prototype), "_clearCanvas", this).call(this);
      // Clear beat bars canvas
      if (clearBeat) {
        for (var i = 0; i < this._beatCanvases.length; ++i) {
          this._beatCanvases[i].getContext('2d').clearRect(0, 0, this._beatCanvases[i].width, this._beatCanvases[i].height);
        }
      }
      // Clear hot cue canvas
      if (clearHotCue) {
        for (var _i = 0; _i < this._cueCanvases.length; ++_i) {
          this._cueCanvases[_i].getContext('2d').clearRect(0, 0, this._cueCanvases[_i].width, this._cueCanvases[_i].height);
        }
      }
      // Clear loop canvas
      if (clearLoop) {
        for (var _i2 = 0; _i2 < this._loopCanvases.length; ++_i2) {
          this._loopCanvases[_i2].getContext('2d').clearRect(0, 0, this._loopCanvases[_i2].width, this._loopCanvases[_i2].height);
        }
      }
    }

    /** @method
     * @name _dblClick
     * @private
     * @override
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On double click event callback.</blockquote> **/
  }, {
    key: "_dblClick",
    value: function _dblClick() {
      // Required to revoke fullscreen toggle from parent class, as it interferes with drag feature
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @override
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit frequency
     * and time analysis.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      if (this._isPlaying === true || this._isLooping === true) {
        // So UI keeps being update while player is virtually paused
        if (this._isLooping === true) {
          this._player.currentTime = this._loopEntry.time + (this._playerPausedAt + this._audioCtx.currentTime - this._loopStartedAt) % (this._loopEnd.time - this._loopEntry.time);
        }
        // Draw timeline and request new process in raf
        this._clearCanvas();
        this._drawTimeline(this._player.currentTime);
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /*  ----------  Timeline internal methods  ----------  */
  }, {
    key: "_startLoopSequence",
    value: function _startLoopSequence(immediateLoop) {
      var _this2 = this;
      if (immediateLoop) {
        this._player.currentTime = this._loopEntry.time;
      }
      var workingBuffer = this._audioBuffer.slice();
      this._audioCtx.decodeAudioData(workingBuffer, function (buffer) {
        _this2._loopBuffer = _this2._audioCtx.createBufferSource();
        _this2._loopBuffer.buffer = buffer;
        _this2._loopBuffer.connect(_this2._audioCtx.destination);
        _this2._loopBuffer.loop = true;
        _this2._loopBuffer.loopStart = _this2._loopEntry.time;
        _this2._loopBuffer.loopEnd = _this2._loopEnd.time;
        _this2._loopBuffer.start(0, _this2._player.currentTime);
        _this2._player.pause();
        _this2._loopStartedAt = _this2._audioCtx.currentTime;
        _this2._playerPausedAt = _this2._player.currentTime;
        _this2._isLooping = true;
        _this2._processAudioBin();
      });
    }

    /** @method
     * @name _trackLoaded
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Player callback on track loaded.</blockquote> **/
  }, {
    key: "_trackLoaded",
    value: function _trackLoaded() {
      cancelAnimationFrame(this._processAudioBin);
      this._clearCanvas(); // Clear previous canvas
      // Do XHR to request file and parse it
      this._getPlayerSourceFile();
    }

    /** @method
     * @name _onProgress
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On progress callback.</blockquote> **/
  }, {
    key: "_onProgress",
    value: function _onProgress() {
      this._clearCanvas();
      this._drawTimeline(this._player.currentTime || 0);
    }

    /** @method
     * @name _mouseDown
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Mouse down callback.</blockquote>
     * @param {object} event - The mouse down event **/
  }, {
    key: "_mouseDown",
    value: function _mouseDown(event) {
      var rect = event.target.getBoundingClientRect();
      // X coord must be relative to cuent canvas. Check half width to center coord, then add center position, module MAX_CANVAS_WIDTH
      var x = (event.clientX - rect.left - this._canvas.width / 2 + this._player.currentTime / this._canvasSpeed * this._canvas.width) % MAX_CANVAS_WIDTH;
      var y = event.clientY - rect.top;
      var hotCue = this._hotCueClicked(x, y);
      if (hotCue) {
        this._player.currentTime = hotCue.time;
        this._clearCanvas();
        this._drawTimeline(this._player.currentTime);
      } else {
        this._isDragging = true;
        this._startDrag.x = event.clientX;
        this._startDrag.y = event.clientY;
        // Save previous playback status and pause only if required
        if (this._player.paused === false) {
          this._wasPlaying = true;
          this._player.pause();
        }
        // Subscribe to drag events
        this._canvas.addEventListener('mousemove', this._mouseMove, false);
        this._canvas.addEventListener('mouseup', this._mouseUp, false);
        this._canvas.addEventListener('mouseout', this._mouseUp, false);
      }
    }

    /** @method
     * @name _mouseDown
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Mouse move callback.</blockquote>
     * @param {object} event - The mouse move event **/
  }, {
    key: "_mouseMove",
    value: function _mouseMove(event) {
      // Only perform drag code if mouse down was previously fired
      if (this._isDragging === true) {
        var variation = this._startDrag.x - event.clientX;
        var timeOffset = variation * this._canvasSpeed / this._canvas.width * 2;
        this._draggedTime = this._player.currentTime + timeOffset;
        this._clearCanvas();
        this._drawTimeline(this._draggedTime);
      }
    }

    /** @method
     * @name _mouseUp
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Mouse up callback.</blockquote> **/
  }, {
    key: "_mouseUp",
    value: function _mouseUp() {
      this._isDragging = false;
      this._startDrag.x = 0;
      this._startDrag.y = 0;
      this._player.currentTime = this._draggedTime || this._player.currentTime;
      this._draggedTime = null;
      // Restore playback status
      if (this._wasPlaying === true) {
        this._wasPlaying = false;
        this._player.play();
      }
      // Remove drag events
      this._canvas.removeEventListener('mousemove', this._mouseMove, false);
      this._canvas.removeEventListener('mouseup', this._mouseUp, false);
      this._canvas.removeEventListener('mouseout', this._mouseUp, false);
    }

    /** @method
     * @name _processAudioFile
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform an offline analysis on whole track.</blockquote>
     * @param {object} response - HTTP response for audio track to extract buffer from **/
  }, {
    key: "_processAudioFile",
    value: function _processAudioFile(response) {
      var _this3 = this;
      this._audioBuffer = response.slice();
      // Set offline context according to track duration to get its full samples
      this._offlineCtx = new OfflineAudioContext(2, this._audioCtx.sampleRate * this._player.duration, this._audioCtx.sampleRate);
      this._offlineSource = this._offlineCtx.createBufferSource();
      this._audioCtx.decodeAudioData(response, function (buffer) {
        _this3._offlineSource.buffer = buffer;
        _this3._offlineSource.connect(_this3._offlineCtx.destination);
        _this3._offlineSource.start();
        _this3._offlineCtx.startRendering().then(function (renderedBuffer) {
          _this3._offlineBuffer = renderedBuffer;
          _this3._fillData();
          _this3._drawTimeline(_this3._player.currentTime || 0);
        })["catch"](function (err) {
          console.log('Rendering failed: ' + err);
        });
      });
    }

    /** @method
     * @name _fillData
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Generate merged data from audio buffer.</blockquote> **/
  }, {
    key: "_fillData",
    value: function _fillData() {
      if (this._offlineBuffer) {
        // Clear any previous canvas
        this._canvases = [];
        this._cueCanvases = [];
        this._beatCanvases = [];
        this._loopCanvases = [];
        // Compute useful values
        var data = this._genScaledMonoData(this._offlineBuffer);
        var step = this._canvasSpeed * this._offlineBuffer.sampleRate / this._canvas.width;
        var totalLength = Math.round(this._offlineBuffer.duration / this._canvasSpeed * this._canvas.width);
        // Draw full track on offline canvas
        for (var i = 0; i < totalLength; i += MAX_CANVAS_WIDTH) {
          // Create canvas with width of the reduced-in-size buffer's length.
          var canvas = document.createElement('CANVAS');
          var ctx = canvas.getContext('2d');
          var cueCanvas = document.createElement('CANVAS');
          var beatCanvas = document.createElement('CANVAS');
          var loopCanvas = document.createElement('CANVAS');
          var width = totalLength - i;
          width = width > MAX_CANVAS_WIDTH ? MAX_CANVAS_WIDTH : width;
          // Update offline canvas dimension
          canvas.width = width;
          canvas.height = this._canvas.height;
          cueCanvas.width = width;
          cueCanvas.height = this._canvas.height;
          beatCanvas.width = width;
          beatCanvas.height = this._canvas.height;
          loopCanvas.width = width;
          loopCanvas.height = this._canvas.height;
          // Clear offline context
          ctx.clearRect(0, 0, totalLength, this._canvas.height);
          // Draw the canvas
          this._fillCanvas(i, width, step, data, ctx);
          // Store canvas to properly animate Timeline on progress
          this._canvases.push(canvas);
          this._cueCanvases.push(cueCanvas);
          this._beatCanvases.push(beatCanvas);
          this._loopCanvases.push(loopCanvas);
        }
        if (this._beat.bpm !== null && this._beat.offset !== null) {
          this._fillBeatBars({
            totalWidth: this._offlineBuffer.duration / this._canvasSpeed * this._canvas.width,
            beatWidth: 1 / (this._beat.bpm / 60) / this._canvasSpeed * this._canvas.width,
            beatOffset: this._beat.offset / this._canvasSpeed * this._canvas.width
          });
        }
        this._drawHotCues(); // Load hot cues if any
      }
    }
  }, {
    key: "_fillCanvas",
    value: function _fillCanvas(i, width, step, data, ctx) {
      for (var j = 0; j < width; ++j) {
        var offset = Math.floor((i + j) * step);
        var max = 0.0; // The max value to draw
        // Update maximum value in step range
        for (var k = 0; k < step; ++k) {
          if (data[offset + k] > max) {
            max = data[offset + k];
          }
        }
        // Set waveform color according to sample intensity
        ctx.fillStyle = _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].lightenDarkenColor(this._colors.track, max * 190); // 190, not 255 to avoid full white on sample at max value
        // Update max to scale in half canvas height
        max = Math.floor(max * (this._canvas.height * this._wave.scale));
        if (this._wave.align === 'center') {
          // Fill up and down side of timeline
          ctx.fillRect(j, this._canvas.height / 2, 1, -(max / 2));
          ctx.fillRect(j, this._canvas.height / 2, 1, max / 2);
          // Add tiny centered line
          ctx.fillRect(j, this._canvas.height / 2 - 0.5, 1, 1);
        } else if (this._wave.align === 'top') {
          ctx.fillRect(j, 1, 1, max);
        } else if (this._wave.align === 'bottom') {
          ctx.fillRect(j, this._canvas.height - 1, 1, -max);
        }
      }
    }
  }, {
    key: "_fillBeatBars",
    value: function _fillBeatBars(options) {
      var beatOffset = options.beatOffset;
      var canvasIndex = 0; // The offline canvas to consider
      // We floor because last beat is pretty irrelevant
      for (var i = 0; i < Math.floor(options.totalWidth / options.beatWidth); ++i) {
        // We reached MAX_CANVAS_WIDTH, using next offline canvas
        if (i * options.beatWidth + beatOffset >= MAX_CANVAS_WIDTH + canvasIndex * MAX_CANVAS_WIDTH) {
          // Increment offline canvas to use
          ++canvasIndex;
          // When changing canvas, the beatOffset is dependant to last beat saved position.
          for (var j = 1; j < canvasIndex; ++j) {
            // We iterate for each canvas, and sums the offset per canvas so they cumulates
            beatOffset += options.beatWidth - (MAX_CANVAS_WIDTH * j - this._beatsArray[this._beatsArray.length - 1].xPos % (MAX_CANVAS_WIDTH * j));
          }
        }
        // Draw beat bar, x position is loop index times a space between beats, plus the beat offset,
        // modulo max canvas width to fit in offline canvases
        this._drawBeatBar(i, i * options.beatWidth + beatOffset, canvasIndex);
      }
    }

    /** @method
     * @name _drawBeatBar
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a beat bar with its triangle with color that depends on main beat or sub beat.</blockquote>
     * @param {object} beatCount - The beat number from first
     * @param {object} canvas - The canvas to draw in
     * @param {object} ctx - The associated context
     * @param {number} j - The y value **/
  }, {
    key: "_drawBeatBar",
    value: function _drawBeatBar(beatCount, x, canvasIndex) {
      var canvas = this._beatCanvases[canvasIndex];
      var ctx = canvas.getContext('2d');
      // Determine beat bar color
      if (beatCount % this._beat.timeSignature === 0) {
        ctx.fillStyle = 'white';
      } else {
        ctx.fillStyle = 'grey';
      }
      // Beat bar drawing
      ctx.fillRect(x % MAX_CANVAS_WIDTH, 9, 1, this._canvas.height - 18);
      // Determine beat triangle color
      if (beatCount % this._beat.timeSignature === 0) {
        ctx.fillStyle = this._colors.mainBeat;
      } else {
        ctx.fillStyle = this._colors.subBeat;
      }
      // Upper triangle
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawTriangle(canvas, {
        x: x % MAX_CANVAS_WIDTH,
        y: 1,
        radius: 6,
        top: 10
      });
      // Down triangle
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawTriangle(canvas, {
        x: x % MAX_CANVAS_WIDTH,
        y: this._canvas.height - 1,
        radius: 6,
        top: this._canvas.height - 10
      });
      // Update beats array with new beat bar
      this._beatsArray.push({
        primaryBeat: beatCount % this._beat.timeSignature === 0,
        beatCount: beatCount,
        xPos: x,
        time: x * this._canvasSpeed / this._canvas.width,
        canvasIndex: canvasIndex
      });
    }

    /** @method
     * @name _genScaledMonoData
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Merged L/R Sub sample channel data to compute average value, depending on bar count.</blockquote>
     * @param {object} buffer - Audio buffer
     * @return {number[]} Array of height per sub samples **/
  }, {
    key: "_genScaledMonoData",
    value: function _genScaledMonoData(buffer) {
      var dataL = buffer.getChannelData(0);
      var dataR = buffer.getChannelData(1);
      var output = [];
      for (var i = 0; i < dataL.length; ++i) {
        output.push((Math.abs(dataL[i]) + Math.abs(dataR[i])) / 2);
      }
      return output;
    }

    /** @method
     * @name _drawTimeline
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw timeline with a given progress.</blockquote>
     * @param {number} time - Track current time **/
  }, {
    key: "_drawTimeline",
    value: function _drawTimeline(time) {
      var center = Math.floor(time * this._canvas.width / this._canvasSpeed);
      var leftEdgeIndex = Math.floor((center - this._canvas.width / 2) / MAX_CANVAS_WIDTH);
      if (leftEdgeIndex < 0) {
        leftEdgeIndex = 0;
      }
      var rightEdgeIndex = Math.floor((center + this._canvas.width / 2) / MAX_CANVAS_WIDTH);
      if (rightEdgeIndex >= this._canvases.length) {
        rightEdgeIndex = this._canvases.length - 1;
      }
      for (var i = leftEdgeIndex; i <= rightEdgeIndex; ++i) {
        this._ctx.drawImage(this._canvases[i], this._canvas.width / 2 - center + MAX_CANVAS_WIDTH * i, 0);
        this._ctx.drawImage(this._beatCanvases[i], this._canvas.width / 2 - center + MAX_CANVAS_WIDTH * i, 0);
        this._ctx.drawImage(this._cueCanvases[i], this._canvas.width / 2 - center + MAX_CANVAS_WIDTH * i, 0);
        this._ctx.drawImage(this._loopCanvases[i], this._canvas.width / 2 - center + MAX_CANVAS_WIDTH * i, 0);
      }
      // Draw centered vertical bar
      this._ctx.fillStyle = _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultAntiPrimaryColor;
      this._ctx.fillRect(this._canvas.width / 2, 1, 3, this._canvas.height - 2);
      this._ctx.strokeStyle = 'black';
      this._ctx.lineWidth = 1;
      this._ctx.strokeRect(this._canvas.width / 2, 1, 3, this._canvas.height - 2);
      // Draw beat count next to centered line
      if (this._beatsArray.length > 0) {
        var label = '0.0';
        for (var _i3 = 0; _i3 < this._beatsArray.length; ++_i3) {
          if (time <= this._beatsArray[_i3].time) {
            var measureCount = Math.floor((this._beatsArray[_i3].beatCount - 1) / this._beat.timeSignature) + 1;
            var timeCount = (this._beatsArray[_i3].beatCount - 1) % this._beat.timeSignature;
            label = "".concat(measureCount, ".").concat(timeCount === -1 ? 1 : timeCount + 1);
            break;
          }
        }
        var top = 14;
        if (this._wave.align === 'top') {
          top = this._canvas.height - 4;
        }
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawBeatCount(this._canvas, {
          label: label,
          x: this._canvas.width / 2 + 8,
          y: top
        });
      }
    }
  }, {
    key: "_drawHotCues",
    value: function _drawHotCues() {
      for (var i = 0; i < this._hotCues.length; ++i) {
        this._drawHotCue(this._hotCues[i]);
      }
    }
  }, {
    key: "_drawHotCue",
    value: function _drawHotCue(hotCue) {
      var top = 2;
      if (this._wave.align === 'top') {
        top = this._canvas.height - 20;
      }
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawHotCue(this._cueCanvases[hotCue.canvasIndex], {
        x: hotCue.xPos - hotCue.canvasIndex * MAX_CANVAS_WIDTH + 18 / 2,
        y: top,
        size: 18,
        label: hotCue.label || hotCue.number,
        color: hotCue.color
      });
    }
  }, {
    key: "_hotCueClicked",
    value: function _hotCueClicked(x, y) {
      if (y > 2 && y < 20) {
        for (var i = 0; i < this._hotCues.length; ++i) {
          var xPos = this._hotCues[i].xPos - this._hotCues[i].canvasIndex * MAX_CANVAS_WIDTH;
          if (x > xPos && x < xPos + 18) {
            return this._hotCues[i];
          }
        }
      }
      return false;
    }
  }, {
    key: "_drawLoop",
    value: function _drawLoop() {
      if (this._loopEntry) {
        var ctx = this._loopCanvases[this._loopEntry.canvasIndex].getContext('2d');
        ctx.fillStyle = this._colors.loop;
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawTriangle(this._loopCanvases[this._loopEntry.canvasIndex], {
          x: this._loopEntry.xPos % MAX_CANVAS_WIDTH + 1,
          y: 1,
          radius: 9,
          top: 14
        });
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawTriangle(this._loopCanvases[this._loopEntry.canvasIndex], {
          x: this._loopEntry.xPos % MAX_CANVAS_WIDTH + 1,
          y: this._loopCanvases[this._loopEntry.canvasIndex].height - 1,
          radius: 9,
          top: this._loopCanvases[this._loopEntry.canvasIndex].height - 14
        });
      }
      if (this._loopEnd) {
        var _ctx = this._loopCanvases[this._loopEntry.canvasIndex].getContext('2d');
        _ctx.fillStyle = this._colors.loop;
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawTriangle(this._loopCanvases[this._loopEnd.canvasIndex], {
          x: this._loopEnd.xPos % MAX_CANVAS_WIDTH + 1,
          y: 1,
          radius: 9,
          top: 14
        });
        _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawTriangle(this._loopCanvases[this._loopEnd.canvasIndex], {
          x: this._loopEnd.xPos % MAX_CANVAS_WIDTH + 1,
          y: this._loopCanvases[this._loopEnd.canvasIndex].height - 1,
          radius: 9,
          top: this._loopCanvases[this._loopEnd.canvasIndex].height - 14
        });
      }
      if (this._loopEntry && this._loopEnd) {
        var _ctx2 = this._loopCanvases[this._loopEntry.canvasIndex].getContext('2d');
        _ctx2.fillStyle = this._colors.loopAlpha;
        if (this._loopEntry.canvasIndex === this._loopEnd.canvasIndex) {
          _ctx2.fillRect(this._loopEntry.xPos, 30, this._loopEnd.xPos - this._loopEntry.xPos, this._loopCanvases[this._loopEntry.canvasIndex].height - 60);
        }
      }
    }

    /** @method
     * @name _getPlayerSourceFile
     * @private
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Fetch audio file using xmlHTTP request.</blockquote> **/
  }, {
    key: "_getPlayerSourceFile",
    value: function _getPlayerSourceFile() {
      var _this4 = this;
      var request = new XMLHttpRequest();
      request.open('GET', this._player.src, true);
      request.responseType = 'arraybuffer';
      request.onload = function () {
        _this4._processAudioFile(request.response);
      };
      request.send();
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ----------------------------------------  TIMELINE PUBLIC METHODS  -------------------------------------------  */
    /*                                                                                                                  */
    /*  These methods allow the caller to update the beat info (on change track for example), or to add/remove a hot    */
    /*  cue in the timeline, or to configure loop entry and exit                                                        */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name updateBeatInfo
     * @public
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Update the beat values. To be calle don change track</blockquote>
     * @param {object} options - Track beat options
     * @param {number} [options.beat.offset=null] - offset before first beat
     * @param {number} [options.beat.bpm=null] - The track bpm
     * @param {number} [options.beat.timeSignature=null] - The track time signature to emphasis main beats **/
  }, {
    key: "updateBeatInfo",
    value: function updateBeatInfo(options) {
      this._beat = {
        offset: options.offset,
        bpm: options.bpm,
        timeSignature: options.timeSignature
      };
    }

    /** @method
     * @name setHotCuePoint
     * @public
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Define a HotCue point. It will be attached to the nearest bar. It will only be
     * attached if no hotcue is registered on the targeted bar.</blockquote>
     * @return {object} The hotcue object with its information **/
  }, {
    key: "setHotCuePoint",
    value: function setHotCuePoint(options) {
      var matchingBeat = this.getClosestBeat();
      // Search for existing hotcue at the target bar
      var existingHotCue = null;
      for (var i = 0; i < this._hotCues.length; ++i) {
        if (this._hotCues[i].beatCount === matchingBeat.beatCount) {
          existingHotCue = this._hotCues[i];
          break;
        }
      }
      // Only append hotcue if it's not already registered, return existing hot cue otherwise
      if (!existingHotCue) {
        // Save hot cue and return to the sender
        matchingBeat.number = this._hotCues.length + 1; // Attach hotcue number
        matchingBeat.time = matchingBeat.xPos * this._canvasSpeed / this._canvas.width; // Save the bar timecode into the hotcue object
        matchingBeat.label = this._hotCues.length + 1; // Default label
        if (options.label) {
          matchingBeat.label = options.label;
        }
        if (options.color) {
          matchingBeat.color = options.color;
        }
        // Otherwise save hot cue in stack
        this._hotCues.push(matchingBeat);
        // Draw hotcues if any
        this._clearCanvas();
        this._drawHotCue(matchingBeat);
        this._drawTimeline(this._player.currentTime);
        return matchingBeat;
      } else {
        return existingHotCue;
      }
    }
  }, {
    key: "updateHotCuePoint",
    value: function updateHotCuePoint(hotCue, options) {
      for (var i = 0; i < this._hotCues.length; ++i) {
        if (this._hotCues[i].beatCount === hotCue.beatCount) {
          if (options.label) {
            this._hotCues[i].label = options.label;
          }
          if (options.color) {
            this._hotCues[i].color = options.color;
          }
        }
      }
      this._clearCanvas(false, true);
      this._drawHotCues();
      this._drawTimeline(this._player.currentTime);
    }
  }, {
    key: "removeHotCuePoint",
    value: function removeHotCuePoint(hotcue) {
      for (var i = 0; i < this._hotCues.length; ++i) {
        if (this._hotCues[i].beatCount === hotcue.beatCount) {
          this._hotCues.splice(i, 1);
          this._clearCanvas(false, true);
          this._drawHotCues();
          this._drawTimeline(this._player.currentTime);
          break;
        }
      }
    }
  }, {
    key: "setLoopEntryPoint",
    value: function setLoopEntryPoint() {
      this._loopEntry = this.getClosestBeat();
      this._clearCanvas(false, false, true);
      this._drawLoop();
      this._drawTimeline(this._player.currentTime);
    }
  }, {
    key: "setLoopEndPoint",
    value: function setLoopEndPoint(beatDuration) {
      if (this._loopEntry) {
        // Determine end by closest beat
        if (!beatDuration) {
          var matchingBeat = this.getClosestBeat();
          // Only save end if not equal to entry and is located after in time
          if (matchingBeat !== this._loopEntry && this._loopEntry.time < matchingBeat.time) {
            this._loopEnd = matchingBeat;
          }
        } else {
          // Determine end by a beat count after loop entry
          if (this._loopEntry.beatCount + beatDuration < this._beatsArray.length) {
            this._loopEnd = this._beatsArray[this._loopEntry.beatCount + beatDuration];
          } else {
            this._loopEnd = this._beatsArray[this._beatsArray.length - 1];
          }
        }
        this._clearCanvas(false, false, true);
        this._drawLoop();
        this._drawTimeline(this._player.currentTime);
        //this._startLoopSequence(!beatDuration);
      }
    }
  }, {
    key: "exitLoop",
    value: function exitLoop() {
      //this._loopBuffer.stop();
      //this._player.play();
      this._loopEntry = null;
      this._loopEnd = null;
      this._loopBuffer = null;
      this._isLooping = false;
      this._loopStartedAt = 0;
      this._playerPausedAt = 0;
      this._clearCanvas(false, false, true);
      this._drawTimeline(this._player.currentTime);
    }

    /** @method
     * @name getClosestBeat
     * @public
     * @memberof Timeline
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote></blockquote> **/
  }, {
    key: "getClosestBeat",
    value: function getClosestBeat() {
      var timeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      // The center coordinate when this method is called
      var center = Math.floor(this._player.currentTime * this._canvas.width / this._canvasSpeed);
      var matchingBeat = {};
      // Find nearest beat to process
      for (var i = 0; i < this._beatsArray.length; ++i) {
        // We now have the upper beat, compare with previous one to find nearest
        if (this._beatsArray[i].xPos > center) {
          // Take previous bar if click was closer to it
          if (i - 1 > 0 && this._beatsArray[i].xPos - center > center - this._beatsArray[i - 1].xPos) {
            matchingBeat = this._beatsArray[i - 1];
            break;
          } else {
            // Take curent bar otherwise
            matchingBeat = this._beatsArray[i];
            break;
          }
        }
      }
      // Only return time if requested
      if (timeOnly) {
        return matchingBeat.time;
      }
      return matchingBeat;
    }
  }]);
  return Timeline;
}(_utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Timeline);

/***/ }),

/***/ "./front/js/view/visu/components/Waveform.js":
/*!***************************************************!*\
  !*** ./front/js/view/visu/components/Waveform.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/VisuComponentMono.js */ "./front/js/view/visu/utils/VisuComponentMono.js");
/* harmony import */ var _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/CanvasUtils.js */ "./front/js/view/visu/utils/CanvasUtils.js");
/* harmony import */ var _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Waveform = /*#__PURE__*/function (_VisuComponentMono) {
  _inherits(Waveform, _VisuComponentMono);
  var _super = _createSuper(Waveform);
  /** @summary Waveform displays the track audio waveform.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments VisuComponentMono
   * @description <blockquote>This component will perform an offline analysis to display the whole track audio shape,
   * and provide different colors to track the audio progress. It is interactive and will update the player's
   * current time value to match the clicked one. This class extends VisuComponentMono only because it performs an offline
   * analysis on audio and the stereo information are already held in audio buffer.</blockquote>
   * @param {object} options - The waveform options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {string} [options.animation] - The track progress animation to be <code>gradient</code> or <code>fade</code>
   * @param {object} [options.wave] - Wave potions
   * @param {string} [options.wave.align='center'] - Wave alignment in <code>top</code>/<code>center</code>/<code>bottom</code>
   * @param {number} [options.wave.barWidth=1] - The bar width in px
   * @param {number} [options.wave.barMarginScale=0.125] - The margin scale of bar width in Float[0,1]
   * @param {boolean} [options.wave.merged=true] - Symmetry if wave is align center
   * @param {boolean} [options.wave.noSignalLine=true] - Display a line when no signal
   * @param {object} [options.colors] - Waveform color potions
   * @param {string} [options.colors.background='#1D1E25'] - Canvas background color in Hex/RGB/HSL
   * @param {string} [options.colors.track='#E7E9E7'] - The waveform background color in Hex/RGB/HSL
   * @param {string} [options.colors.progress='#56D45B'] - The waveform progress color in Hex/RGB/HSL
   * @param {object[]} [options.hotCues=[]] - Hotcues sorted array to load waveform with. Each array item must contain a time key with its value **/
  function Waveform(options) {
    var _this;
    _classCallCheck(this, Waveform);
    _this = _super.call(this, options);
    _this._colors = {
      background: options.colors ? options.colors.background || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultBackgroundColor,
      track: options.colors ? options.colors.track || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultTextColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultTextColor,
      progress: options.colors ? options.colors.progress || _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultPrimaryColor : _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].defaultPrimaryColor
    };
    _this._canvas.style.backgroundColor = _this._colors.background;
    if (_this._player.src !== '') {
      _this._getPlayerSourceFile();
    }
    return _this;
  }

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  --------------------------------------  VISUCOMPONENTMONO OVERRIDES  -----------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof Waveform
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The frequency circle options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {object} [options.wave] - Waveform potions
   * @param {string} [options.wave.align='center'] - Waveform alignment in <code>top</code>/<code>center</code>/<code>bottom</code>
   * @param {number} [options.wave.barWidth=1] - The bar width in px
   * @param {number} [options.wave.barMarginScale=0] - The margin scale of bar width in Float[0,1]
   * @param {boolean} [options.wave.merged=true] - Symmetry if wave is aligned to center
   * @param {boolean} [options.wave.noSignalLine=true] - Display a line when no signal
   * @param {object[]} [options.hotCues=[]] - Hotcues sorted array to load waveform with. Each array item must contain a time key with its value **/
  _createClass(Waveform, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      _get(_getPrototypeOf(Waveform.prototype), "_fillAttributes", this).call(this, options);
      this._animation = options.animation;
      this._wave = {
        align: options.wave ? options.wave.align || 'center' : 'center',
        barWidth: options.wave ? options.wave.barWidth || 1 : 1,
        barMarginScale: options.wave ? options.wave.barMarginScale / 2 : 0.125,
        // Divide by 2 because true range is [0, 0.5]
        merged: options.wave ? options.wave.merged === true ? true : false : false,
        noSignalLine: options.wave ? options.wave.noSignalLine === true ? true : false : false
      };
      this._hotCues = options.hotCues || [];
      this._bars = null; // Computed on build or resize
      this._offlineCtx = null;
      this._offlineBuffer = null;
      // Raw channel data for whole audio file
      this._dataL = [];
      this._dataR = [];
      // Event binding
      this._trackLoaded = this._trackLoaded.bind(this);
      this._onProgress = this._onProgress.bind(this);
      this._onClick = this._onClick.bind(this);
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      _get(_getPrototypeOf(Waveform.prototype), "_buildUI", this).call(this);
      this._bars = this._canvas.width / this._wave.barWidth;
    }

    /** @method
     * @name _addEvents
     * @private
     * @override
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Add component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_addEvents",
    value: function _addEvents() {
      if (this._noEvents === false) {
        _get(_getPrototypeOf(Waveform.prototype), "_addEvents", this).call(this);
        this._player.addEventListener('loadedmetadata', this._trackLoaded, false);
        this._player.addEventListener('seeking', this._onProgress, false);
        this._dom.container.addEventListener('click', this._onClick, false);
      }
    }

    /** @method
     * @name _removeEvents
     * @private
     * @override
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Remove component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      _get(_getPrototypeOf(Waveform.prototype), "_removeEvents", this).call(this);
      this._player.removeEventListener('loadedmetadata', this._trackLoaded, false);
      this._player.removeEventListener('seeking', this._onProgress, false);
      this._dom.container.removeEventListener('click', this._onClick, false);
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      _get(_getPrototypeOf(Waveform.prototype), "_onResize", this).call(this);
      this._bars = this._canvas.width / this._wave.barWidth;
      this._fillData();
      this._clearCanvas();
      this._drawFileWaveform(this._player.currentTime / this._player.duration);
    }
  }, {
    key: "_onProgress",
    value: function _onProgress() {
      this._clearCanvas();
      this._drawFileWaveform(this._player.currentTime / this._player.duration);
    }

    /** @method
     * @name _dblClick
     * @private
     * @override
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On double click event callback.</blockquote> **/
  }, {
    key: "_dblClick",
    value: function _dblClick() {
      // Required to revoke fullscreen toggle from parent class, as it interferes with seek feature
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @override
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time method called by WebAudioAPI to process PCM data. Here we make a 8 bit frequency
     * and time analysis.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      if (this._isPlaying === true) {
        this._clearCanvas();
        this._drawFileWaveform(this._player.currentTime / this._player.duration);
        requestAnimationFrame(this._processAudioBin);
      }
    }

    /*  ----------  Waveform internal methods  ----------  */

    /** @method
     * @name _trackLoaded
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Player callback on track loaded.</blockquote> **/
  }, {
    key: "_trackLoaded",
    value: function _trackLoaded() {
      cancelAnimationFrame(this._processAudioBin);
      this._clearCanvas(); // Clear previous canvas
      // Do XHR to request file and parse it
      this._getPlayerSourceFile();
    }

    /** @method
     * @name _onClick
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Update waveform progress according to mouse seek event.</blockquote>
     * @param {object} event - The mouse event **/
  }, {
    key: "_onClick",
    value: function _onClick(event) {
      var rect = event.target.getBoundingClientRect();
      var x = event.clientX - rect.left;
      var y = event.clientY - rect.top;
      var hotCue = this._hotCueClicked(x, y);
      // Clicked on a hotcue
      if (hotCue) {
        this._player.currentTime = hotCue.time;
      } else {
        // Seek player otherwise
        var boundingBox = event.target.getBoundingClientRect();
        var xOffset = event.clientX - boundingBox.left;
        this._player.currentTime = xOffset / this._canvas.width * this._player.duration;
      }
      // Clear canvas and drawwaveform with curent curent time
      this._clearCanvas();
      this._drawFileWaveform(this._player.currentTime / this._player.duration);
    }

    /** @method
     * @name _processAudioFile
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Perform an offline analysis on whole track.</blockquote>
     * @param {object} response - HTTP response for audio track to extract buffer from **/
  }, {
    key: "_processAudioFile",
    value: function _processAudioFile(response) {
      var _this2 = this;
      // Set offline context according to track duration to get its full samples
      this._offlineCtx = new OfflineAudioContext(2, this._audioCtx.sampleRate * this._player.duration, this._audioCtx.sampleRate);
      this._offlineSource = this._offlineCtx.createBufferSource();
      this._audioCtx.decodeAudioData(response, function (buffer) {
        _this2._offlineSource.buffer = buffer;
        _this2._offlineSource.connect(_this2._offlineCtx.destination);
        _this2._offlineSource.start();
        _this2._offlineCtx.startRendering().then(function (renderedBuffer) {
          _this2._offlineBuffer = renderedBuffer;
          _this2._fillData();
          _this2._drawFileWaveform(_this2._player.currentTime / _this2._player.duration);
        })["catch"](function (err) {
          console.log('Rendering failed: ' + err);
        });
      });
    }

    /** @method
     * @name _fillData
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Generate merged or stereo data from audio buffer.</blockquote> **/
  }, {
    key: "_fillData",
    value: function _fillData() {
      if (this._offlineBuffer) {
        if (this._wave.merged === true) {
          // Mono output will only use L array to store L/R averages
          this._dataL = this._genScaledMonoData(this._offlineBuffer);
        } else {
          this._dataL = this._genScaledData(this._offlineBuffer.getChannelData(0));
          this._dataR = this._genScaledData(this._offlineBuffer.getChannelData(1));
        }
      }
    }

    /** @method
     * @name _genScaledData
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>L/R Sub sample channel data to compute average value, depending on bar count.</blockquote>
     * @param {Float32Array} data - Channel data (L/R here)
     * @return {number[]} Array of height per sub samples **/
  }, {
    key: "_genScaledData",
    value: function _genScaledData(data) {
      var subSampleSize = Math.floor(data.length / this._bars);
      var output = [];
      // We need to sub sample raw data according to the bar number. We average fq values
      for (var i = 0; i <= data.length - subSampleSize; i += subSampleSize) {
        var sum = 0;
        for (var j = 0; j < subSampleSize; ++j) {
          sum += Math.abs(data[i + j]);
        }
        output.push(sum / subSampleSize);
      }
      return this._scaleDataToHeight(output);
    }

    /** @method
     * @name _genScaledMonoData
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Merged L/R Sub sample channel data to compute average value, depending on bar count.</blockquote>
     * @param {object} buffer - Audio buffer
     * @return {number[]} Array of height per sub samples **/
  }, {
    key: "_genScaledMonoData",
    value: function _genScaledMonoData(buffer) {
      var dataL = buffer.getChannelData(0);
      var dataR = buffer.getChannelData(1);
      var subSampleSize = Math.floor(dataL.length / this._bars);
      var output = [];

      // We need to sub sample raw data according to the bar number. We average fq values
      for (var i = 0; i <= dataL.length - subSampleSize; i += subSampleSize) {
        var sum = 0;
        for (var j = 0; j < subSampleSize; ++j) {
          sum += (Math.abs(dataL[i + j]) + Math.abs(dataR[i + j])) / 2;
        }
        output.push(sum / subSampleSize);
      }
      return this._scaleDataToHeight(output);
    }

    /** @method
     * @name _scaleDataToHeight
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Scale channel data into an array of height to be used in canvas on draw.</blockquote>
     * @param {number[]} sampledData - Channel data
     * @return {number[]} Array of height per sub samples **/
  }, {
    key: "_scaleDataToHeight",
    value: function _scaleDataToHeight(sampledData) {
      // Convert a range to another, maintaining ratio
      // oldRange = (oldMax - oldMin)
      // newRange = (newMax - newMin)
      // newValue = (((oldValue - oldMin) * newRange) / oldRange) + NewMin */
      // We take max value of sampled data as 90% height in canvas as ref
      var oldMax = Math.max.apply(Math, _toConsumableArray(sampledData));
      var oldMin = Math.min.apply(Math, _toConsumableArray(sampledData));
      var oldRange = oldMax - oldMin;
      var newRange = this._canvas.height * .9;
      var scaledData = [];
      for (var i = 0; i < sampledData.length; ++i) {
        scaledData.push((sampledData[i] - oldMin) * newRange / oldRange);
      }
      return scaledData;
    }

    /** @method
     * @name _drawFileWaveform
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw waveform with a given progress.</blockquote>
     * @param {number} progressPercentage - Track progress percentage **/
  }, {
    key: "_drawFileWaveform",
    value: function _drawFileWaveform(progressPercentage) {
      var x = this._canvas.width / this._bars;
      var margin = x * this._wave.barMarginScale;
      this._ctx.beginPath();
      // Iterate bar data
      for (var i = 0; i < this._dataL.length; ++i) {
        // Determine Y pos for Up and Down rectangles to draw (in mono, we only use merged data in dataL array)
        var yU = this._dataL[i] / 2;
        var yD = this._wave.merged === true ? this._dataL[i] / 2 : this._dataR[i] / 2;
        // Determine bar color according to progress.
        this._ctx.fillStyle = this._colors.track; // White by default (un-read yet)
        if (x * (i + 1) / this._canvas.width > progressPercentage && x * i / this._canvas.width < progressPercentage) {
          // Create linear gradient on bar X dimension
          var gradient = this._ctx.createLinearGradient(x * i + margin, 0,
          // Bar X start
          x * (i + 1) - margin, 0 // Bar X end
          );
          // Get bar range in px
          var barRange = x * (i + 1) - x * i;
          // We get progress X position according to canvas width
          var progressX = progressPercentage * this._canvas.width;
          // Convert this width into a percentage of barWidth progression
          var barProgressPercentage = Math.abs(progressX - x * i) / barRange;
          if (this._animation === 'gradient') {
            if (barProgressPercentage + 0.01 < 1) {
              gradient.addColorStop(0, this._colors.progress); // Green
              gradient.addColorStop(barProgressPercentage, this._colors.progress); // Green
              gradient.addColorStop(barProgressPercentage + 0.01, this._colors.track); // Not progressive gradient
              gradient.addColorStop(1, this._colors.track);
              this._ctx.fillStyle = gradient; // Gradient from green to white with correct progression in bar
            } else {
              this._ctx.fillStyle = this._colors.progress; // Green full for last position in bars
            }
          } else {
            var amount = Math.round(barProgressPercentage * 255);
            this._ctx.fillStyle = _utils_ColorUtils_js__WEBPACK_IMPORTED_MODULE_2__["default"].lightenDarkenColor(this._colors.progress, 255 - amount); // Green full for last position in bars
          }
        } else if (i / this._dataL.length < progressPercentage) {
          this._ctx.fillStyle = this._colors.progress; // Green for already played bars
        }
        // Draw up and down rectangles for current bar
        if (this._wave.align === 'center') {
          this._ctx.fillRect(x * i + margin, this._canvas.height / 2 - yU, x - margin * 2, yU);
          this._ctx.fillRect(x * i + margin, this._canvas.height / 2, x - margin * 2, yD);
          // Add tiny centered line
          if (this._wave.noSignalLine) {
            this._ctx.fillRect(x * i + margin, this._canvas.height / 2 - 0.5, x - margin * 2, 1);
          }
        } else if (this._wave.align === 'bottom') {
          this._ctx.fillRect(x * i + margin, this._canvas.height - yU, x - margin * 2, yU);
          this._ctx.fillRect(x * i + margin, this._canvas.height - yU - yD + 1, x - margin * 2, yD); // Offset one pixel origin to blend channel properly
        } else if (this._wave.align === 'top') {
          // Stack L/R on each other
          this._ctx.fillRect(x * i + margin, 0, x - margin * 2, yU);
          this._ctx.fillRect(x * i + margin, yU - 1, x - margin * 2, yD); // Offset one pixel origin to blend channel properly
        }
      }

      this._ctx.closePath();
      // Draw hot cues if any
      this._drawHotCues();
    }
  }, {
    key: "_drawHotCues",
    value: function _drawHotCues() {
      for (var i = 0; i < this._hotCues.length; ++i) {
        this._drawHotCue(this._hotCues[i]);
      }
    }
  }, {
    key: "_drawHotCue",
    value: function _drawHotCue(hotCue) {
      _utils_CanvasUtils_js__WEBPACK_IMPORTED_MODULE_1__["default"].drawHotCue(this._canvas, {
        x: hotCue.time * this._canvas.width / this._player.duration + 18 / 2,
        // By default, hotCue is centered on xPos. We don't wnat that behoavior here
        y: 2,
        size: 18,
        label: hotCue.label || hotCue.number,
        color: hotCue.color
      });
    }
  }, {
    key: "_hotCueClicked",
    value: function _hotCueClicked(x, y) {
      if (y > 2 && y < 20) {
        for (var i = 0; i < this._hotCues.length; ++i) {
          var xPos = this._hotCues[i].time * this._canvas.width / this._player.duration;
          if (x > xPos && x < xPos + 18) {
            return this._hotCues[i];
          }
        }
      }
      return false;
    }

    /** @method
     * @name _getPlayerSourceFile
     * @private
     * @memberof Waveform
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Fetch audio file using xmlHTTP request.</blockquote> **/
  }, {
    key: "_getPlayerSourceFile",
    value: function _getPlayerSourceFile() {
      var _this3 = this;
      var request = new XMLHttpRequest();
      request.open('GET', this._player.src, true);
      request.responseType = 'arraybuffer';
      request.onload = function () {
        _this3._processAudioFile(request.response);
      };
      request.send();
    }
  }, {
    key: "setHotCuePoint",
    value: function setHotCuePoint(hotCue) {
      // This is just to add a new cuepoint, extracted from a Timeline component.
      var existingHotCue = null;
      for (var i = 0; i < this._hotCues.length; ++i) {
        if (this._hotCues[i].beatCount === hotCue.beatCount) {
          existingHotCue = this._hotCues[i];
          break;
        }
      }
      if (!existingHotCue) {
        this._hotCues.push(hotCue);
        this._drawHotCues();
      }
    }
  }, {
    key: "updateHotCuePoint",
    value: function updateHotCuePoint(hotCue, options) {
      for (var i = 0; i < this._hotCues.length; ++i) {
        if (this._hotCues[i].beatCount === hotCue.beatCount) {
          if (options.label) {
            this._hotCues[i].label = options.label;
          }
          if (options.color) {
            this._hotCues[i].color = options.color;
          }
        }
      }
      this._clearCanvas();
      this._drawFileWaveform(this._player.currentTime / this._player.duration);
    }
  }, {
    key: "removeHotCuePoint",
    value: function removeHotCuePoint(hotCue) {
      for (var i = 0; i < this._hotCues.length; ++i) {
        if (this._hotCues[i].beatCount === hotCue.beatCount) {
          this._hotCues.splice(i, 1);
          this._clearCanvas();
          this._drawFileWaveform(this._player.currentTime / this._player.duration);
          break;
        }
      }
    }
  }]);
  return Waveform;
}(_utils_VisuComponentMono_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Waveform);

/***/ }),

/***/ "./front/js/view/visu/utils/BaseComponent.js":
/*!***************************************************!*\
  !*** ./front/js/view/visu/utils/BaseComponent.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var BaseComponent = /*#__PURE__*/function () {
  /** @summary BaseComponent is the bedrock of any visualisation here. It must be inherited from Mono or Stereo component abstractions.
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Store all base method, mostly to handle events, other processing methods needs to be overridden.</blockquote> **/
  function BaseComponent() {
    _classCallCheck(this, BaseComponent);
    /** @private
     * @member {string} - The component type. See supported componenets in AudioVisualizer factory */
    this._type = null;
    /** @private
     * @member {object} - The audio source (HTML audio player) */
    this._player = null;
    /** @private
     * @member {object} - Target div to render module in */
    this._renderTo = null;
    /** @private
     * @member {number} - FFT size used to analyse audio stream. Must be a power of 2 */
    this._fftSize = null;
    /** @private
     * @member {object} - The audio context */
    this._audioCtx = null;
    /** @private
     * @member {object} - The source node to chain from ; it will ignore the output of HTML audio player */
    this._inputNode = null;
    /** @private
     * @member {boolean} - The playing state of the player */
    this._isPlaying = false;
    /** @private
     * @member {object} - Contains all useful DOM objects */
    this._dom = {
      container: null
    };
    /** @private
     * @member {object} - Save container dimension to restore when closing fullscreen */
    this._parentDimension = {
      position: null,
      height: null,
      width: null,
      zIndex: null
    };
    /** @private
     * @member {object} - Resize observable to watch for any resize change */
    this._resizeObserver = null;
    // Event binding
    this._onResize = this._onResize.bind(this);
    this._play = this._play.bind(this);
    this._pause = this._pause.bind(this);
    this._dblClick = this._dblClick.bind(this);
    // Bind process audio bin for add and remove event on demand
    this._processAudioBin = this._processAudioBin.bind(this);
  }

  /** @method
   * @name destroy
   * @public
   * @memberof BaseComponent
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>The destroy method to clear events and remove all component properties.</blockquote> **/
  _createClass(BaseComponent, [{
    key: "destroy",
    value: function destroy() {
      var _this = this;
      this._removeEvents();
      Object.keys(this).forEach(function (key) {
        delete _this[key];
      });
    }

    /** @method
     * @name _fillAttributes
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build component properties from options. Must be implemented in sub class.</blockquote> **/
  }, {
    key: "_fillAttributes",
    value: function _fillAttributes() {
      // Must be implemented in sub class
    }

    /** @method
     * @name _buildUI
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create, configure and append UI in DOM. Must be implemented in sub class.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      // Must be implemented in sub class
    }

    /** @method
     * @name _setAudioNodes
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build audio chain with source. Must be implemented in sub class.</blockquote> **/
  }, {
    key: "_setAudioNodes",
    value: function _setAudioNodes() {
      // Must be implemented in sub class
    }

    /** @method
     * @name _processAudioBin
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Real time audio analysis using PCM data from WebAudioAPI. Must be implemented in sub class.</blockquote> **/
  }, {
    key: "_processAudioBin",
    value: function _processAudioBin() {
      // Must be implemented in sub class
    }

    /** @method
     * @name _addEvents
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Add component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_addEvents",
    value: function _addEvents() {
      // Put observer on renderTo and callback onResize at each action
      this._resizeObserver = new ResizeObserver(this._onResize);
      this._resizeObserver.observe(this._renderTo);
      // Playback events
      this._player.addEventListener('play', this._play, false);
      this._player.addEventListener('pause', this._pause, false);
      // Double click handler (fullscreen for most components)
      this._dom.container.addEventListener('dblclick', this._dblClick, false);
    }

    /** @method
     * @name _removeEvents
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Remove component events (resize, play, pause, dbclick).</blockquote> **/
  }, {
    key: "_removeEvents",
    value: function _removeEvents() {
      // Clear observable
      this._resizeObserver.disconnect();
      // Clear playback events
      this._player.removeEventListener('play', this._play, false);
      this._player.removeEventListener('pause', this._pause, false);
      // Remove double click listener
      this._dom.container.removeEventListener('dblclick', this._dblClick, false);
    }

    /** @method
     * @name _play
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On play event callback.</blockquote> **/
  }, {
    key: "_play",
    value: function _play() {
      this._audioCtx.resume();
      this._isPlaying = true;
      this._processAudioBin();
    }

    /** @method
     * @name _pause
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On pause event callback.</blockquote> **/
  }, {
    key: "_pause",
    value: function _pause() {
      this._audioCtx.suspend();
      this._isPlaying = false;
    }

    /** @method
     * @name _onResize
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback. Must be implemented in sub class.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      // Resize must be handled in each sub class
    }

    /** @method
     * @name _dblClick
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On double click event callback (toggle fullscreen).</blockquote> **/
  }, {
    key: "_dblClick",
    value: function _dblClick() {
      var _this2 = this;
      if (document.fullscreenElement) {
        document.exitFullscreen().then(function () {
          // Restore renderTo initial style
          _this2._renderTo.style.position = _this2._parentDimension.position;
          _this2._renderTo.style.height = _this2._parentDimension.height;
          _this2._renderTo.style.width = _this2._parentDimension.width;
          _this2._renderTo.style.zIndex = _this2._parentDimension.zIndex;
          _this2._parentDimension = {
            position: null,
            height: null,
            width: null,
            zIndex: null
          };
        })["catch"](function (err) {
          return console.error(err);
        });
      } else {
        document.documentElement.requestFullscreen().then(function () {
          // Update renderTo dimension (canvas will be automatically rescaled)
          _this2._parentDimension = {
            position: _this2._renderTo.style.position,
            height: _this2._renderTo.style.height,
            width: _this2._renderTo.style.width,
            zIndex: _this2._renderTo.style.zIndex || ''
          };
          // Alter render to style to make it fullscreen
          _this2._renderTo.style.position = 'fixed';
          _this2._renderTo.style.height = '100vh';
          _this2._renderTo.style.width = '100vw';
          _this2._renderTo.style.zIndex = '999';
        })["catch"](function (err) {
          return console.error(err);
        });
      }
    }

    /** @method
     * @name _clearCanvas
     * @private
     * @memberof BaseComponent
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Clear component canvas contexts from their content. Must be implemented in sub class.</blockquote> **/
  }, {
    key: "_clearCanvas",
    value: function _clearCanvas() {
      // Clear canvas must be handled in Mono/Stereo sub class depending on amount of canvas
    }
  }]);
  return BaseComponent;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BaseComponent);

/***/ }),

/***/ "./front/js/view/visu/utils/CanvasUtils.js":
/*!*************************************************!*\
  !*** ./front/js/view/visu/utils/CanvasUtils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColorUtils.js */ "./front/js/view/visu/utils/ColorUtils.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var CanvasUtils = /*#__PURE__*/function () {
  /** @summary CanvasUtils provides several method to manipulate basic geometries in canvas
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>This class doesn't need to be instantiated, as all its methods are static in order to
   * make those utils methods available with constraints. Refer to each method for their associated documentation.</blockquote> */
  function CanvasUtils() {
    _classCallCheck(this, CanvasUtils);
  } // This static class shouldn't be instantiated as it as not interest at all to do so

  /** @method
   * @name drawRadialBar
   * @public
   * @memberof CanvasUtils
   * @static
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Draw a radial bar with its height and color being computed from the frequency intensity.</blockquote>
   * @param {object} canvas - The canvas to draw radial bar in
   * @param {object} options - Radial bar options
   * @param {object} options.frequencyValue - The frequency value in Int[0,255]
   * @param {number} options.x0 - The x origin in canvas dimension
   * @param {number} options.y0 - The y origin in canvas dimension
   * @param {number} options.x1 - The x endpoint in canvas dimension
   * @param {number} options.y1 - The y endpoint in canvas dimension
   * @param {number} options.width - The bar line width in N
   * @param {string} options.color - The bar base color (will be lighten/darken according to frequency value) in Hex/RGB/HSL **/
  _createClass(CanvasUtils, null, [{
    key: "drawRadialBar",
    value: function drawRadialBar(canvas, options) {
      var ctx = canvas.getContext('2d');
      var amount = options.frequencyValue / 255;
      // Draw on canvas context
      ctx.beginPath();
      ctx.moveTo(options.x0, options.y0);
      ctx.lineTo(options.x1, options.y1);
      ctx.strokeStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].lightenDarkenColor(options.color, amount * 100);
      ctx.lineWidth = options.width;
      ctx.stroke();
      ctx.closePath();
    }

    /** @method
     * @name drawCircle
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a circle in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw circle in
     * @param {object} options - Circle options
     * @param {number} options.centerX - The circle x origin in canvas dimension
     * @param {number} options.centerY - The circle y origin in canvas dimension
     * @param {number} options.radius - The circle radius
     * @param {number} options.radStart - The rotation start angle in rad
     * @param {number} options.radEnd - The rotation end angle in rad
     * @param {number} options.width - The circle line width in N
     * @param {string} options.color - The circle color in Hex/RGB/HSL **/
  }, {
    key: "drawCircle",
    value: function drawCircle(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.arc(options.centerX, options.centerY, options.radius, options.radStart, options.radEnd);
      ctx.lineWidth = options.width;
      ctx.strokeStyle = options.color;
      ctx.stroke();
      ctx.closePath();
    }

    /** @method
     * @name drawCircleGlow
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a circle with glow effect made with radial gradients in inner and outer circle.</blockquote>
     * @param {object} canvas - The canvas to draw circle glow in
     * @param {object} options - Circle glow options
     * @param {number} options.centerX - The circle x origin in canvas dimension
     * @param {number} options.centerY - The circle y origin in canvas dimension
     * @param {number} options.radius - The circle radius
     * @param {number} options.radStart - The rotation start angle in rad
     * @param {number} options.radEnd - The rotation end angle in rad
     * @param {number} options.width - The circle line width in N
     * @param {object[]} options.colors - the glow color, must be objects with color (in Hex/RGB/HSL) and index (in Float[0,1], 0.5 being the circle line) properties  **/
  }, {
    key: "drawCircleGlow",
    value: function drawCircleGlow(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.arc(options.centerX, options.centerY, options.radius, options.radStart, options.radEnd);
      ctx.fillStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].radialGlowGradient(canvas, options);
      ctx.fill();
      ctx.closePath();
    }

    /** @method
     * @name drawDisc
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a disc in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Disc options
     * @param {number} options.centerX - The circle x origin in canvas dimension
     * @param {number} options.centerY - The circle y origin in canvas dimension
     * @param {number} options.radius - The circle radius
     * @param {number} options.radStart - The rotation start angle in rad
     * @param {number} options.radEnd - The rotation end angle in rad
     * @param {string} options.color - The circle color in Hex/RGB/HSL **/
  }, {
    key: "drawDisc",
    value: function drawDisc(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.arc(options.centerX, options.centerY, options.radius, options.radStart, options.radEnd);
      ctx.fillStyle = options.color;
      ctx.fill();
      ctx.closePath();
    }

    /** @method
     * @name drawVerticalBar
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a disc vertical bar in given canvas with given gradient.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Vertical bar options
     * @param {number} options.originX - The x origin in canvas dimension
     * @param {number} options.height - The height of the frequency bin in canvas dimension
     * @param {number} options.width - The width of the frequency bin in canvas dimension
     * @param {object[]} options.colors - the gradient colors, must be objects with color and index (in Float[0,1]) properties **/
  }, {
    key: "drawVerticalBar",
    value: function drawVerticalBar(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.fillRect(options.originX, canvas.height - options.height, options.width, options.height);
      options.vertical = true; // Enforce vertical gradient
      ctx.fillStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].linearGradient(canvas, options);
      ctx.fillRect(options.originX, canvas.height - options.height, options.width, options.height);
      ctx.closePath();
    }

    /** @method
     * @name drawOscilloscope
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw an oscilloscope of frequencies in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Oscilloscope options
     * @param {number} options.samples - The x origin in canvas dimension
     * @param {number} options.timeDomain - The height of the frequency bin in canvas dimension
     * @param {string|array} options.color - the oscilloscope color in Hex/RGB/HSL or <code>rainbow</code> **/
  }, {
    key: "drawOscilloscope",
    value: function drawOscilloscope(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      // Iterate over data to build each bar
      var cursorX = 0;
      var frequencyWidth = canvas.width / options.samples;
      for (var i = 0; i < options.samples; ++i) {
        // Compute frequency height percentage relative to canvas height to determine Y origin
        var frequencyHeight = options.timeDomain[i] / 255; // Get value between 0 and 1
        var cursorY = canvas.height * frequencyHeight;
        if (i > 0) {
          // General case
          ctx.lineTo(cursorX, cursorY);
        } else {
          // 0 index case
          ctx.moveTo(cursorX, cursorY);
        }
        // Update cursor position
        cursorX += frequencyWidth;
      }
      if (options.colors === 'rainbow') {
        ctx.strokeStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].rainbowLinearGradient(canvas);
      } else if (Array.isArray(options.colors)) {
        ctx.strokeStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].linearGradient(canvas, options);
      } else {
        ctx.strokeStyle = options.colors;
      }
      ctx.stroke();
      ctx.closePath();
    }

    /** @method
     * @name drawPointsOscilloscope
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw an oscilloscope as points only in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Oscilloscope options
     * @param {number} options.length - the oscilloscope length (half FFT)
     * @param {number} options.times - The time domain bins
     * @param {string} options.color - The point color in Hex/RGB/HSL **/
  }, {
    key: "drawPointsOscilloscope",
    value: function drawPointsOscilloscope(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      for (var i = 0; i < options.length; ++i) {
        var height = canvas.height * (options.times[i] / 255);
        var offset = canvas.height - height - 1;
        var barWidth = canvas.width / options.length;
        ctx.fillStyle = options.color;
        ctx.fillRect(i * barWidth, offset, 2, 2);
      }
      ctx.stroke();
      ctx.fill();
      ctx.closePath();
    }

    /** @method
     * @name drawRadialOscilloscope
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a radial oscilloscope as points only in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Oscilloscope options
     * @param {number} options.centerX - the x center position
     * @param {number} options.centerY - the y center position
     * @param {number} options.rotation - the rotation offset
     * @param {number} options.length - the oscilloscope length (half FFT)
     * @param {number[]} options.times - The time domain bins
     * @param {number[]} options.points - The oscilloscope radial points objects
     * @param {string} options.color - The point color in Hex/RGB/HSL **/
  }, {
    key: "drawRadialOscilloscope",
    value: function drawRadialOscilloscope(canvas, options) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.save();
      ctx.translate(options.centerX, options.centerY);
      ctx.rotate(options.rotation);
      ctx.translate(-options.centerX, -options.centerY);
      ctx.moveTo(options.points[0].dx, options.points[0].dy);
      ctx.strokeStyle = options.color;
      for (var i = 0; i < options.length - 1; ++i) {
        var _point = options.points[i];
        _point.dx = _point.x + options.times[i] * Math.sin(Math.PI / 180 * _point.angle);
        _point.dy = _point.y + options.times[i] * Math.cos(Math.PI / 180 * _point.angle);
        var _xc = (_point.dx + options.points[i + 1].dx) / 2;
        var _yc = (_point.dy + options.points[i + 1].dy) / 2;
        ctx.quadraticCurveTo(_point.dx, _point.dy, _xc, _yc);
      }
      // Handle last point manually
      var value = options.times[options.length - 1];
      var point = options.points[options.length - 1];
      point.dx = point.x + value * Math.sin(Math.PI / 180 * point.angle);
      point.dy = point.y + value * Math.cos(Math.PI / 180 * point.angle);
      var xc = (point.dx + options.points[0].dx) / 2;
      var yc = (point.dy + options.points[0].dy) / 2;
      ctx.quadraticCurveTo(point.dx, point.dy, xc, yc);
      ctx.quadraticCurveTo(xc, yc, options.points[0].dx, options.points[0].dy);
      // Fill context for current path
      ctx.lineWidth = 1;
      ctx.lineCap = 'round';
      ctx.stroke();
      ctx.restore();
      ctx.closePath();
    }

    /** @method
     * @name drawPeakMeter
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a peakmeter in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Peak meter options
     * @param {string} options.orientation - The peak meter orientation, either <code>horizontal</code> or <code>vertical</code>
     * @param {number} options.amplitude - The sample amplitude value
     * @param {number} options.peak - The peak value
     * @param {object[]} options.colors - The peak meter gradient colors, must be objects with color and index (in Float[0,1]) properties **/
  }, {
    key: "drawPeakMeter",
    value: function drawPeakMeter(canvas, options) {
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null || options === undefined || options === null) {
        return new Error('CanvasUtils.drawPeakMeter : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('CanvasUtils.drawPeakMeter : Invalid type for canvas or options');
      }
      // Test if options contains other mandatory args
      if (options.orientation === undefined || options.orientation === null || options.amplitude === undefined || options.amplitude === null || options.peak === undefined || options.peak === null || options.colors === undefined || options.colors === null) {
        return new Error('CanvasUtils.drawPeakMeter : Missing arguments options.orientation or options.amplitude or options.peak or options.top');
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      options.vertical = options.orientation === 'vertical';
      ctx.fillStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].linearGradient(canvas, options);
      ctx.fill();
      if (options.orientation === 'horizontal') {
        var ledWidth = canvas.width - options.amplitude;
        ctx.fillRect(0, 0, ledWidth, canvas.height);
      } else if (options.orientation === 'vertical') {
        var ledHeight = canvas.height - options.amplitude;
        ctx.fillRect(0, canvas.height - ledHeight, canvas.width, ledHeight);
      }
      // Draw maximus bar
      ctx.fillStyle = '#FF6B67';
      if (options.orientation === 'horizontal') {
        var _ledWidth = canvas.width - options.peak;
        ctx.fillRect(_ledWidth, 0, 1, canvas.height);
      } else if (options.orientation === 'vertical') {
        var _ledHeight = canvas.height - options.peak;
        ctx.fillRect(0, canvas.height - _ledHeight, canvas.width, 1);
      }
    }

    /** @method
     * @name drawTriangle
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a triangle in given canvas.</blockquote>
     * @param {object} canvas - The canvas to draw disc in
     * @param {object} options - Peak meter options
     * @param {number} options.x - The triangle x origin
     * @param {number} options.y - The triangle y origin
     * @param {number} options.radius - The triangle base
     * @param {number} options.top - The triangle top position **/
  }, {
    key: "drawTriangle",
    value: function drawTriangle(canvas, options) {
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null || options === undefined || options === null) {
        return new Error('CanvasUtils.drawTriangle : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('CanvasUtils.drawTriangle : Invalid type for canvas or options');
      }
      // Test if options contains other mandatory args
      if (options.x === undefined || options.x === null || options.y === undefined || options.y === null || options.radius === undefined || options.radius === null || options.top === undefined || options.top === null) {
        return new Error('CanvasUtils.drawTriangle : Missing arguments options.x or options.y or options.radius or options.top');
      }
      // Test mandatory arguments proper types
      if (typeof options.x !== 'number' || typeof options.y !== 'number' || typeof options.radius !== 'number' || typeof options.top !== 'number') {
        return new Error('CanvasUtils.drawTriangle : Invalid type for options.x or options.y or options.radius or options.top');
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      ctx.moveTo(options.x - options.radius, options.y);
      ctx.lineTo(options.x + options.radius, options.y);
      ctx.lineTo(options.x, options.top);
      ctx.fill();
      ctx.closePath();
    }

    /** @method
     * @name drawHotCue
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw a hotcue in given canvas. HotCue is a square with a label in it.</blockquote>
     * @param {object} canvas - The canvas to draw hotcue in
     * @param {object} options - Hot cue options
     * @param {number} options.x - The hotcue x origin
     * @param {number} options.y - The hotcue y origin
     * @param {number} options.size - The hotcue dimension (height/width)
     * @param {string} [options.color] - The hotcue color in Hex or css color
     * @param {number} options.label - The hotcue label **/
  }, {
    key: "drawHotCue",
    value: function drawHotCue(canvas, options) {
      // Test that caller sent mandatory arguments
      if (!canvas || !options) {
        return new Error('CanvasUtils.drawHotCue : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('CanvasUtils.drawHotCue : Invalid type for canvas or options');
      }
      // Test if options contains other mandatory args
      if (!options.x || !options.y || !options.size || !options.label) {
        return new Error('CanvasUtils.drawHotCue : Missing arguments options.x or options.y or options.size or options.label');
      }
      // Test mandatory arguments proper types
      if (typeof options.x !== 'number' || typeof options.y !== 'number' || typeof options.size !== 'number' || typeof options.label !== 'string') {
        return new Error('CanvasUtils.drawHotCue : Invalid type for options.x or options.y or options.size or options.label');
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      // HotCue border
      ctx.fillStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultBackgroundColor;
      ctx.fillRect(options.x - options.size / 2 - 1, options.y - 1, options.size + 2, options.size + 2);
      // Background rectangle
      ctx.fillStyle = options.color || _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultPrimaryColor;
      ctx.fillRect(options.x - options.size / 2, options.y, options.size, options.size);
      // Label text drawing
      ctx.fillStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultBackgroundColor;
      ctx.font = 'bold 8pt sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(options.label || '', options.x, options.y + 3 * options.size / 4);
      ctx.closePath();
    }

    /** @method
     * @name drawBeatCount
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Draw in canvas the beat count and the bar count of current playback.</blockquote>
     * @param {object} canvas - The canvas to draw hotcue in
     * @param {object} options - Peak meter options
     * @param {number} options.x - The hotcue x origin
     * @param {number} options.y - The hotcue y origin
     * @param {string} options.label - The bar count label **/
  }, {
    key: "drawBeatCount",
    value: function drawBeatCount(canvas, options) {
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null || options === undefined || options === null) {
        return new Error('CanvasUtils.drawBeatCount : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('CanvasUtils.drawBeatCount : Invalid type for canvas or options');
      }
      // Test if options contains other mandatory args
      if (options.x === undefined || options.x === null || options.y === undefined || options.y === null || options.label === undefined || options.label === null) {
        return new Error('CanvasUtils.drawBeatCount : Missing arguments options.x or options.y or options.label');
      }
      // Test mandatory arguments proper types
      if (typeof options.x !== 'number' || typeof options.y !== 'number' || typeof options.label !== 'string') {
        return new Error('CanvasUtils.drawBeatCount : Invalid type for options.x or options.y or options.label');
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
      // Label text drawing
      ctx.fillStyle = _ColorUtils_js__WEBPACK_IMPORTED_MODULE_0__["default"].defaultPrimaryColor;
      ctx.font = 'bold 10pt sans-serif';
      ctx.textAlign = 'left';
      ctx.fillText("".concat(options.label, " Bars"), options.x, options.y);
      ctx.closePath();
    }

    /** @method
     * @name precisionRound
     * @public
     * @memberof CanvasUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Round a floating number with a given precision after coma.</blockquote>
     * @param {number} value - The floating value to round
     * @param {number} precision - the amount of number we want to have after floating point
     * @return {number} - The rounded value **/
  }, {
    key: "precisionRound",
    value: function precisionRound(value, precision) {
      // Test that caller sent mandatory arguments
      if (value === undefined || value === null || precision === undefined || precision === null) {
        return new Error('CanvasUtils.precisionRound : Missing arguments value or precision');
      }
      // Test those arguments proper types
      if (typeof value !== 'number' || typeof precision !== 'number') {
        return new Error('CanvasUtils.precisionRound : Invalid type for value or precision');
      }
      // Perform method purpose
      var multiplier = Math.pow(10, precision || 0);
      return Math.round(value * multiplier) / multiplier;
    }
  }]);
  return CanvasUtils;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanvasUtils);

/***/ }),

/***/ "./front/js/view/visu/utils/ColorUtils.js":
/*!************************************************!*\
  !*** ./front/js/view/visu/utils/ColorUtils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var ColorUtils = /*#__PURE__*/function () {
  /** @summary ColorUtils provides several method to abstract color manipulation for canvas
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>This class doesn't need to be instantiated, as all its methods are static in order to
   * make those utils methods available without constraints. Refer to each method for their associated documentation.</blockquote> */
  function ColorUtils() {
    _classCallCheck(this, ColorUtils);
  } // This static class shouldn't be instantiated as it as not interest at all to do so

  /*  --------------------------------------------------------------------------------------------------------------- */
  /*  --------------------------------------------  GRADIENT METHOD  -----------------------------------------------  */
  /*  --------------------------------------------------------------------------------------------------------------- */

  /** @method
   * @name drawRadialGradient
   * @public
   * @memberof ColorUtils
   * @static
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Fill context with radial gradient according to options object.</blockquote>
   * @param {object} canvas - The canvas to draw radial gradient in
   * @param {object} options - Radial gradient options
   * @param {number} options.x0 - The x origin in canvas dimension
   * @param {number} options.y0 - The y origin in canvas dimension
   * @param {number} options.r0 - The radius of the start circle in Float[0,2PI]
   * @param {number} options.x1 - The x endpoint in canvas dimension
   * @param {number} options.y1 - The y endpoint in canvas dimension
   * @param {number} options.r1 - The radius of the end circle in Float[0,2PI]
   * @param {object[]} options.colors - The color gradient, must be objects with color (in Hex/RGB/HSL) and index (in Float[0,1]) properties **/
  _createClass(ColorUtils, null, [{
    key: "drawRadialGradient",
    value: function drawRadialGradient(canvas, options) {
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null || options === undefined || options === null) {
        return new Error('ColorUtils.drawRadialGradient : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('ColorUtils.drawRadialGradient : Invalid type for canvas or options');
      }
      // Test if options.colors is properly formed
      if (!options.colors || !Array.isArray(options.colors)) {
        return new Error('ColorUtils.drawRadialGradient : Options object is not properly formed');
      }
      // Test if sent colors if properly formed of color/index objects
      for (var i = 0; i < options.colors.length; ++i) {
        if (options.colors[i].index === undefined || options.colors[i].index === null || typeof options.colors[i].index !== 'number' || options.colors[i].color === undefined || options.colors[i].color === null || typeof options.colors[i].color !== 'string') {
          return new Error('ColorUtils.drawRadialGradient : Invalid type for a color sent in options object');
        } else {
          // Test tha index is in [0,1]
          if (options.colors[i].index < 0 || options.colors[i].index > 1) {
            return new Error('ColorUtils.drawRadialGradient : An index sent in options object is not a valid float in [0, 1]');
          }
        }
      }
      // Test if options contains other mandatory args (origin)
      if (options.x0 === undefined || options.x0 === null || options.y0 === undefined || options.y0 === null || options.r0 === undefined || options.r0 === null) {
        return new Error('ColorUtils.drawRadialGradient : Missing arguments options.x0 or options.y0 or options.r0');
      }
      // Test mandatory arguments proper types (origin)
      if (typeof options.x0 !== 'number' || typeof options.y0 !== 'number' || typeof options.r0 !== 'number') {
        return new Error('ColorUtils.drawRadialGradient : Invalid type for options.x0 or options.y0 or options.r0');
      }
      // Test if options contains other mandatory args (destination)
      if (options.x1 === undefined || options.x1 === null || options.y1 === undefined || options.y1 === null || options.r1 === undefined || options.r1 === null) {
        return new Error('ColorUtils.drawRadialGradient : Missing arguments options.x1 or options.y1 or options.r1');
      }
      // Test mandatory arguments proper types (destination)
      if (typeof options.x1 !== 'number' || typeof options.y1 !== 'number' || typeof options.r1 !== 'number') {
        return new Error('ColorUtils.drawRadialGradient : Invalid type for options.x1 or options.y1 or options.r1');
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      var gradient = ctx.createRadialGradient(options.x0, options.y0, options.r0, options.x1, options.y1, options.r1);
      for (var _i = 0; _i < options.colors.length; ++_i) {
        gradient.addColorStop(options.colors[_i].index, options.colors[_i].color);
      }
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    /** @method
     * @name radialGlowGradient
     * @public
     * @memberof ColorUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Returns a radial glowing gradient according to options object.</blockquote>
     * @param {object} canvas - The canvas to draw radial glowing gradient in
     * @param {object} options - Radial glowing gradient options
     * @param {number} options.centerX - The center x origin in canvas dimension
     * @param {number} options.centerY - The center y origin in canvas dimension
     * @param {number} options.radius - The circle radius in canvas dimension
     * @param {object[]} options.colors - The color gradient, must be objects with color (in Hex/RGB/HSL) and index (in Float[0,1]) properties
     * @return {object} The radial glowing gradient to apply **/
  }, {
    key: "radialGlowGradient",
    value: function radialGlowGradient(canvas, options) {
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null || options === undefined || options === null) {
        return new Error('ColorUtils.radialGlowGradient : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('ColorUtils.radialGlowGradient : Invalid type for canvas or options');
      }
      // Test if options.colors is properly formed
      if (!options.colors || !Array.isArray(options.colors)) {
        return new Error('ColorUtils.radialGlowGradient : Options object is not properly formed');
      }
      // Test if sent colors if properly formed of color/index objects
      for (var i = 0; i < options.colors.length; ++i) {
        if (options.colors[i].index === undefined || options.colors[i].index === null || typeof options.colors[i].index !== 'number' || options.colors[i].color === undefined || options.colors[i].color === null || typeof options.colors[i].color !== 'string') {
          return new Error('ColorUtils.radialGlowGradient : Invalid type for a color sent in options object');
        } else {
          // Test tha index is in [0,1]
          if (options.colors[i].index < 0 || options.colors[i].index > 1) {
            return new Error('ColorUtils.radialGlowGradient : An index sent in options object is not a valid float in [0, 1]');
          }
        }
      }
      // Test if options contains other mandatory args
      if (options.centerX === undefined || options.centerX === null || options.centerY === undefined || options.centerY === null || options.radius === undefined || options.radius === null) {
        return new Error('ColorUtils.radialGlowGradient : Missing arguments options.centerX or options.centerY or options.radius');
      }
      // Test mandatory arguments proper types
      if (typeof options.centerX !== 'number' || typeof options.centerY !== 'number' || typeof options.radius !== 'number') {
        return new Error('ColorUtils.radialGlowGradient : Invalid type for options.centerX or options.centerY or options.radius');
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      var gradient = ctx.createRadialGradient(options.centerX, options.centerY, 0, options.centerX, options.centerY, options.radius);
      for (var _i2 = 0; _i2 < options.colors.length; ++_i2) {
        gradient.addColorStop(options.colors[_i2].index, options.colors[_i2].color);
      }
      return gradient;
    }

    /** @method
     * @name linearGradient
     * @public
     * @memberof ColorUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2021
     * @description <blockquote>Returns a linear gradient according to options object.</blockquote>
     * @param {object} canvas - The canvas to draw radial glowing gradient in
     * @param {object} options - Linear gradient options
     * @param {boolean} [options.vertical] - Draw the gradient vertically
     * @param {object[]} options.colors - The color gradient, must be objects with color (in Hex or css colors) and index (in Float[0,1]) properties
     * @return {object} The linear gradient to apply **/
  }, {
    key: "linearGradient",
    value: function linearGradient(canvas, options) {
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null || options === undefined || options === null) {
        return new Error('ColorUtils.linearGradient : Missing arguments canvas or options');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || _typeof(options) !== 'object') {
        return new Error('ColorUtils.linearGradient : Invalid type for canvas or options');
      }
      // Test if options.colors is properly formed
      if (!options.colors || !Array.isArray(options.colors)) {
        return new Error('ColorUtils.linearGradient : Options object is not properly formed');
      }
      // Test if sent colors if properly formed of color/index objects
      for (var i = 0; i < options.colors.length; ++i) {
        if (options.colors[i].index === undefined || options.colors[i].index === null || typeof options.colors[i].index !== 'number' || options.colors[i].color === undefined || options.colors[i].color === null || typeof options.colors[i].color !== 'string') {
          return new Error('ColorUtils.linearGradient : Invalid type for a color sent in options object');
        } else {
          // Test tha index is in [0,1]
          if (options.colors[i].index < 0 || options.colors[i].index > 1) {
            return new Error('ColorUtils.linearGradient : An index sent in options object is not a valid float in [0, 1]');
          }
        }
      }
      // Perform method purpose
      var ctx = canvas.getContext('2d');
      var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      if (options.vertical === true) {
        gradient = ctx.createLinearGradient(0, canvas.height, 0, 0);
      }
      for (var _i3 = 0; _i3 < options.colors.length; ++_i3) {
        gradient.addColorStop(options.colors[_i3].index, options.colors[_i3].color);
      }
      return gradient;
    }

    /** @method
     * @name rainbowLinearGradient
     * @public
     * @memberof ColorUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Returns a vertical or horizontal rainbow gradient.</blockquote>
     * @param {object} canvas - The canvas to create gradient from
     * @param {boolean} [vertical=false] - The gradient orientation, default to horizontal
     * @return {object} The rainbow gradient to apply **/
  }, {
    key: "rainbowLinearGradient",
    value: function rainbowLinearGradient(canvas) {
      var vertical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // Test that caller sent mandatory arguments
      if (canvas === undefined || canvas === null) {
        return new Error('ColorUtils.rainbowLinearGradient : Missing arguments canvas');
      }
      // Test those arguments proper types
      if (canvas.nodeName !== 'CANVAS' || typeof vertical !== 'boolean') {
        return new Error('ColorUtils.rainbowLinearGradient : Invalid type for canvas or vertical');
      }
      // Perform method purpose
      return ColorUtils.linearGradient(canvas, {
        vertical: vertical,
        colors: [{
          color: 'red',
          index: 0
        }, {
          color: 'orange',
          index: 1 / 7
        }, {
          color: 'yellow',
          index: 2 / 7
        }, {
          color: 'green',
          index: 3 / 7
        }, {
          color: 'blue',
          index: 4 / 7
        }, {
          color: 'indigo',
          index: 5 / 7
        }, {
          color: 'violet',
          index: 6 / 7
        }, {
          color: 'red',
          index: 1
        }]
      });
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ---------------------------------------  COLOR MANIPULATION METHOD  ------------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @method
     * @name lightenDarkenColor
     * @public
     * @memberof ColorUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Lighten or darken a given color from an amount. Inspired from https://jsfiddle.net/gabrieleromanato/hrJ4X/</blockquote>
     * @param {string} color - The color to alter in Hex
     * @param {number} amount - The percentage amount to lighten or darken in Float[-100,100]
     * @return {string} The altered color in Hex **/
  }, {
    key: "lightenDarkenColor",
    value: function lightenDarkenColor(color, amount) {
      // Test that caller sent mandatory arguments
      if (color === undefined || color === null || amount === undefined || amount === null) {
        return new Error('ColorUtils.lightenDarkenColor : Missing arguments color or amount');
      }
      // Test those arguments proper types
      if (typeof color !== 'string' || typeof amount !== 'number') {
        return new Error('ColorUtils.lightenDarkenColor : Invalid type for color or amount');
      }
      // Pound color value to remove # char and memorize it had one
      var usePound = false;
      if (color.startsWith('#')) {
        color = color.slice(1);
        usePound = true;
      }
      // Test that color is an hex code
      if (!/^[a-fA-F0-9]+$/i.test(color)) {
        return new Error('ColorUtils.lightenDarkenColor : Color is not a valid hexadecimal value');
      }
      // Check that alpha value is properly bounded to [0, 1]
      if (amount < -100 || amount > 100) {
        return new Error('ColorUtils.lightenDarkenColor : Amount is not a valid float in [-100, 100]');
      }
      if (amount === 0) {
        return (usePound ? '#' : '') + color.toLowerCase();
      }
      if (amount > 0) {
        amount += 16;
      } else {
        amount -= 16;
      }
      // Perform method purpose
      var num = parseInt(color, 16);
      // Red channel bounding
      var r = (num >> 16) + amount;
      if (r > 255) {
        r = 255;
      } else if (r < 0) {
        r = 0;
      }
      // Blue channel bounding
      var b = (num >> 8 & 0x00FF) + amount;
      if (b > 255) {
        b = 255;
      } else if (b < 0) {
        b = 0;
      }
      // Green channel bounding
      var g = (num & 0x0000FF) + amount;
      if (g > 255) {
        g = 255;
      } else if (g < 0) {
        g = 0;
      }
      // Format returned hex value
      return (usePound ? '#' : '') + (g | b << 8 | r << 16).toString(16);
    }

    /** @method
     * @name alphaColor
     * @public
     * @memberof ColorUtils
     * @static
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Add transparency on an existing color.</blockquote>
     * @param {string} color - The color to make transparent in Hex
     * @param {number} alpha - The amount of transparency applied on color in Float[0,1]
     * @return {string} The transparent color in rgba **/
  }, {
    key: "alphaColor",
    value: function alphaColor(color, alpha) {
      // Test that caller sent mandatory arguments
      if (color === undefined || color === null || alpha === undefined || alpha === null) {
        return new Error('ColorUtils.alphaColor : Missing arguments color or alpha');
      }
      // Test those arguments proper types
      if (typeof color !== 'string' || typeof alpha !== 'number') {
        return new Error('ColorUtils.alphaColor : Invalid type for color or alpha');
      }
      // Remove # symbol if any on color value
      if (color.startsWith('#')) {
        color = color.slice(1);
      }
      // Test that color is an hex code
      if (!/^[a-fA-F0-9]+$/i.test(color)) {
        return new Error('ColorUtils.alphaColor : Color is not a valid hexadecimal value');
      }
      // Check that alpha value is properly bounded to [0, 1]
      if (alpha < 0 || alpha > 1) {
        return new Error('ColorUtils.alphaColor : Alpha is not a valid float in [0, 1]');
      }
      // Perform method purpose
      var num = parseInt(color, 16);
      return "rgba(".concat(num >> 16, ", ").concat(num >> 8 & 0x00FF, ", ").concat(num & 0x0000FF, ", ").concat(alpha, ")");
    }

    /*  --------------------------------------------------------------------------------------------------------------- */
    /*  ------------------------------------  COMPONENT DEFAULT COLORS METHOD  ---------------------------------------  */
    /*  --------------------------------------------------------------------------------------------------------------- */

    /** @public
     * @static
     * @member {string} - The default background color, #1D1E25 */
  }, {
    key: "defaultBackgroundColor",
    get: function get() {
      return '#1D1E25';
    }

    /** @public
     * @static
     * @member {string} - The default text color, #E7E9E7 */
  }, {
    key: "defaultTextColor",
    get: function get() {
      return '#E7E9E7';
    }

    /** @public
     * @static
     * @member {string} - The default primary color, #56D45B */
  }, {
    key: "defaultPrimaryColor",
    get: function get() {
      return '#56D45B';
    }

    /** @public
     * @static
     * @member {string} - The default anti primary color, #FF6B67 */
  }, {
    key: "defaultAntiPrimaryColor",
    get: function get() {
      return '#FF6B67';
    }

    /** @public
     * @static
     * @member {string} - The default dark primary color, #12B31D */
  }, {
    key: "defaultDarkPrimaryColor",
    get: function get() {
      return '#12B31D';
    }

    /** @public
     * @static
     * @member {string} - The default dark primary color, #FFAD67 */
  }, {
    key: "defaultLoopColor",
    get: function get() {
      return '#FFAD67';
    }

    /** @public
     * @static
     * @member {string} - The default dark primary color, #FFAD67 */
  }, {
    key: "defaultLoopAlphaColor",
    get: function get() {
      return this.alphaColor('FFAD67', 0.5);
    }

    /** @public
     * @static
     * @member {string[]} - The default color array to be used in gradient, <code>['#56D45B', '#AFF2B3', '#FFAD67', '#FF6B67', '#FFBAB8']</code> */
  }, {
    key: "defaultAudioGradient",
    get: function get() {
      return [{
        color: '#56D45B',
        index: 0
      },
      // Green
      {
        color: '#AFF2B3',
        index: 0.7
      },
      // Light Green
      {
        color: '#FFAD67',
        index: 0.833
      },
      // Orange
      {
        color: '#FF6B67',
        index: 0.9
      },
      // Red
      {
        color: '#FFBAB8',
        index: 1
      } // Light Red
      ];
    }
  }]);
  return ColorUtils;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ColorUtils);

/***/ }),

/***/ "./front/js/view/visu/utils/VisuComponentMono.js":
/*!*******************************************************!*\
  !*** ./front/js/view/visu/utils/VisuComponentMono.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _BaseComponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseComponent.js */ "./front/js/view/visu/utils/BaseComponent.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var VisuComponentMono = /*#__PURE__*/function (_BaseComponent) {
  _inherits(VisuComponentMono, _BaseComponent);
  var _super = _createSuper(VisuComponentMono);
  /** @summary VisuComponentMono is an abstraction for mono visualisation component. It must be inherited.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments BaseComponent
   * @description <blockquote>Mono components inherit this class to benefit its node routing and canvas
   * configuration. It is meant to use a single canvas for mono or merged L/R audio channels. This class extends
   * BaseComponent to benefits all shared properties between visualisations.</blockquote>
   * @param {object} options - The visualizer root options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {boolean} [options.noEvents] - Force component to be inactive to events
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one **/
  function VisuComponentMono(options) {
    var _this;
    _classCallCheck(this, VisuComponentMono);
    _this = _super.call(this);
    /** @private
     * @member {object} - Audio nodes from web audio API to manipulate data with */
    _this._nodes = {
      source: null,
      // HTML audio element
      analyser: null // Analysis node
    };
    /** @private
     * @member {boolean} - Force no events on components, must be handled in child class */
    _this._noEvents = options.noEvents || true;
    /** @private
     * @member {object} - The canvas to rendered mono data to */
    _this._canvas = null;
    /** @private
     * @member {object} - The canvas associated context */
    _this._ctx = null;
    // Construction sequence
    _this._fillAttributes(options);
    _this._buildUI();
    _this._setAudioNodes();
    _this._addEvents();
    return _this;
  }

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof VisuComponentMono
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The visualizer root options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one **/
  _createClass(VisuComponentMono, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      this._type = options.type;
      this._player = options.player;
      this._renderTo = options.renderTo;
      this._fftSize = options.fftSize;
      this._audioCtx = options.audioContext;
      this._inputNode = options.inputNode;
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof VisuComponentMono
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      this._dom.container = document.createElement('DIV');
      this._dom.container.classList.add("audio-".concat(this._type));
      this._canvas = document.createElement('CANVAS');
      this._canvas.style.cssText = 'display:block;box-sizing:border-box;';
      this._canvas.width = this._renderTo.offsetWidth;
      this._canvas.height = this._renderTo.offsetHeight;
      this._ctx = this._canvas.getContext('2d');
      this._ctx.translate(0.5, 0.5);
      this._dom.container.appendChild(this._canvas);
      this._renderTo.appendChild(this._dom.container);
    }

    /** @method
     * @name _setAudioNodes
     * @private
     * @override
     * @memberof VisuComponentMono
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build audio chain with source -> analyzer -> destination.</blockquote> **/
  }, {
    key: "_setAudioNodes",
    value: function _setAudioNodes() {
      var audioCtxSent = false;
      if (!this._audioCtx) {
        this._audioCtx = new AudioContext();
        this._nodes.source = this._audioCtx.createMediaElementSource(this._player);
      } else {
        audioCtxSent = true;
        this._nodes.source = this._inputNode;
      }
      this._nodes.analyser = this._audioCtx.createAnalyser();
      this._nodes.analyser.fftSize = this._fftSize;
      this._nodes.source.connect(this._nodes.analyser);
      if (!audioCtxSent) {
        this._nodes.analyser.connect(this._audioCtx.destination);
      }
    }

    /** @method
     * @name _onResize
     * @private
     * @override
     * @memberof VisuComponentMono
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>On resize event callback.</blockquote> **/
  }, {
    key: "_onResize",
    value: function _onResize() {
      this._canvas.width = this._renderTo.offsetWidth;
      this._canvas.height = this._renderTo.offsetHeight;
    }

    /** @method
     * @name _clearCanvas
     * @private
     * @override
     * @memberof VisuComponentMono
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Clear component canvas context from its content.</blockquote> **/
  }, {
    key: "_clearCanvas",
    value: function _clearCanvas() {
      this._canvas.getContext('2d').clearRect(0, 0, this._canvas.width, this._canvas.height);
    }
  }]);
  return VisuComponentMono;
}(_BaseComponent_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VisuComponentMono);

/***/ }),

/***/ "./front/js/view/visu/utils/VisuComponentStereo.js":
/*!*********************************************************!*\
  !*** ./front/js/view/visu/utils/VisuComponentStereo.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _BaseComponent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseComponent.js */ "./front/js/view/visu/utils/BaseComponent.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var VisuComponentStereo = /*#__PURE__*/function (_BaseComponent) {
  _inherits(VisuComponentStereo, _BaseComponent);
  var _super = _createSuper(VisuComponentStereo);
  /** @summary VisuComponentStereo is an abstraction for stereo visualisation components. It must be inherited.
   * @author Arthur Beaulieu
   * @since 2020
   * @augments BaseComponent
   * @description <blockquote>Stereo components inherit this class to benefit its node routing and canvas
   * configuration. It is meant to use a L/R canvas for stereo or merged L/R one. This class extends BaseComponent to
   * benefits all shared properties between visualisations.</blockquote>
   * @param {object} options - The visualizer root options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {boolean} [options.noEvents] - Force component to be inactive to events
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {boolean} [options.merged=false] - Merge channels into mono output **/
  function VisuComponentStereo(options) {
    var _this;
    _classCallCheck(this, VisuComponentStereo);
    _this = _super.call(this);
    /** @private
     * @member {boolean} - Merge L and R channel on output */
    _this._merged = null;
    /** @private
     * @member {object} - Audio nodes from web audio API to manipulate data with */
    _this._nodes = {
      source: null,
      // HTML audio element
      splitter: null,
      // Stereo channel splitting
      merger: null,
      // Merge channels into one
      analyser: null,
      // Merged stereo channels analysis
      analyserL: null,
      // Left channel analysis
      analyserR: null // Right channel analysis
    };
    /** @private
     * @member {boolean} - Force no events on components, must be handled in child class */
    _this._noEvents = options.noEvents || true;
    /** @private
     * @member {object} - The canvas to rendered left channed data to */
    _this._canvasL = null;
    /** @private
     * @member {object} - The canvas to rendered right channed data to */
    _this._canvasR = null;
    /** @private
     * @member {object} - The left canvas associated context */
    _this._ctxL = null;
    /** @private
     * @member {object} - The right canvas associated context */
    _this._ctxR = null;
    // Construction sequence
    _this._fillAttributes(options);
    _this._buildUI();
    _this._setAudioNodes();
    _this._addEvents();
    return _this;
  }

  /** @method
   * @name _fillAttributes
   * @private
   * @override
   * @memberof VisuComponentStereo
   * @author Arthur Beaulieu
   * @since 2020
   * @description <blockquote>Internal method to fill internal properties from options object sent to constructor.</blockquote>
   * @param {object} options - The visualizer root options
   * @param {string} options.type - The component type as string
   * @param {object} options.player - The player to take as processing input (if inputNode is given, player source will be ignored)
   * @param {object} options.renderTo - The DOM element to render canvas in
   * @param {number} options.fftSize - The FFT size for analysis. Must be a power of 2. High values may lead to heavy CPU cost
   * @param {object} [options.audioContext=null] - The audio context to base analysis from
   * @param {object} [options.inputNode=null] - The audio node to take source instead of player's one
   * @param {boolean} [options.merged=false] - Merge channels into mono output **/
  _createClass(VisuComponentStereo, [{
    key: "_fillAttributes",
    value: function _fillAttributes(options) {
      this._type = options.type;
      this._player = options.player;
      this._renderTo = options.renderTo;
      this._fftSize = options.fftSize || 1024;
      this._audioCtx = options.audioContext;
      this._inputNode = options.inputNode;
      this._merged = options.merged || false;
    }

    /** @method
     * @name _buildUI
     * @private
     * @override
     * @memberof VisuComponentStereo
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Create and configure canvas then append it to given DOM element.</blockquote> **/
  }, {
    key: "_buildUI",
    value: function _buildUI() {
      this._dom.container = document.createElement('DIV');
      this._dom.container.classList.add("audio-".concat(this._type));
      this._canvasL = document.createElement('canvas');
      this._canvasR = document.createElement('canvas');
      this._canvasL.style.cssText = 'display:block;box-sizing:border-box;';
      this._canvasR.style.cssText = 'display:block;box-sizing:border-box;';
      this._ctxL = this._canvasL.getContext('2d');
      this._ctxR = this._canvasR.getContext('2d');
      this._ctxL.translate(0.5, 0.5);
      this._ctxR.translate(0.5, 0.5);
      this._dom.container.appendChild(this._canvasL);
      this._dom.container.appendChild(this._canvasR);
      this._renderTo.appendChild(this._dom.container);
    }

    /** @method
     * @name _setAudioNodes
     * @private
     * @override
     * @memberof VisuComponentStereo
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Build audio chain with source -> splitter -> analyzerL/R -> merger -> destination.</blockquote> **/
  }, {
    key: "_setAudioNodes",
    value: function _setAudioNodes() {
      var audioCtxSent = false;
      if (!this._audioCtx) {
        this._audioCtx = new AudioContext();
        this._nodes.source = this._audioCtx.createMediaElementSource(this._player);
      } else {
        audioCtxSent = true;
        this._nodes.source = this._inputNode;
      }
      var outputNode;
      if (this._merged === true) {
        this._nodes.analyser = this._audioCtx.createAnalyser();
        this._nodes.analyser.fftSize = this._fftSize;
        // Nodes chaining
        this._nodes.source.connect(this._nodes.analyser);
        outputNode = this._nodes.analyser;
      } else {
        this._nodes.splitter = this._audioCtx.createChannelSplitter(this._nodes.source.channelCount);
        this._nodes.merger = this._audioCtx.createChannelMerger(this._nodes.source.channelCount);
        this._nodes.analyserL = this._audioCtx.createAnalyser();
        this._nodes.analyserR = this._audioCtx.createAnalyser();
        this._nodes.analyserR.fftSize = this._fftSize;
        this._nodes.analyserL.fftSize = this._fftSize;
        // Nodes chaining
        this._nodes.source.connect(this._nodes.splitter);
        this._nodes.splitter.connect(this._nodes.analyserL, 0);
        this._nodes.splitter.connect(this._nodes.analyserR, 1);
        this._nodes.analyserL.connect(this._nodes.merger, 0, 0);
        this._nodes.analyserR.connect(this._nodes.merger, 0, 1);
        outputNode = this._nodes.merger;
      }
      if (!audioCtxSent) {
        outputNode.connect(this._audioCtx.destination);
      } else {
        // If any previous context exists, we mute this channel to not disturb any playback
        var gainNode = this._audioCtx.createGain();
        gainNode.gain.value = 0;
        outputNode.connect(gainNode);
        gainNode.connect(this._audioCtx.destination);
      }
    }

    /** @method
     * @name _clearCanvas
     * @private
     * @override
     * @memberof VisuComponentStereo
     * @author Arthur Beaulieu
     * @since 2020
     * @description <blockquote>Clear component canvas contexts from their content.</blockquote> **/
  }, {
    key: "_clearCanvas",
    value: function _clearCanvas() {
      this._canvasL.getContext('2d').clearRect(0, 0, this._canvasL.width, this._canvasL.height);
      this._canvasR.getContext('2d').clearRect(0, 0, this._canvasR.width, this._canvasR.height);
    }
  }]);
  return VisuComponentStereo;
}(_BaseComponent_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VisuComponentStereo);

/***/ }),

/***/ "./front/scss/navigation/scrollbar.scss":
/*!**********************************************!*\
  !*** ./front/scss/navigation/scrollbar.scss ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./front/scss/tool/_pager.scss":
/*!*************************************!*\
  !*** ./front/scss/tool/_pager.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./front/scss/visu/audiovisualizer.scss":
/*!**********************************************!*\
  !*** ./front/scss/visu/audiovisualizer.scss ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
var __webpack_exports__ = {};
/*!**********************************!*\
  !*** ./front/js/StartSession.js ***!
  \**********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Utils */ "./front/js/utils/Utils.js");
/* harmony import */ var _utils_CustomEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/CustomEvents */ "./front/js/utils/CustomEvents.js");
/* harmony import */ var _utils_Shortcut__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Shortcut */ "./front/js/utils/Shortcut.js");
/* harmony import */ var _utils_Logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/Logger */ "./front/js/utils/Logger.js");
/* harmony import */ var _utils_Notification__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Notification */ "./front/js/utils/Notification.js");
/* harmony import */ var _core_Mzk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/Mzk */ "./front/js/core/Mzk.js");







// Globally used components (singleton)
window.Utils = new _utils_Utils__WEBPACK_IMPORTED_MODULE_0__["default"]();
window.Evts = new _utils_CustomEvents__WEBPACK_IMPORTED_MODULE_1__["default"]();
window.Shortcut = new _utils_Shortcut__WEBPACK_IMPORTED_MODULE_2__["default"]();
window.Notif = new _utils_Notification__WEBPACK_IMPORTED_MODULE_4__["default"]();
window.Logger = new _utils_Logger__WEBPACK_IMPORTED_MODULE_3__["default"]({
  notification: window.Notif,
  log: window.location.href.indexOf('?debug') > -1 ? true : false
});

// Create new ManaZeak object to init internals then full init
window.mzk = new _core_Mzk__WEBPACK_IMPORTED_MODULE_5__["default"]();
window.mzk.initSession();
window.DEBUG = true;
})();

// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
/*!******************************************!*\
  !*** ./front/scss/service/manazeak.scss ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,